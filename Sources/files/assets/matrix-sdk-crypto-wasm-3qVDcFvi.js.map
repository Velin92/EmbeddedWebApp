{"version":3,"file":"matrix-sdk-crypto-wasm-3qVDcFvi.js","sources":["../../node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js","../../node_modules/@matrix-org/matrix-sdk-crypto-wasm/index.mjs"],"sourcesContent":["let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_56(arg0, arg1, arg2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h8b01e5822120501e(retptr, arg0, arg1, addHeapObject(arg2));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction __wbg_adapter_59(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h421ff8a63e364c82(arg0, arg1);\n}\n\nfunction __wbg_adapter_62(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hf01ec3d0f56b9a66(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_65(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h979574dda83929ee(arg0, arg1);\n}\n\nfunction __wbg_adapter_68(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h763dc4f7c27cfc89(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    const mem = getDataViewMemory0();\n    for (let i = 0; i < array.length; i++) {\n        mem.setUint32(ptr + 4 * i, addHeapObject(array[i]), true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nlet stack_pointer = 128;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(takeObject(mem.getUint32(i, true)));\n    }\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n* Get the versions of the Rust libraries we are using.\n* @returns {Versions}\n*/\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n* Run some stuff when the Wasm module is instantiated.\n*\n* Right now, it does the following:\n*\n* * Redirect Rust panics to JavaScript console.\n*/\nexport function start() {\n    wasm.start();\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_748(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h1b141f68d4959757(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* Who can see a room's history.\n*/\nexport const HistoryVisibility = Object.freeze({\n/**\n* Previous events are accessible to newly joined members from\n* the point they were invited onwards.\n*\n* Events stop being accessible when the member's state changes\n* to something other than *invite* or *join*.\n*/\nInvited:0,\"0\":\"Invited\",\n/**\n* Previous events are accessible to newly joined members from\n* the point they joined the room onwards.\n*\n* Events stop being accessible when the member's state changes\n* to something other than *join*.\n*/\nJoined:1,\"1\":\"Joined\",\n/**\n* Previous events are always accessible to newly joined members.\n*\n* All events in the room are accessible, even those sent when\n* the member was not a part of the room.\n*/\nShared:2,\"2\":\"Shared\",\n/**\n* All events while this is the `HistoryVisibility` value may be\n* shared by any participating homeserver with anyone, regardless\n* of whether they have ever joined the room.\n*/\nWorldReadable:3,\"3\":\"WorldReadable\", });\n/**\n* Logger level.\n*/\nexport const LoggerLevel = Object.freeze({\n/**\n* `TRACE` level.\n*\n* Designate very low priority, often extremely verbose,\n* information.\n*/\nTrace:0,\"0\":\"Trace\",\n/**\n* `DEBUG` level.\n*\n* Designate lower priority information.\n*/\nDebug:1,\"1\":\"Debug\",\n/**\n* `INFO` level.\n*\n* Designate useful information.\n*/\nInfo:2,\"2\":\"Info\",\n/**\n* `WARN` level.\n*\n* Designate hazardous situations.\n*/\nWarn:3,\"3\":\"Warn\",\n/**\n* `ERROR` level.\n*\n* Designate very serious errors.\n*/\nError:4,\"4\":\"Error\", });\n/**\n* List of VerificationRequestState phases\n*/\nexport const VerificationRequestPhase = Object.freeze({\n/**\n* The verification request has been newly created by us.\n*/\nCreated:0,\"0\":\"Created\",\n/**\n* The verification request was received from the other party.\n*/\nRequested:1,\"1\":\"Requested\",\n/**\n* The verification request is ready to start a verification flow.\n*/\nReady:2,\"2\":\"Ready\",\n/**\n* The verification request has transitioned into a concrete verification\n* flow. For example it transitioned into the emoji based SAS\n* verification.\n*/\nTransitioned:3,\"3\":\"Transitioned\",\n/**\n* The verification flow that was started with this request has finished.\n*/\nDone:4,\"4\":\"Done\",\n/**\n* The verification process has been cancelled.\n*/\nCancelled:5,\"5\":\"Cancelled\", });\n/**\n* List of available verification methods.\n*/\nexport const VerificationMethod = Object.freeze({\n/**\n* The `m.sas.v1` verification method.\n*\n* SAS means Short Authentication String.\n*/\nSasV1:0,\"0\":\"SasV1\",\n/**\n* The `m.qr_code.scan.v1` verification method.\n*/\nQrCodeScanV1:1,\"1\":\"QrCodeScanV1\",\n/**\n* The `m.qr_code.show.v1` verification method.\n*/\nQrCodeShowV1:2,\"2\":\"QrCodeShowV1\",\n/**\n* The `m.reciprocate.v1` verification method.\n*/\nReciprocateV1:3,\"3\":\"ReciprocateV1\", });\n/**\n* List of `Qr` states\n*/\nexport const QrState = Object.freeze({\n/**\n* We have received the other device's details (from the\n* `m.key.verification.request` or `m.key.verification.ready`) and\n* established the shared secret, so can\n* display the QR code.\n*/\nCreated:0,\"0\":\"Created\",\n/**\n* The other side has scanned our QR code and sent an\n* `m.key.verification.start` message with `method: m.reciprocate.v1` with\n* matching shared secret.\n*/\nScanned:1,\"1\":\"Scanned\",\n/**\n* Our user has confirmed that the other device scanned successfully. We\n* have sent an `m.key.verification.done`.\n*/\nConfirmed:2,\"2\":\"Confirmed\",\n/**\n* We have scanned the other side's QR code and are able to send a\n* `m.key.verification.start` message with `method: m.reciprocate.v1`.\n*\n* Call `Qr::reciprocate` to build the start message.\n*\n* Note that, despite the name of this state, we have not necessarily\n* yet sent the `m.reciprocate.v1` message.\n*/\nReciprocated:3,\"3\":\"Reciprocated\",\n/**\n* Verification complete: we have received an `m.key.verification.done`\n* from the other side.\n*/\nDone:4,\"4\":\"Done\",\n/**\n* Verification cancelled or failed.\n*/\nCancelled:5,\"5\":\"Cancelled\", });\n/**\n* The result of a signature check.\n*/\nexport const SignatureState = Object.freeze({\n/**\n* The signature is missing.\n*/\nMissing:0,\"0\":\"Missing\",\n/**\n* The signature is invalid.\n*/\nInvalid:1,\"1\":\"Invalid\",\n/**\n* The signature is valid but the device or user identity that created the\n* signature is not trusted.\n*/\nValidButNotTrusted:2,\"2\":\"ValidButNotTrusted\",\n/**\n* The signature is valid and the device or user identity that created the\n* signature is trusted.\n*/\nValidAndTrusted:3,\"3\":\"ValidAndTrusted\", });\n/**\n* An encryption algorithm to be used to encrypt messages sent to a\n* room.\n*/\nexport const EncryptionAlgorithm = Object.freeze({\n/**\n* Olm version 1 using Curve25519, AES-256, and SHA-256.\n*/\nOlmV1Curve25519AesSha2:0,\"0\":\"OlmV1Curve25519AesSha2\",\n/**\n* Megolm version 1 using AES-256 and SHA-256.\n*/\nMegolmV1AesSha2:1,\"1\":\"MegolmV1AesSha2\",\n/**\n* Unsupported algorithm.\n*\n* Applications should ignore this value if it is received, and should\n* never set it.\n*/\nUnknown:2,\"2\":\"Unknown\", });\n/**\n* The local trust state of a device.\n*/\nexport const LocalTrust = Object.freeze({\n/**\n* The device has been verified and is trusted.\n*/\nVerified:0,\"0\":\"Verified\",\n/**\n* The device been blacklisted from communicating.\n*/\nBlackListed:1,\"1\":\"BlackListed\",\n/**\n* The trust state of the device is being ignored.\n*/\nIgnored:2,\"2\":\"Ignored\",\n/**\n* The trust state is unset.\n*/\nUnset:3,\"3\":\"Unset\", });\n/**\n* The basic key algorithm names in the specification.\n*/\nexport const DeviceKeyAlgorithmName = Object.freeze({\n/**\n* The Ed25519 signature algorithm.\n*/\nEd25519:0,\"0\":\"Ed25519\",\n/**\n* The Curve25519 ECDH algorithm.\n*/\nCurve25519:1,\"1\":\"Curve25519\",\n/**\n* An unknown device key algorithm.\n*/\nUnknown:3,\"3\":\"Unknown\", });\n/**\n* Decryption error codes\n*/\nexport const DecryptionErrorCode = Object.freeze({\n/**\n* The room key is not known\n*/\nMissingRoomKey:0,\"0\":\"MissingRoomKey\",\n/**\n* The room key is known but ratcheted\n*/\nUnknownMessageIndex:1,\"1\":\"UnknownMessageIndex\",\n/**\n* Decryption failed because of a mismatch between the identity keys of the\n* device we received the room key from and the identity keys recorded in\n* the plaintext of the room key to-device message.\n*/\nMismatchedIdentityKeys:2,\"2\":\"MismatchedIdentityKeys\",\n/**\n* We weren't able to link the message back to any known device.\n*/\nUnknownSenderDevice:3,\"3\":\"UnknownSenderDevice\",\n/**\n* The sender device is not cross-signed.\n*/\nUnsignedSenderDevice:4,\"4\":\"UnsignedSenderDevice\",\n/**\n* The sender's identity is unverified, but was previously verified.\n*/\nSenderIdentityVerificationViolation:5,\"5\":\"SenderIdentityVerificationViolation\",\n/**\n* Other failure.\n*/\nUnableToDecrypt:6,\"6\":\"UnableToDecrypt\", });\n/**\n* The mode of the QR code login.\n*\n* The QR code login mechanism supports both, the new device, as well as the\n* existing device to display the QR code.\n*\n* The different modes have an explicit one-byte identifier which gets added to\n* the QR code data.\n*/\nexport const QrCodeMode = Object.freeze({\n/**\n* The new device is displaying the QR code.\n*/\nLogin:0,\"0\":\"Login\",\n/**\n* The existing device is displaying the QR code.\n*/\nReciprocate:1,\"1\":\"Reciprocate\", });\n/**\n* The trust level required to decrypt an event\n*/\nexport const TrustRequirement = Object.freeze({\n/**\n* Decrypt events from everyone regardless of trust\n*/\nUntrusted:0,\"0\":\"Untrusted\",\n/**\n* Only decrypt events from cross-signed or legacy devices\n*/\nCrossSignedOrLegacy:1,\"1\":\"CrossSignedOrLegacy\",\n/**\n* Only decrypt events from cross-signed devices\n*/\nCrossSigned:2,\"2\":\"CrossSigned\", });\n/**\n* Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n* for more info.\n*/\nexport const ShieldColor = Object.freeze({\n/**\n* Important warning\n*/\nRed:0,\"0\":\"Red\",\n/**\n* Low warning\n*/\nGrey:1,\"1\":\"Grey\",\n/**\n* No warning\n*/\nNone:2,\"2\":\"None\", });\n/**\n* An enum over the different key types a device can have.\n*\n* Currently devices have a curve25519 and ed25519 keypair. The keys\n* transport format is a base64 encoded string, any unknown key type\n* will be left as such a string.\n*/\nexport const DeviceKeyName = Object.freeze({\n/**\n* The curve25519 device key.\n*/\nCurve25519:0,\"0\":\"Curve25519\",\n/**\n* The ed25519 device key.\n*/\nEd25519:1,\"1\":\"Ed25519\",\n/**\n* An unknown device key.\n*/\nUnknown:2,\"2\":\"Unknown\", });\n/**\n* Represent the type of a request.\n*/\nexport const RequestType = Object.freeze({\n/**\n* Represents a `KeysUploadRequest`.\n*/\nKeysUpload:0,\"0\":\"KeysUpload\",\n/**\n* Represents a `KeysQueryRequest`.\n*/\nKeysQuery:1,\"1\":\"KeysQuery\",\n/**\n* Represents a `KeysClaimRequest`.\n*/\nKeysClaim:2,\"2\":\"KeysClaim\",\n/**\n* Represents a `ToDeviceRequest`.\n*/\nToDevice:3,\"3\":\"ToDevice\",\n/**\n* Represents a `SignatureUploadRequest`.\n*/\nSignatureUpload:4,\"4\":\"SignatureUpload\",\n/**\n* Represents a `RoomMessageRequest`.\n*/\nRoomMessage:5,\"5\":\"RoomMessage\",\n/**\n* Represents a `KeysBackupRequest`.\n*/\nKeysBackup:6,\"6\":\"KeysBackup\", });\n/**\n* A machine-readable representation of the authenticity for a `ShieldState`.\n*/\nexport const ShieldStateCode = Object.freeze({\n/**\n* Not enough information available to check the authenticity.\n*/\nAuthenticityNotGuaranteed:0,\"0\":\"AuthenticityNotGuaranteed\",\n/**\n* The sending device isn't yet known by the Client.\n*/\nUnknownDevice:1,\"1\":\"UnknownDevice\",\n/**\n* The sending device hasn't been verified by the sender.\n*/\nUnsignedDevice:2,\"2\":\"UnsignedDevice\",\n/**\n* The sender hasn't been verified by the Client's user.\n*/\nUnverifiedIdentity:3,\"3\":\"UnverifiedIdentity\",\n/**\n* An unencrypted event in an encrypted room.\n*/\nSentInClear:4,\"4\":\"SentInClear\",\n/**\n* The sender was previously verified but changed their identity.\n*/\nVerificationViolation:5,\"5\":\"VerificationViolation\", });\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n* A type to encrypt and to decrypt anything that can fit in an\n* `Uint8Array`, usually big buffer.\n*/\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n    * Encrypt the content of the `Uint8Array`.\n    *\n    * It produces an `EncryptedAttachment`, which can be used to\n    * retrieve the media encryption information, or the encrypted\n    * data.\n    * @param {Uint8Array} array\n    * @returns {EncryptedAttachment}\n    */\n    static encrypt(array) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.attachment_encrypt(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return EncryptedAttachment.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypt an `EncryptedAttachment`.\n    *\n    * The encrypted attachment can be created manually, or from the\n    * `encrypt` method.\n    *\n    * **Warning**: The encrypted attachment can be used only\n    * **once**! The encrypted data will still be present, but the\n    * media encryption info (which contain secrets) will be\n    * destroyed. It is still possible to get a JSON-encoded backup\n    * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n    * @param {EncryptedAttachment} attachment\n    * @returns {Uint8Array}\n    */\n    static decrypt(attachment) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(attachment, EncryptedAttachment);\n            wasm.attachment_decrypt(retptr, attachment.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n* The private part of the backup key, the one used for recovery.\n*/\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n    * Create a new random [`BackupDecryptionKey`].\n    * @returns {BackupDecryptionKey}\n    */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n    * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n    * @param {string} key\n    * @returns {BackupDecryptionKey}\n    */\n    static fromBase64(key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.backupdecryptionkey_fromBase64(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BackupDecryptionKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Convert the backup decryption key to a base 64 encoded string.\n    * @returns {string}\n    */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the public part of the backup key.\n    * @returns {MegolmV1BackupKey}\n    */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n    * Try to decrypt a message that was encrypted using the public part of the\n    * backup key.\n    * @param {string} ephemeral_key\n    * @param {string} mac\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.backupdecryptionkey_decryptV1(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr4 = r0;\n            var len4 = r1;\n            if (r3) {\n                ptr4 = 0; len4 = 0;\n                throw takeObject(r2);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n* Stored versions of the backup keys.\n*/\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n    * The key used to decrypt backed up room keys\n    * @returns {BackupDecryptionKey | undefined}\n    */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n    * The key used to decrypt backed up room keys\n    * @param {BackupDecryptionKey | undefined} [arg0]\n    */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The version that we are using for backups.\n    * @returns {string | undefined}\n    */\n    get backupVersion() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupkeys_backupVersion(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The version that we are using for backups.\n    * @param {string | undefined} [arg0]\n    */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The key used to decrypt backed up room keys, encoded as base64\n    *\n    * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n    * @returns {string | undefined}\n    */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n* The backup-specific parts of a secrets bundle.\n*/\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n    * The backup decryption key, encoded as unpadded base64.\n    * @returns {string}\n    */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The backup decryption key, encoded as unpadded base64.\n    * @param {string} arg0\n    */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The backup version which this backup decryption key is used with.\n    * @returns {string}\n    */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_backup_version(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The backup version which this backup decryption key is used with.\n    * @param {string} arg0\n    */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n* The base dataset that is important to migrate to the Rust SDK.\n*\n* Can be imported into the rust store with {@link #migrateBaseData}.\n*/\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n    * The user id of the account owner.\n    * @returns {UserId | undefined}\n    */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n    * The user id of the account owner.\n    * @param {UserId | undefined} [arg0]\n    */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The device ID of the account owner.\n    * @returns {DeviceId | undefined}\n    */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n    * The device ID of the account owner.\n    * @param {DeviceId | undefined} [arg0]\n    */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The pickle string holding the Olm Account, as returned by\n    * `olm_pickle_account` in libolm.\n    * @returns {string}\n    */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The pickle string holding the Olm Account, as returned by\n    * `olm_pickle_account` in libolm.\n    * @param {string} arg0\n    */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The backup version that is currently active.\n    * @returns {string | undefined}\n    */\n    get backupVersion() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_backupVersion(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The backup version that is currently active.\n    * @param {string | undefined} [arg0]\n    */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The backup recovery key, as a base64-encoded string.\n    * @returns {string | undefined}\n    */\n    get backupRecoveryKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_backupRecoveryKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The backup recovery key, as a base64-encoded string.\n    * @param {string | undefined} [arg0]\n    */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The private, base64-encoded, master cross-signing key.\n    * @returns {string | undefined}\n    */\n    get privateCrossSigningMasterKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The private, base64-encoded, master cross-signing key.\n    * @param {string | undefined} [arg0]\n    */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The private, base64-encoded, self-signing key.\n    * @returns {string | undefined}\n    */\n    get privateCrossSigningSelfSigningKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The private, base64-encoded, self-signing key.\n    * @param {string | undefined} [arg0]\n    */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The private, base64-encoded, user-signing key.\n    * @returns {string | undefined}\n    */\n    get privateCrossSigningUserSigningKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The private, base64-encoded, user-signing key.\n    * @param {string | undefined} [arg0]\n    */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * Create a new `BaseMigrationData` with default values.\n    */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n* Information about the cancellation of a verification request or\n* verification flow.\n*/\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n    * Get the human readable reason of the cancellation.\n    * @returns {string}\n    */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the `code` (e.g. `m.user`) that was used to cancel the\n    * verification.\n    * @returns {string}\n    */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cancelinfo_cancelCode(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Was the verification cancelled by us?\n    * @returns {boolean}\n    */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n* A check code that can be used to confirm that two [`EstablishedEcies`]\n* objects share the same secret. This is supposed to be shared out-of-band to\n* protect against active Man-in-the-middle (MITM) attacks.\n*\n* Since the initiator device can always tell whether a MITM attack is in\n* progress after channel establishment, this code technically carries only a\n* single bit of information, representing whether the initiator has determined\n* that the channel is \"secure\" or \"not secure\".\n*\n* However, given this will need to be interactively confirmed by the user,\n* there is risk that the user would confirm the dialogue without paying\n* attention to its content. By expanding this single bit into a deterministic\n* two-digit check code, the user is forced to pay more attention by having to\n* enter it instead of just clicking through a dialogue.\n*/\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n    * Convert the check code to an array of two bytes.\n    *\n    * The bytes can be converted to a more user-friendly representation. The\n    * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.checkcode_as_bytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Convert the check code to two base-10 numbers.\n    *\n    * The number should be displayed with a leading 0 in case the first digit\n    * is a 0.\n    * @returns {number}\n    */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n* Strategy to collect the devices that should receive room keys for the\n* current discussion.\n*/\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n    * Tests for equality between two [`CollectStrategy`]s.\n    * @param {CollectStrategy} other\n    * @returns {boolean}\n    */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Device based sharing strategy.\n    *\n    * If `only_allow_trusted_devices` is `true`, devices that are not trusted\n    * will be excluded from the conversation. A device is trusted if any of\n    * the following is true:\n    *     - It was manually marked as trusted.\n    *     - It was marked as verified via interactive verification.\n    *     - It is signed by its owner identity, and this identity has been\n    *       trusted via interactive verification.\n    *     - It is the current own device of the user.\n    *\n    * If `error_on_verified_user` is `true`, and a verified user has an\n    * unsigned device, key sharing will fail with an error.\n    *\n    * If `error_on_verified_user` is `true`, and a verified user has replaced\n    * their identity, key sharing will fail with an error.\n    *\n    * Otherwise, keys are shared with unsigned devices as normal.\n    *\n    * Once the problematic devices are blacklisted or whitelisted the\n    * caller can retry to share a second time.\n    * @param {boolean} only_allow_trusted_devices\n    * @param {boolean} error_on_verified_user_problem\n    * @returns {CollectStrategy}\n    */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n    * Share based on identity. Only distribute to devices signed by their\n    * owner. If a user has no published identity he will not receive\n    * any room keys.\n    * @returns {CollectStrategy}\n    */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n* A set of requests to be executed when bootstrapping cross-signing using\n* {@link OlmMachine.bootstrapCrossSigning}.\n*/\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n    * An optional request to upload a device key.\n    *\n    * This will either be `undefined`, or an \"outgoing request\" as returned by\n    * {@link OlmMachine.outgoingRequests}.\n    *\n    * If it is defined, the request should be sent first, and the result sent\n    * back with {@link OlmMachine.markRequestAsSent}.\n    * @returns {any}\n    */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Request to upload the cross-signing keys.\n    *\n    * Should be sent second.\n    * @returns {UploadSigningKeysRequest}\n    */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n    * Request to upload key signatures, including those for the cross-signing\n    * keys, and maybe some for the optional uploaded key too.\n    *\n    * Should be sent last.\n    * @returns {SignatureUploadRequest}\n    */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n* A struct containing private cross signing keys that can be backed\n* up or uploaded to the secret store.\n*/\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n    * The seed of the master key encoded as unpadded base64.\n    * @returns {string | undefined}\n    */\n    get masterKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.crosssigningkeyexport_masterKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The seed of the self signing key encoded as unpadded base64.\n    * @returns {string | undefined}\n    */\n    get self_signing_key() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.crosssigningkeyexport_self_signing_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The seed of the user signing key encoded as unpadded base64.\n    * @returns {string | undefined}\n    */\n    get userSigningKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.crosssigningkeyexport_userSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n* Struct representing the state of our private cross signing keys,\n* it shows which private cross signing keys we have locally stored.\n*/\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n    * Do we have the master key?\n    * @returns {boolean}\n    */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Do we have the self signing key? This one is necessary to sign\n    * our own devices.\n    * @returns {boolean}\n    */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Do we have the user signing key? This one is necessary to sign\n    * other users.\n    * @returns {boolean}\n    */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n* A Curve25519 public key.\n*/\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n    * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n    * @param {string} key\n    */\n    constructor(key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.curve25519publickey_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The number of bytes a Curve25519 public key has.\n    * @returns {number}\n    */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Serialize an Curve25519 public key to an unpadded base64\n    * representation.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.curve25519publickey_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n* A decrypted room event.\n*/\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n    * The JSON-encoded decrypted event.\n    * @returns {string}\n    */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The user ID of the event sender, note this is untrusted data\n    * unless the `verification_state` is as well trusted.\n    * @returns {UserId | undefined}\n    */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n    * The device ID of the device that sent us the event, note this\n    * is untrusted data unless `verification_state` is as well\n    * trusted.\n    * @returns {DeviceId | undefined}\n    */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n    * The Curve25519 key of the device that created the megolm\n    * decryption key originally.\n    * @returns {string | undefined}\n    */\n    get senderCurve25519Key() {\n        const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The signing Ed25519 key that have created the megolm key that\n    * was used to decrypt this session.\n    * @returns {string | undefined}\n    */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns an empty array\n    *\n    * Previously, this returned the chain of Curve25519 keys through which\n    * this session was forwarded, via `m.forwarded_room_key` events.\n    * However, that is not cryptographically reliable, and clients should not\n    * be using it.\n    *\n    * @see https://github.com/matrix-org/matrix-spec/issues/1089\n    * @returns {Array<any>}\n    */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The verification state of the device that sent us the event.\n    * Note this is the state of the device at the time of\n    * decryption. It may change in the future if a device gets\n    * verified or deleted.\n    * @param {boolean} strict\n    * @returns {ShieldState | undefined}\n    */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ret === 0 ? undefined : ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n* Settings for decrypting messages\n*/\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n    * The trust level required to decrypt the event\n    * @returns {TrustRequirement}\n    */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The trust level required to decrypt the event\n    * @param {TrustRequirement} arg0\n    */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Create a new `DecryptionSettings` with the given trust requirement.\n    * @param {TrustRequirement} sender_device_trust_requirement\n    */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n* A dehydrated device that can be uploaded to the server\n*/\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n    * Create the request to upload the dehydrated device\n    * @param {string} initial_device_display_name\n    * @param {Uint8Array} pickle_key\n    * @returns {Promise<PutDehydratedDeviceRequest>}\n    */\n    keysForUpload(initial_device_display_name, pickle_key) {\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, addHeapObject(initial_device_display_name), addHeapObject(pickle_key));\n        return takeObject(ret);\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n* Struct collecting methods to create and rehydrate dehydrated devices.\n*/\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n    * Create a new [`DehydratedDevice`] which can be uploaded to the server.\n    * @returns {Promise<DehydratedDevice>}\n    */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Rehydrate a dehydrated device.\n    * @param {Uint8Array} pickle_key\n    * @param {DeviceId} device_id\n    * @param {string} device_data\n    * @returns {Promise<RehydratedDevice>}\n    */\n    rehydrate(pickle_key, device_id, device_data) {\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, addHeapObject(pickle_key), device_id.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n* A device represents a E2EE capable client of an user.\n*/\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n    * Request an interactive verification with this device.\n    *\n    * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n    * @param {any[] | undefined} [methods]\n    * @returns {Array<any>}\n    */\n    requestVerification(methods) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.device_requestVerification(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt a to-device message to be sent to this device, using Olm\n    * encryption.\n    *\n    * Prior to calling this method you must ensure that an Olm session is\n    * available for the target device. This can be done by calling\n    * {@link OlmMachine.getMissingSessions}.\n    *\n    * The caller is responsible for sending the encrypted\n    * event to the target device. If multiple messages are\n    * encrypted for the same device using this method they should be sent in\n    * the same order as they are encrypted.\n    *\n    * # Returns\n    *\n    * Returns a promise for a JSON string containing the `content` of an\n    * encrypted event, which be used to create the payload for a\n    * `/sendToDevice` API.\n    * @param {string} event_type\n    * @param {any} content\n    * @returns {Promise<string>}\n    */\n    encryptToDeviceEvent(event_type, content) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, addHeapObject(content));\n        return takeObject(ret);\n    }\n    /**\n    * Is this device considered to be verified.\n    *\n    * This method returns true if either the `is_locally_trusted`\n    * method returns `true` or if the `is_cross_signing_trusted`\n    * method returns `true`.\n    * @returns {boolean}\n    */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is this device considered to be verified using cross signing.\n    * @returns {boolean}\n    */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is this device cross-signed by its owner?\n    * @returns {boolean}\n    */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Set the local trust state of the device to the given state.\n    *\n    * This won’t affect any cross signing trust state, this only\n    * sets a flag marking to have the given trust state.\n    *\n    * `trust_state` represents the new trust state that should be\n    * set for the device.\n    * @param {LocalTrust} local_state\n    * @returns {Promise<any>}\n    */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return takeObject(ret);\n    }\n    /**\n    * The user ID of the device owner.\n    * @returns {UserId}\n    */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The unique ID of the device.\n    * @returns {DeviceId}\n    */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * Get the human readable name of the device.\n    * @returns {string | undefined}\n    */\n    get displayName() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.device_displayName(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the key of the given key algorithm belonging to this device.\n    * @param {DeviceKeyAlgorithmName} algorithm\n    * @returns {DeviceKey | undefined}\n    */\n    getKey(algorithm) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.device_getKey(retptr, this.__wbg_ptr, algorithm);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : DeviceKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the Curve25519 key of the given device.\n    * @returns {Curve25519PublicKey | undefined}\n    */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Get the Ed25519 key of the given device.\n    * @returns {Ed25519PublicKey | undefined}\n    */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Get a map containing all the device keys.\n    * @returns {Map<any, any>}\n    */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the list of algorithms this device supports.\n    *\n    * Returns `Array<EncryptionAlgorithm>`.\n    * @returns {Array<any>}\n    */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a map containing all the device signatures.\n    * @returns {Signatures}\n    */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n    * Get the trust state of the device.\n    * @returns {LocalTrust}\n    */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Is the device locally marked as trusted?\n    * @returns {boolean}\n    */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is the device locally marked as blacklisted?\n    *\n    * Blacklisted devices won’t receive any group sessions.\n    * @returns {boolean}\n    */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is the device deleted?\n    * @returns {boolean}\n    */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Timestamp representing the first time this device has been seen (in\n    * milliseconds).\n    * @returns {bigint}\n    */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Mark this device as verified.\n    * Works only if the device is owned by the current user.\n    *\n    * Returns a signature upload request that needs to be sent out.\n    * @returns {Promise<any>}\n    */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Whether or not the device is a dehydrated device.\n    * @returns {boolean}\n    */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n* A Matrix key ID.\n*\n* Device identifiers in Matrix are completely opaque character\n* sequences. This type is provided simply for its semantic value.\n*/\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n    * Create a new `DeviceId`.\n    * @param {string} id\n    */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Return the device ID as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.deviceid_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n* An enum over the different key types a device can have.\n*\n* Currently devices have a curve25519 and ed25519 keypair. The keys\n* transport format is a base64 encoded string, any unknown key type\n* will be left as such a string.\n*/\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n    * Get the name of the device key.\n    * @returns {DeviceKeyName}\n    */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Get the value associated to the `Curve25519` device key name.\n    * @returns {Curve25519PublicKey | undefined}\n    */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Get the value associated to the `Ed25519` device key name.\n    * @returns {Ed25519PublicKey | undefined}\n    */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Get the value associated to the `Unknown` device key name.\n    * @returns {string | undefined}\n    */\n    get unknown() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicekey_unknown(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Convert the `DeviceKey` into a base64 encoded string.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicekey_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n* The basic key algorithms in the specification.\n*/\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n    * Read the device key algorithm's name. If the name is\n    * `Unknown`, one may be interested by the `to_string` method to\n    * read the original name.\n    * @returns {DeviceKeyAlgorithmName}\n    */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Return the device key algorithm as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicekeyalgorithm_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n* A Matrix device key ID.\n*\n* A key algorithm and a device ID, combined with a ‘:’.\n*/\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n    * Parse/validate and create a new `DeviceKeyId`.\n    * @param {string} id\n    */\n    constructor(id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.devicekeyid_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns key algorithm of the device key ID.\n    * @returns {DeviceKeyAlgorithm}\n    */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n    * Returns device ID of the device key ID.\n    * @returns {DeviceId}\n    */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * Return the device key ID as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicekeyid_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n* Information on E2E device updates.\n*/\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n    * Create an empty `DeviceLists`.\n    *\n    * `changed` and `left` must be an array of `UserId`.\n    *\n    * Items inside `changed` and `left` will be invalidated by this method. Be\n    * careful not to use the `UserId`s after this method has been called.\n    * @param {(UserId)[] | undefined} [changed]\n    * @param {(UserId)[] | undefined} [left]\n    */\n    constructor(changed, left) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.devicelists_new(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns true if there are no device list updates.\n    * @returns {boolean}\n    */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * List of users who have updated their device identity keys or\n    * who now share an encrypted room with the client since the\n    * previous sync\n    * @returns {(UserId)[]}\n    */\n    get changed() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicelists_changed(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * List of users who no longer share encrypted rooms since the\n    * previous sync response.\n    * @returns {(UserId)[]}\n    */\n    get left() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicelists_left(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n* An unestablished ECIES session.\n*/\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n    * Create a new, random, unestablished ECIES session.\n    *\n    * This method will use the\n    * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n    * info for domain separation when creating the session.\n    */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get our [`Curve25519PublicKey`].\n    *\n    * This public key needs to be sent to the other side to be able to\n    * establish an ECIES channel.\n    * @returns {Curve25519PublicKey}\n    */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Create a [`EstablishedEcies`] from an initial message encrypted by the\n    * other side.\n    * @param {string} initial_message\n    * @returns {InboundCreationResult}\n    */\n    establish_inbound_channel(initial_message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ecies_establish_inbound_channel(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return InboundCreationResult.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create an [`EstablishedEcies`] session using the other side's Curve25519\n    * public key and an initial plaintext.\n    *\n    * After the channel has been established, we can encrypt messages to send\n    * to the other side. The other side uses the initial message to\n    * establishes the same channel on its side.\n    * @param {Curve25519PublicKey} public_key\n    * @param {string} initial_message\n    * @returns {OutboundCreationResult}\n    */\n    establish_outbound_channel(public_key, initial_message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(public_key, Curve25519PublicKey);\n            const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ecies_establish_outbound_channel(retptr, this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OutboundCreationResult.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n* An Ed25519 public key, used to verify digital signatures.\n*/\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n    * The number of bytes an Ed25519 public key has.\n    * @returns {number}\n    */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Serialize an Ed25519 public key to an unpadded base64\n    * representation.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519publickey_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n* An Ed25519 digital signature, can be used to verify the\n* authenticity of a message.\n*/\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n    * Try to create an Ed25519 signature from an unpadded base64\n    * representation.\n    * @param {string} signature\n    */\n    constructor(signature) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519signature_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serialize a Ed25519 signature to an unpadded base64\n    * representation.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n* An emoji that is used for interactive verification using a short\n* auth string.\n*\n* This will contain a single emoji and description from the list of\n* emojis from [the specification].\n*\n* [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n*/\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n    * The emoji symbol that represents a part of the short auth\n    * string, for example: 🐶\n    * @returns {string}\n    */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The description of the emoji, for example ‘Dog’.\n    * @returns {string}\n    */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n* An encrypted attachment, usually created from `Attachment.encrypt`.\n*/\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n    * Create a new encrypted attachment manually.\n    *\n    * It needs encrypted data, stored in an `Uint8Array`, and a\n    * [media encryption\n    * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n    * as a JSON-encoded string.\n    *\n    * The media encryption information aren't stored as a string:\n    * they are parsed, validated and fully deserialized.\n    *\n    * See [the specification to learn\n    * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n    * @param {Uint8Array} encrypted_data\n    * @param {string} media_encryption_info\n    */\n    constructor(encrypted_data, media_encryption_info) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.encryptedattachment_new(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The actual encrypted data.\n    *\n    * **Warning**: It returns a **copy** of the entire encrypted\n    * data; be nice with your memory.\n    * @returns {Uint8Array}\n    */\n    get encryptedData() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encryptedattachment_encryptedData(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the media encryption info as a JSON-encoded string. The\n    * structure is fully valid.\n    *\n    * If the media encryption info have been consumed already, it\n    * will return `null`.\n    * @returns {string | undefined}\n    */\n    get mediaEncryptionInfo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encryptedattachment_mediaEncryptionInfo(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Check whether the media encryption info has been consumed by\n    * `Attachment.decrypt` already.\n    * @returns {boolean}\n    */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n* Struct containing information on how an event was decrypted.\n*/\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n    * The user ID of the event sender. Note this is untrusted data\n    * unless `verification_state` is also trusted.\n    * @returns {UserId}\n    */\n    get sender() {\n        const ret = wasm.encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The device ID of the device that sent us the event. Note this\n    * is untrusted data unless `verification_state` is also\n    * trusted.\n    * @returns {DeviceId | undefined}\n    */\n    get senderDevice() {\n        const ret = wasm.encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n    * The Curve25519 key of the device that created the megolm\n    * decryption key originally.\n    * @returns {string | undefined}\n    */\n    get senderCurve25519Key() {\n        const ret = wasm.encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The signing Ed25519 key that created the megolm key that\n    * was used to decrypt this session.\n    * @returns {string | undefined}\n    */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The verification state of the device that sent us the event.\n    * Note this is the state of the device at the time of\n    * decryption. It may change in the future if a device gets\n    * verified or deleted.\n    *\n    * # Arguments\n    *\n    * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n    *   mode, unverified users are given no shield, and keys that have been\n    *   forwarded or restored from an insecure backup are given a grey shield\n    *   (both get a red shield in strict mode).\n    * @param {boolean} strict\n    * @returns {ShieldState}\n    */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n* Settings for an encrypted room.\n*\n* This determines the algorithm and rotation periods of a group\n* session.\n*/\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n    * The encryption algorithm that should be used in the room.\n    * @returns {EncryptionAlgorithm}\n    */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The encryption algorithm that should be used in the room.\n    * @param {EncryptionAlgorithm} arg0\n    */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n    * How long the session should be used before changing it,\n    * expressed in microseconds.\n    * @returns {bigint}\n    */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * How long the session should be used before changing it,\n    * expressed in microseconds.\n    * @param {bigint} arg0\n    */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n    * How many messages should be sent before changing the session.\n    * @returns {bigint}\n    */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * How many messages should be sent before changing the session.\n    * @param {bigint} arg0\n    */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n    * The history visibility of the room when the session was\n    * created.\n    * @returns {HistoryVisibility}\n    */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The history visibility of the room when the session was\n    * created.\n    * @param {HistoryVisibility} arg0\n    */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Should untrusted devices receive the room key, or should they be\n    * excluded from the conversation.\n    * @returns {CollectStrategy}\n    */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n    * Should untrusted devices receive the room key, or should they be\n    * excluded from the conversation.\n    * @param {CollectStrategy} arg0\n    */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * Create a new `EncryptionSettings` with default values.\n    */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n* An established ECIES session.\n*\n* This session can be used to encrypt and decrypt messages between the two\n* sides of the channel.\n*/\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n    * Get our [`Curve25519PublicKey`].\n    *\n    * This public key needs to be sent to the other side so that it can\n    * complete the ECIES channel establishment.\n    * @returns {Curve25519PublicKey}\n    */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n    * @param {string} message\n    * @returns {string}\n    */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.establishedecies_encrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred2_0 = r0;\n            deferred2_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * Decrypt the given message using this [`EstablishedEcies`] session.\n    * @param {string} message\n    * @returns {string}\n    */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.establishedecies_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n    * Get the [`CheckCode`] which uniquely identifies this\n    * [`EstablishedEcies`] session.\n    *\n    * This check code can be used to verify and confirm that both sides of the\n    * session are indeed using the same shared secret.\n    * @returns {CheckCode}\n    */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n* A Matrix [event ID].\n*\n* An `EventId` is generated randomly or converted from a string\n* slice, and can be converted back into a string as needed.\n*\n* [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n*/\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n    * Parse/validate and create a new `EventId`.\n    * @param {string} id\n    */\n    constructor(id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.eventid_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            EventIdFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the event's localpart.\n    * @returns {string}\n    */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.eventid_localpart(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the server name of the event ID.\n    * @returns {ServerName | undefined}\n    */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n    * Return the event ID as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.eventid_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n* Struct holding the two public identity keys of an account.\n*/\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n    * The Ed25519 public key, used for signing.\n    * @returns {Ed25519PublicKey}\n    */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n    * The Ed25519 public key, used for signing.\n    * @param {Ed25519PublicKey} arg0\n    */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The Curve25519 public key, used for establish shared secrets.\n    * @returns {Curve25519PublicKey}\n    */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * The Curve25519 public key, used for establish shared secrets.\n    * @param {Curve25519PublicKey} arg0\n    */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n* The result of an inbound ECIES channel establishment.\n*/\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n    * The established ECIES channel.\n    * @returns {EstablishedEcies}\n    */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n    * The established ECIES channel.\n    * @param {EstablishedEcies} arg0\n    */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The plaintext of the initial message.\n    * @returns {string}\n    */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The plaintext of the initial message.\n    * @param {string} arg0\n    */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n* Inbound group session.\n*\n* Inbound group sessions are used to exchange room messages between a group of\n* participants. Inbound group sessions are used to decrypt the room messages.\n*/\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n    * The room where this session is used in.\n    * @returns {RoomId}\n    */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n    * The Curve25519 key of the sender of this session, as a\n    * [Curve25519PublicKey].\n    * @returns {Curve25519PublicKey}\n    */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Returns the unique identifier for this session.\n    * @returns {string}\n    */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.inboundgroupsession_sessionId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Has the session been imported from a file or server-side backup? As\n    * opposed to being directly received as an `m.room_key` event.\n    * @returns {boolean}\n    */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n* A request that will back up a batch of room keys to the server\n* ([specification]).\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n*/\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `rooms`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The backup version that these room keys should be part of.\n    * @returns {string}\n    */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `KeysBackupRequest`.\n    * @param {string} id\n    * @param {string} body\n    * @param {string} version\n    */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(addHeapObject(id), addHeapObject(body), addHeapObject(version));\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n* Data for a request to the `/keys/claim` API endpoint\n* ([specification]).\n*\n* Claims one-time keys that can be used to establish 1-to-1 E2EE\n* sessions.\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n*/\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `timeout`,\n    * `one_time_keys`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `KeysClaimRequest`.\n    * @param {string} id\n    * @param {string} body\n    */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(addHeapObject(id), addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n* Data for a request to the `/keys/query` API endpoint\n* ([specification]).\n*\n* Returns the current devices and identity keys for the given users.\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n*/\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `timeout`,\n    * `device_keys`, `token`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `KeysQueryRequest`.\n    * @param {string} id\n    * @param {string} body\n    */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(addHeapObject(id), addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n* Outgoing Requests *\n* Data for a request to the `/keys/upload` API endpoint\n* ([specification]).\n*\n* Publishes end-to-end encryption keys for the device.\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n*/\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `device_keys`,\n    * `one_time_keys`, `fallback_keys`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `KeysUploadRequest`.\n    * @param {string} id\n    * @param {string} body\n    */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(addHeapObject(id), addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n* Represents a signature that is either valid _or_ that could not be\n* decoded.\n*/\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n    * Check whether the signature has been successfully decoded.\n    * @returns {boolean}\n    */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Check whether the signature could not be successfully decoded.\n    * @returns {boolean}\n    */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * The signature, if successfully decoded.\n    * @returns {Signature | undefined}\n    */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n    * The base64 encoded string that is claimed to contain a\n    * signature but could not be decoded, if any.\n    * @returns {string | undefined}\n    */\n    get invalidSignatureSource() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.maybesignature_invalidSignatureSource(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n* Js Decryption error with code.\n*/\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n    * Description code for the error. See `DecryptionErrorCode`\n    * @returns {DecryptionErrorCode}\n    */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * detailed description\n    * @returns {string}\n    */\n    get description() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Withheld code if any. Only for `UnknownMessageIndex` error code\n    * @returns {string | undefined}\n    */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n* The public part of the backup key.\n*/\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n    * The actual base64 encoded public key.\n    * @returns {string}\n    */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the full name of the backup algorithm this backup key supports.\n    * @returns {string}\n    */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n* Migration routines\n*\n* The public methods are exposed as static methods on this class, for\n* namespacing and to enable easier mocking in unit tests.\n*/\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n    * Import the base dataset from a libolm-based setup to a vodozemac-based\n    * setup stored in IndexedDB.\n    *\n    * Populates the user credentials, Olm account, backup data, etc. This is\n    * the first step in the migration process. Once this base data is\n    * imported, further data can be imported with {@link\n    * #migrateOlmSessions}, {@link #migrateMegolmSessions}, and TODO room settings.\n    *\n    * # Arguments\n    *\n    * * `data` - The data to be migrated\n    * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n    *   account objects.\n    * * `store_handle` - A connection to the CryptoStore which will be used to\n    *   store the vodozemac data.\n    * @param {BaseMigrationData} data\n    * @param {Uint8Array} pickle_key\n    * @param {StoreHandle} store_handle\n    * @returns {Promise<any>}\n    */\n    static migrateBaseData(data, pickle_key, store_handle) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, addHeapObject(pickle_key), store_handle.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n    * stored in an indexedDB crypto store.\n    *\n    * Before this method can be used, {@link #migrateBaseData} must be used to\n    * import the base data into the crypto store.\n    *\n    * This method should be called a number of times, with separate batches of\n    * `sessions`. If a progress display is given, it can be updated after\n    * each batch is successfully imported.\n    *\n    * # Arguments\n    *\n    * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n    *   inside `sessions` will be invalidated by this method.\n    * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n    *   session objects.\n    * * `store_handle` - A connection to the CryptoStore which will be used to\n    *   store the vodozemac data.\n    * @param {(PickledSession)[]} sessions\n    * @param {Uint8Array} pickle_key\n    * @param {StoreHandle} store_handle\n    * @returns {Promise<any>}\n    */\n    static migrateOlmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, addHeapObject(pickle_key), store_handle.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n    * setup stored in an indexedDB crypto store.\n    *\n    * Before this method can be used, {@link #migrateBaseData} must be used to\n    * import the base data into the crypto store.\n    *\n    * This method should be called a number of times, with separate batches of\n    * `sessions`. If a progress display is given, it can be updated after\n    * each batch is successfully imported.\n    *\n    * # Arguments\n    *\n    * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n    *   import. Items inside `sessions` will be invalidated by this method.\n    * * `pickle_key` - The libolm pickle key that was used to pickle the\n    *   megolm session objects.\n    * * `store_handle` - A connection to the CryptoStore which will be used to\n    *   store the vodozemac data.\n    * @param {(PickledInboundGroupSession)[]} sessions\n    * @param {Uint8Array} pickle_key\n    * @param {StoreHandle} store_handle\n    * @returns {Promise<any>}\n    */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, addHeapObject(pickle_key), store_handle.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n* State machine implementation of the Olm/Megolm encryption protocol\n* used for Matrix end to end encryption.\n*/\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n    * Constructor will always fail. To create a new `OlmMachine`, please use\n    * the `initialize` method.\n    *\n    * Why this pattern? `initialize` returns a `Promise`. Returning a\n    */\n    constructor() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.olmmachine_new(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a new `OlmMachine`.\n    *\n    * The created machine will keep the encryption keys either in a IndexedDB\n    * based store, or in a memory store and once the objects is dropped,\n    * the keys will be lost.\n    *\n    * # Arguments\n    *\n    * * `user_id` - represents the unique ID of the user that owns this\n    * machine.\n    *\n    * * `device_id` - represents the unique ID of the device\n    * that owns this machine.\n    *\n    * * `store_name` - The name that should be used to open the IndexedDB\n    *   based database. If this isn't provided, a memory-only store will be\n    *   used. *Note* the memory-only store will lose your E2EE keys when the\n    *   `OlmMachine` gets dropped.\n    *\n    * * `store_passphrase` - The passphrase that should be used to encrypt the\n    *   IndexedDB-based store.\n    * @param {UserId} user_id\n    * @param {DeviceId} device_id\n    * @param {string | undefined} [store_name]\n    * @param {string | undefined} [store_passphrase]\n    * @returns {Promise<any>}\n    */\n    static initialize(user_id, device_id, store_name, store_passphrase) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `OlmMachine` backed by an existing store.\n    *\n    * # Arguments\n    *\n    * * `user_id` - represents the unique ID of the user that owns this\n    * machine.\n    *\n    * * `device_id` - represents the unique ID of the device\n    * that owns this machine.\n    *\n    * * `store_handle` - the connection to the crypto store to be used for\n    *   this machine.\n    * @param {UserId} user_id\n    * @param {DeviceId} device_id\n    * @param {StoreHandle} store_handle\n    * @returns {Promise<any>}\n    */\n    static initFromStore(user_id, device_id, store_handle) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The unique user ID that owns this `OlmMachine` instance.\n    * @returns {UserId}\n    */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The unique device ID that identifies this `OlmMachine`.\n    * @returns {DeviceId}\n    */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * The time, in milliseconds since the unix epoch, at which the `Account`\n    * backing this `OlmMachine` was created.\n    *\n    * An `Account` is created when an `OlmMachine` is first instantiated\n    * against a given `Store`, at which point it creates identity keys etc.\n    * This method returns the timestamp, according to the local clock, at\n    * which that happened.\n    * @returns {number}\n    */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Get the public parts of our Olm identity keys.\n    * @returns {IdentityKeys}\n    */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n    * Get the display name of our own device.\n    * @returns {Promise<any>}\n    */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Whether automatic transmission of room key requests is enabled.\n    *\n    * Room key requests allow the device to request room keys that it might\n    * have missed in the original share using `m.room_key_request`\n    * events.\n    * @returns {boolean}\n    */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Enable or disable automatic transmission of room key requests.\n    * @param {boolean} enabled\n    */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n    * Whether room key forwarding is enabled.\n    *\n    * If room key forwarding is enabled, we will automatically reply to\n    * incoming `m.room_key_request` messages from verified devices by\n    * forwarding the requested key (if we have it).\n    * @returns {boolean}\n    */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Enable or disable room key forwarding.\n    * @param {boolean} enabled\n    */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n    * Get the list of users whose devices we are currently tracking.\n    *\n    * A user can be marked for tracking using the\n    * [`update_tracked_users`](#method.update_tracked_users) method.\n    *\n    * Returns a `Set<UserId>`.\n    * @returns {Promise<any>}\n    */\n    trackedUsers() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.olmmachine_trackedUsers(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Update the list of tracked users.\n    *\n    * The OlmMachine maintains a list of users whose devices we are keeping\n    * track of: these are known as \"tracked users\". These must be users\n    * that we share a room with, so that the server sends us updates for\n    * their device lists.\n    *\n    * # Arguments\n    *\n    * * `users` - An array of user ids that should be added to the list of\n    *   tracked users\n    *\n    * Any users that hadn't been seen before will be flagged for a key query\n    * immediately, and whenever `receive_sync_changes` receives a\n    * \"changed\" notification for that user in the future.\n    *\n    * Users that were already in the list are unaffected.\n    *\n    * Items inside `users` will be invalidated by this method. Be careful not\n    * to use the `UserId`s after this method has been called.\n    * @param {(UserId)[]} users\n    * @returns {Promise<any>}\n    */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Mark all tracked users as dirty.\n    *\n    * All users *whose device lists we are tracking* are flagged as needing a\n    * key query. Users whose devices we are not tracking are ignored.\n    * @returns {Promise<void>}\n    */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Handle to-device events and one-time key counts from a sync\n    * response.\n    *\n    * This will decrypt and handle to-device events returning the\n    * decrypted versions of them.\n    *\n    * To decrypt an event from the room timeline call\n    * `decrypt_room_event`.\n    *\n    * # Arguments\n    *\n    * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n    *   response\n    * * `changed_devices`: the mapping of changed and left devices, from the\n    *   `/sync` response\n    * * `one_time_keys_counts`: The number of one-time keys on the server,\n    *   from the `/sync` response. A `Map` from string (encryption algorithm)\n    *   to number (number of keys).\n    * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n    *   the server, from the `/sync` response. If this is set, it is used to\n    *   determine if new fallback keys should be uploaded.\n    *\n    * # Returns\n    *\n    * A list of JSON strings, containing the decrypted to-device events.\n    * @param {string} to_device_events\n    * @param {DeviceLists} changed_devices\n    * @param {Map<any, any>} one_time_keys_counts\n    * @param {Set<any> | undefined} [unused_fallback_keys]\n    * @returns {Promise<any>}\n    */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(changed_devices, DeviceLists);\n            wasm.olmmachine_receiveSyncChanges(retptr, this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, addBorrowedObject(one_time_keys_counts), isLikeNone(unused_fallback_keys) ? 0 : addHeapObject(unused_fallback_keys));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Get the outgoing requests that need to be sent out.\n    *\n    * This returns a list of values, each of which can be any of:\n    *   * {@link KeysUploadRequest},\n    *   * {@link KeysQueryRequest},\n    *   * {@link KeysClaimRequest},\n    *   * {@link ToDeviceRequest},\n    *   * {@link SignatureUploadRequest},\n    *   * {@link RoomMessageRequest}, or\n    *   * {@link KeysBackupRequest}.\n    *\n    * Those requests need to be sent out to the server and the\n    * responses need to be passed back to the state machine\n    * using {@link OlmMachine.markRequestAsSent}.\n    * @returns {Promise<any>}\n    */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Mark the request with the given request ID as sent (see\n    * `outgoing_requests`).\n    *\n    * Arguments are:\n    *\n    * * `request_id` represents the unique ID of the request that was sent\n    *   out. This is needed to couple the response with the now sent out\n    *   request.\n    * * `response_type` represents the type of the request that was sent out.\n    * * `response` represents the response that was received from the server\n    *   after the outgoing request was sent out.\n    * @param {string} request_id\n    * @param {RequestType} request_type\n    * @param {string} response\n    * @returns {Promise<any>}\n    */\n    markRequestAsSent(request_id, request_type, response) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.olmmachine_markRequestAsSent(retptr, this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt a room message for the given room.\n    *\n    * **Note**: A room key needs to be shared with the group of users that are\n    * members in the given room. If this is not done this method will panic.\n    *\n    * The usual flow to encrypt an event using this state machine is as\n    * follows:\n    *\n    * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n    *    the room members of the room we wish to participate in. This is done\n    *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n    *    method. This method call should be locked per call.\n    *\n    * 2. Share a room key with all the room members using the\n    *    [`share_room_key()`](Self::share_room_key). This method call should\n    *    be locked per room.\n    *\n    * 3. Encrypt the event using this method.\n    *\n    * 4. Send the encrypted event to the server.\n    *\n    * After the room key is shared steps 1 and 2 will become noops, unless\n    * there's some changes in the room membership or in the list of devices a\n    * member has.\n    *\n    *\n    * `room_id` is the ID of the room for which the message should\n    * be encrypted. `event_type` is the type of the event. `content`\n    * is the plaintext content of the message that should be\n    * encrypted.\n    *\n    * # Panics\n    *\n    * Panics if a group session for the given room wasn't shared\n    * beforehand.\n    * @param {RoomId} room_id\n    * @param {string} event_type\n    * @param {string} content\n    * @returns {Promise<any>}\n    */\n    encryptRoomEvent(room_id, event_type, content) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(room_id, RoomId);\n            const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.olmmachine_encryptRoomEvent(retptr, this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypt an event from a room timeline.\n    *\n    * # Arguments\n    *\n    * * `event`, the event that should be decrypted.\n    * * `room_id`, the ID of the room where the event was sent to.\n    *\n    * # Returns\n    *\n    * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n    * rejects with a {@link MegolmDecryptionError} instance.\n    * @param {string} event\n    * @param {RoomId} room_id\n    * @param {DecryptionSettings} decryption_settings\n    * @returns {Promise<any>}\n    */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(room_id, RoomId);\n            _assertClass(decryption_settings, DecryptionSettings);\n            wasm.olmmachine_decryptRoomEvent(retptr, this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get encryption info for a decrypted timeline event.\n    *\n    * This recalculates the `EncryptionInfo` data that is returned by\n    * `decryptRoomEvent`, based on the current\n    * verification status of the sender, etc.\n    *\n    * Returns an error for an unencrypted event.\n    *\n    * # Arguments\n    *\n    * * `event` - The event to get information for.\n    * * `room_id` - The ID of the room where the event was sent to.\n    *\n    * # Returns\n    *\n    * {@link EncryptionInfo}\n    * @param {string} event\n    * @param {RoomId} room_id\n    * @returns {Promise<any>}\n    */\n    getRoomEventEncryptionInfo(event, room_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(room_id, RoomId);\n            wasm.olmmachine_getRoomEventEncryptionInfo(retptr, this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the status of the private cross signing keys.\n    *\n    * This can be used to check which private cross signing keys we\n    * have stored locally.\n    * @returns {Promise<any>}\n    */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Export all the secrets we have in the store into a {@link\n    * SecretsBundle}.\n    *\n    * This method will export all the private cross-signing keys and, if\n    * available, the private part of a backup key and its accompanying\n    * version.\n    *\n    * The method will fail if we don't have all three private cross-signing\n    * keys available.\n    *\n    * **Warning**: Only export this and share it with a trusted recipient,\n    * i.e. if an existing device is sharing this with a new device.\n    * @returns {Promise<SecretsBundle>}\n    */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Import and persists secrets from a {@link SecretsBundle}.\n    *\n    * This method will import all the private cross-signing keys and, if\n    * available, the private part of a backup key and its accompanying\n    * version into the store.\n    *\n    * **Warning**: Only import this from a trusted source, i.e. if an existing\n    * device is sharing this with a new device. The imported cross-signing\n    * keys will create a {@link OwnUserIdentity} and mark it as verified.\n    *\n    * The backup key will be persisted in the store and can be enabled using\n    * the {@link BackupMachine}.\n    *\n    * The provided `SecretsBundle` is freed by this method; be careful not to\n    * use it once this method has been called.\n    * @param {SecretsBundle} bundle\n    * @returns {Promise<void>}\n    */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return takeObject(ret);\n    }\n    /**\n    * Export all the private cross signing keys we have.\n    *\n    * The export will contain the seeds for the ed25519 keys as\n    * unpadded base64 encoded strings.\n    *\n    * Returns `null` if we don’t have any private cross signing keys;\n    * otherwise returns a `CrossSigningKeyExport`.\n    * @returns {Promise<any>}\n    */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Import our private cross signing keys.\n    *\n    * The keys should be provided as unpadded-base64-encoded strings.\n    *\n    * Returns a `CrossSigningStatus`.\n    * @param {string | undefined} [master_key]\n    * @param {string | undefined} [self_signing_key]\n    * @param {string | undefined} [user_signing_key]\n    * @returns {Promise<any>}\n    */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new cross signing identity and get the upload request\n    * to push the new public keys to the server.\n    *\n    * Warning: This will delete any existing cross signing keys that\n    * might exist on the server and thus will reset the trust\n    * between all the devices.\n    *\n    * Uploading these keys will require user interactive auth.\n    *\n    * # Arguments\n    *\n    * * `reset`, whether the method should create a new identity or use the\n    *   existing one during the request. If set to true, the request will\n    *   attempt to upload a new identity. If set to false, the request will\n    *   attempt to upload the existing identity. Since the uploading process\n    *   requires user interactive authentication, which involves sending out\n    *   the same request multiple times, setting this argument to false\n    *   enables you to reuse the same request.\n    *\n    * Returns a {@link CrossSigningBootstrapRequests}.\n    * @param {boolean} reset\n    * @returns {Promise<any>}\n    */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return takeObject(ret);\n    }\n    /**\n    * Get the cross signing user identity of a user.\n    *\n    * Returns a promise for an {@link identities.OwnUserIdentity}, a\n    * {@link identities.OtherUserIdentity}, or `undefined`.\n    * @param {UserId} user_id\n    * @returns {Promise<any>}\n    */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Sign the given message using our device key and if available\n    * cross-signing master key.\n    * @param {string} message\n    * @returns {Promise<any>}\n    */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Invalidate the currently active outbound group session for the\n    * given room.\n    *\n    * Returns true if a session was invalidated, false if there was\n    * no session to invalidate.\n    * @param {RoomId} room_id\n    * @returns {Promise<any>}\n    */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get to-device requests to share a room key with users in a room.\n    *\n    * `room_id` is the room ID. `users` is an array of `UserId`\n    * objects. `encryption_settings` are an `EncryptionSettings`\n    * object.\n    *\n    * Note: Care should be taken that only one such request at a\n    * time is in flight for the same room, e.g. using a lock.\n    *\n    * Returns an array of `ToDeviceRequest`s.\n    *\n    * Items inside `users` will be invalidated by this method. Be careful not\n    * to use the `UserId`s after this method has been called.\n    * @param {RoomId} room_id\n    * @param {(UserId)[]} users\n    * @param {EncryptionSettings} encryption_settings\n    * @returns {Promise<any>}\n    */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Generate an \"out-of-band\" key query request for the given set of users.\n    *\n    * This can be useful if we need the results from `getIdentity` or\n    * `getUserDevices` to be as up-to-date as possible.\n    *\n    * Returns a `KeysQueryRequest` object. The response of the request should\n    * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n    *\n    * Items inside `users` will be invalidated by this method. Be careful not\n    * to use the `UserId`s after this method has been called.\n    * @param {(UserId)[]} users\n    * @returns {KeysQueryRequest}\n    */\n    queryKeysForUsers(users) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.olmmachine_queryKeysForUsers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeysQueryRequest.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the a key claiming request for the user/device pairs that\n    * we are missing Olm sessions for.\n    *\n    * Returns `null` if no key claiming request needs to be sent\n    * out, otherwise it returns a `KeysClaimRequest` object.\n    *\n    * Sessions need to be established between devices so group\n    * sessions for a room can be shared with them.\n    *\n    * This should be called every time a group session needs to be\n    * shared as well as between sync calls. After a sync some\n    * devices may request room keys without us having a valid Olm\n    * session with them, making it impossible to server the room key\n    * request, thus it’s necessary to check for missing sessions\n    * between sync as well.\n    *\n    * Note: Care should be taken that only one such request at a\n    * time is in flight, e.g. using a lock.\n    *\n    * The response of a successful key claiming requests needs to be\n    * passed to the `OlmMachine` with the `mark_request_as_sent`.\n    *\n    * `users` represents the list of users that we should check if\n    * we lack a session with one of their devices. This can be an\n    * empty iterator when calling this method between sync requests.\n    *\n    * Items inside `users` will be invalidated by this method. Be careful not\n    * to use the `UserId`s after this method has been called.\n    * @param {(UserId)[]} users\n    * @returns {Promise<any>}\n    */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Get a map holding all the devices of a user.\n    *\n    * ### Parameters\n    *\n    * * `user_id` - The unique ID of the user that the device belongs to.\n    *\n    * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n    *   response before returning if the user's device list has been marked as\n    *   stale. **Note**, this assumes that the requests from {@link\n    *   OlmMachine.outgoingRequests} are being processed and sent out.\n    *\n    *   If unset, we will return immediately even if the device list is stale.\n    *\n    * ### Returns\n    *\n    * A {@link UserDevices} object.\n    * @param {UserId} user_id\n    * @param {number | undefined} [timeout_secs]\n    * @returns {Promise<any>}\n    */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return takeObject(ret);\n    }\n    /**\n    * Get a specific device of a user.\n    *\n    * ### Parameters\n    *\n    * * `user_id` - The unique ID of the user that the device belongs to.\n    *\n    * * `device_id` - The unique ID of the device.\n    *\n    * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n    *   response before returning if the user's device list has been marked as\n    *   stale. **Note**, this assumes that the requests from {@link\n    *   OlmMachine.outgoingRequests} are being processed and sent out.\n    *\n    *   If unset, we will return immediately even if the device list is stale.\n    *\n    * ### Returns\n    *\n    * If the device is known, a {@link Device}. Otherwise, `undefined`.\n    * @param {UserId} user_id\n    * @param {DeviceId} device_id\n    * @param {number | undefined} [timeout_secs]\n    * @returns {Promise<any>}\n    */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return takeObject(ret);\n    }\n    /**\n    * Get a verification object for the given user ID with the given\n    * flow ID (a to-device request ID if the verification has been\n    * requested by a to-device request, or a room event ID if the\n    * verification has been requested by a room event).\n    *\n    * It returns a “`Verification` object”, which is either a `Sas`\n    * or `Qr` object.\n    * @param {UserId} user_id\n    * @param {string} flow_id\n    * @returns {any}\n    */\n    getVerification(user_id, flow_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(user_id, UserId);\n            const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.olmmachine_getVerification(retptr, this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a verification request object with the given flow ID.\n    * @param {UserId} user_id\n    * @param {string} flow_id\n    * @returns {VerificationRequest | undefined}\n    */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n    * Get all the verification requests of a given user.\n    * @param {UserId} user_id\n    * @returns {Array<any>}\n    */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Receive a verification event.\n    *\n    * This method can be used to pass verification events that are happening\n    * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n    * @param {string} event\n    * @param {RoomId} room_id\n    * @returns {Promise<any>}\n    */\n    receiveVerificationEvent(event, room_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(room_id, RoomId);\n            wasm.olmmachine_receiveVerificationEvent(retptr, this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Export the keys that match the given predicate.\n    *\n    * `predicate` is a closure that will be called for every known\n    * `InboundGroupSession`, which represents a room key. If the closure\n    * returns `true`, the `InboundGroupSession` will be included in the\n    * export; otherwise it won't.\n    *\n    * Returns a Promise containing a Result containing a String which is a\n    * JSON-encoded array of ExportedRoomKey objects.\n    * @param {Function} predicate\n    * @returns {Promise<any>}\n    */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, addHeapObject(predicate));\n        return takeObject(ret);\n    }\n    /**\n    * Import the given room keys into our store.\n    *\n    * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n    * return type is different.\n    *\n    * Returns a String containing a JSON-encoded object, holding three\n    * properties:\n    *  * `total_count` (the total number of keys found in the export data).\n    *  * `imported_count` (the number of keys that were imported).\n    *  * `keys` (the keys that were imported; a map from room id to a map of\n    *    the sender key to a list of session ids).\n    *\n    * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n    * @param {string} exported_room_keys\n    * @param {Function} progress_listener\n    * @returns {Promise<any>}\n    */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.olmmachine_importRoomKeys(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(progress_listener));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Import the given room keys into our store.\n    *\n    * `exported_keys` is a JSON-encoded list of previously exported keys that\n    * should be imported into our store. If we already have a better\n    * version of a key, the key will _not_ be imported.\n    *\n    * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n    * `progress` and `total`, and returns nothing.\n    *\n    * Returns a {@link RoomKeyImportResult}.\n    * @param {string} exported_room_keys\n    * @param {Function} progress_listener\n    * @returns {Promise<any>}\n    */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.olmmachine_importExportedRoomKeys(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(progress_listener));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Import the given room keys into our store.\n    *\n    * # Arguments\n    *\n    * * `backed_up_room_keys`: keys that were retrieved from backup and that\n    *   should be added to our store (provided they are better than our\n    *   current versions of those keys). Specifically, it should be a Map from\n    *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n    *   structure.\n    *\n    * * `progress_listener`: an optional callback that takes 3 arguments:\n    *   `progress` (the number of keys that have successfully been imported),\n    *   `total` (the total number of keys), and `failures` (the number of keys\n    *   that failed to import), and returns nothing.\n    *\n    * # Returns\n    *\n    * A {@link RoomKeyImportResult}.\n    * @param {Map<any, any>} backed_up_room_keys\n    * @param {Function | undefined} progress_listener\n    * @param {string} backup_version\n    * @returns {Promise<any>}\n    */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.olmmachine_importBackedUpRoomKeys(retptr, this.__wbg_ptr, addBorrowedObject(backed_up_room_keys), isLikeNone(progress_listener) ? 0 : addHeapObject(progress_listener), ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Store the backup decryption key in the crypto store.\n    *\n    * This is useful if the client wants to support gossiping of the backup\n    * key.\n    *\n    * Returns `Promise<void>`.\n    * @param {BackupDecryptionKey} decryption_key\n    * @param {string} version\n    * @returns {Promise<any>}\n    */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Get the backup keys we have saved in our store.\n    * Returns a `Promise` for {@link BackupKeys}.\n    * @returns {Promise<any>}\n    */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Check if the given backup has been verified by us or by another of our\n    * devices that we trust.\n    *\n    * The `backup_info` should be a Javascript object with the following\n    * format:\n    *\n    * ```json\n    * {\n    *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n    *     \"auth_data\": {\n    *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n    *         \"signatures\": {}\n    *     }\n    * }\n    * ```\n    *\n    * Returns a {@link SignatureVerification} object.\n    * @param {any} backup_info\n    * @returns {Promise<any>}\n    */\n    verifyBackup(backup_info) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.olmmachine_verifyBackup(retptr, this.__wbg_ptr, addHeapObject(backup_info));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Activate the given backup key to be used with the given backup version.\n    *\n    * **Warning**: The caller needs to make sure that the given `BackupKey` is\n    * trusted, otherwise we might be encrypting room keys that a malicious\n    * party could decrypt.\n    *\n    * The {@link #verifyBackup} method can be used to do so.\n    *\n    * Returns `Promise<void>`.\n    * @param {string} public_key_base_64\n    * @param {string} version\n    * @returns {Promise<any>}\n    */\n    enableBackupV1(public_key_base_64, version) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.olmmachine_enableBackupV1(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Are we able to encrypt room keys.\n    *\n    * This returns true if we have an active `BackupKey` and backup version\n    * registered with the state machine.\n    *\n    * Returns `Promise<bool>`.\n    * @returns {Promise<any>}\n    */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Disable and reset our backup state.\n    *\n    * This will remove any pending backup request, remove the backup key and\n    * reset the backup state of each room key we have.\n    *\n    * Returns `Promise<void>`.\n    * @returns {Promise<any>}\n    */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Encrypt a batch of room keys and return a request that needs to be sent\n    * out to backup the room keys.\n    *\n    * Returns an optional {@link KeysBackupRequest}.\n    * @returns {Promise<any>}\n    */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the number of backed up room keys and the total number of room keys.\n    * Returns a {@link RoomKeyCounts}.\n    * @returns {Promise<any>}\n    */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Encrypt the list of exported room keys using the given passphrase.\n    *\n    * `exported_room_keys` is a list of sessions that should be encrypted\n    * (it's generally returned by `export_room_keys`). `passphrase` is the\n    * passphrase that will be used to encrypt the exported room keys. And\n    * `rounds` is the number of rounds that should be used for the key\n    * derivation when the passphrase gets turned into an AES key. More rounds\n    * are increasingly computationnally intensive and as such help against\n    * brute-force attacks. Should be at least `10_000`, while values in the\n    * `100_000` ranges should be preferred.\n    * @param {string} exported_room_keys\n    * @param {string} passphrase\n    * @param {number} rounds\n    * @returns {string}\n    */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.olmmachine_encryptExportedRoomKeys(retptr, ptr0, len0, ptr1, len1, rounds);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n    * Try to decrypt a reader into a list of exported room keys.\n    *\n    * `encrypted_exported_room_keys` is the result from\n    * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n    * used when calling `encrypt_exported_room_keys`.\n    * @param {string} encrypted_exported_room_keys\n    * @param {string} passphrase\n    * @returns {string}\n    */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.olmmachine_decryptExportedRoomKeys(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * a room key.\n    *\n    * `callback` should be a function that takes a single argument (an array\n    * of {@link RoomKeyInfo}) and returns a Promise.\n    * @param {Function} callback\n    * @returns {Promise<void>}\n    */\n    registerRoomKeyUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, addHeapObject(callback));\n        return takeObject(ret);\n    }\n    /**\n    * Register a callback which will be called whenever we receive a\n    * notification that some room keys have been withheld.\n    *\n    * `callback` should be a function that takes a single argument (an array\n    * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n    * @param {Function} callback\n    * @returns {Promise<void>}\n    */\n    registerRoomKeysWithheldCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, addHeapObject(callback));\n        return takeObject(ret);\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * a user identity.\n    *\n    * `callback` should be a function that takes a single argument (a {@link\n    * UserId}) and returns a Promise.\n    * @param {Function} callback\n    * @returns {Promise<void>}\n    */\n    registerUserIdentityUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, addHeapObject(callback));\n        return takeObject(ret);\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * a device.\n    *\n    * `callback` should be a function that takes a single argument (an array\n    * of user IDs as strings) and returns a Promise.\n    * @param {Function} callback\n    * @returns {Promise<void>}\n    */\n    registerDevicesUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, addHeapObject(callback));\n        return takeObject(ret);\n    }\n    /**\n    * Register a callback which will be called whenever a secret\n    * (`m.secret.send`) is received.\n    *\n    * The only secret this will currently broadcast is the\n    * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n    *\n    * To request a secret from other devices, a client sends an\n    * `m.secret.request` device event with `action` set to `request` and\n    * `name` set to the identifier of the secret. A device that wishes to\n    * share the secret will reply with an `m.secret.send` event, encrypted\n    * using olm.\n    *\n    * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n    * to_device message from a one of the user's own verified devices.\n    *\n    * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n    *\n    * `callback` should be a function that takes 2 arguments: the secret name\n    * (string) and value (string).\n    *\n    * **Note**: if the secret is valid and handled on the javascript side, the\n    * secret inbox should be cleared by calling\n    * `delete_secrets_from_inbox`.\n    * @param {Function} callback\n    * @returns {Promise<void>}\n    */\n    registerReceiveSecretCallback(callback) {\n        const ret = wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, addHeapObject(callback));\n        return takeObject(ret);\n    }\n    /**\n    * Get all the secrets with the given secret_name we have currently\n    * stored.\n    * The only secret this will currently return is the\n    * `m.megolm_backup.v1` secret.\n    *\n    * Usually you would just register a callback with\n    * [`register_receive_secret_callback`], but if the client is shut down\n    * before handling them, this method can be used to retrieve them.\n    * This method should therefore be called at client startup to retrieve any\n    * secrets received during the previous session.\n    *\n    * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n    * to_device message from one of the user's own verified devices.\n    *\n    * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n    * values.\n    *\n    * If the secret is valid and handled, the secret inbox should be cleared\n    * by calling `delete_secrets_from_inbox`.\n    * @param {string} secret_name\n    * @returns {Promise<Promise<any>>}\n    */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Delete all secrets with the given secret name from the inbox.\n    *\n    * Should be called after handling the secrets with\n    * `get_secrets_from_inbox`.\n    *\n    * # Arguments\n    *\n    * * `secret_name` - The name of the secret to delete.\n    * @param {string} secret_name\n    * @returns {Promise<Promise<any>>}\n    */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Request missing local secrets from our other trusted devices.\n    *\n    * \"Local secrets\" refers to secrets which can be shared between trusted\n    * devices, such as private cross-signing keys, and the megolm backup\n    * decryption key.\n    *\n    * This method will cause the sdk to generated outgoing secret requests\n    * (`m.secret.request`) to get the missing secrets. These requests will\n    * then be returned by a future call to {@link\n    * OlmMachine#outgoing_requests}.\n    *\n    * # Returns\n    *\n    * A `Promise` for a `bool` result, which will be true if  secrets were\n    * missing, and a request was generated.\n    * @returns {Promise<Promise<any>>}\n    */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the stored room settings, such as the encryption algorithm or\n    * whether to encrypt only for trusted devices.\n    *\n    * These settings can be modified via {@link #setRoomSettings}.\n    *\n    * # Returns\n    *\n    * `Promise<RoomSettings|undefined>`\n    * @param {RoomId} room_id\n    * @returns {Promise<any>}\n    */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Store encryption settings for the given room.\n    *\n    * This method checks if the new settings are \"safe\" -- ie, that they do\n    * not represent a downgrade in encryption security from any previous\n    * settings. Attempts to downgrade security will result in an error.\n    *\n    * If the settings are valid, they will be persisted to the crypto store.\n    * These settings are not used directly by this library, but the saved\n    * settings can be retrieved via {@link #getRoomSettings}.\n    * @param {RoomId} room_id\n    * @param {RoomSettings} room_settings\n    * @returns {Promise<void>}\n    */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Manage dehydrated devices\n    * @returns {DehydratedDevices}\n    */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n    * Shut down the `OlmMachine`.\n    *\n    * The `OlmMachine` cannot be used after this method has been called.\n    *\n    * All associated resources will be closed too, like IndexedDB\n    * connections.\n    */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n* Struct representing a cross signing identity of a user.\n*\n* This is the user identity of a user that isn't our own. Other users will\n* only contain a master key and a self signing key, meaning that only device\n* signatures can be checked with this identity.\n*\n* This struct wraps a read-only version of the struct and allows verifications\n* to be requested to verify our own device with the user identity.\n*/\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n    * Is this user identity verified?\n    * @returns {boolean}\n    */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Manually verify this user.\n    *\n    * This method will attempt to sign the user identity using our private\n    * cross signing key.\n    *\n    * This method fails if we don't have the private part of our user-signing\n    * key.\n    *\n    * Returns a request that needs to be sent out for the user to be marked as\n    * verified.\n    * @returns {Promise<any>}\n    */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a `VerificationRequest` object after the verification\n    * request content has been sent out.\n    * @param {RoomId} room_id\n    * @param {EventId} request_event_id\n    * @param {any[] | undefined} [methods]\n    * @returns {VerificationRequest}\n    */\n    requestVerification(room_id, request_event_id, methods) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(room_id, RoomId);\n            _assertClass(request_event_id, EventId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.otheruseridentity_requestVerification(retptr, this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerificationRequest.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Send a verification request to the given user.\n    *\n    * The returned content needs to be sent out into a DM room with the given\n    * user.\n    *\n    * After the content has been sent out a VerificationRequest can be started\n    * with the `request_verification` method.\n    * @param {any[] | undefined} [methods]\n    * @returns {string}\n    */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.otheruseridentity_verificationRequestContent(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n    * Get the master key of the identity.\n    * @returns {string}\n    */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.otheruseridentity_masterKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * Get the self-signing key of the identity.\n    * @returns {string}\n    */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.otheruseridentity_selfSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * Pin the current identity (public part of the master signing key).\n    * @returns {Promise<any>}\n    */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Has the identity changed in a way that requires approval from the user?\n    *\n    * A user identity needs approval if it changed after the crypto machine\n    * has already observed (\"pinned\") a different identity for that user,\n    * unless it is an explicitly verified identity (using for example\n    * interactive verification).\n    *\n    * This situation can be resolved by:\n    *\n    * - Verifying the new identity with {@link requestVerification}, or:\n    * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n    * @returns {boolean}\n    */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * True if we verified this identity (with any own identity, at any\n    * point).\n    *\n    * To set this latch back to false, call {@link withdrawVerification}.\n    * @returns {boolean}\n    */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Remove the requirement for this identity to be verified.\n    *\n    * If an identity was previously verified and is not anymore it will be\n    * reported to the user. In order to remove this notice users have to\n    * verify again or to withdraw the verification requirement.\n    * @returns {Promise<any>}\n    */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Was this identity verified since initial observation and is not anymore?\n    *\n    * Such a violation should be reported to the local user by the\n    * application, and resolved by\n    *\n    * - Verifying the new identity with {@link requestVerification}, or:\n    * - Withdrawing the verification requirement with {@link\n    *   withdrawVerification}.\n    * @returns {boolean}\n    */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n* The result of an outbound ECIES channel establishment.\n*/\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n    * The established ECIES channel.\n    * @returns {EstablishedEcies}\n    */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n    * The established ECIES channel.\n    * @param {EstablishedEcies} arg0\n    */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The initial encrypted message.\n    * @returns {string}\n    */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The initial encrypted message.\n    * @param {string} arg0\n    */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n* Struct representing a cross signing identity of a user.\n*\n* This is the user identity of a user that is our own.\n*/\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n    * Is this user identity verified?\n    * @returns {boolean}\n    */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Mark our user identity as verified.\n    *\n    * This will mark the identity locally as verified and sign it with our own\n    * device.\n    *\n    * Returns a signature upload request that needs to be sent out.\n    * @returns {Promise<any>}\n    */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Send a verification request to our other devices.\n    * @param {any[] | undefined} [methods]\n    * @returns {Promise<any>}\n    */\n    requestVerification(methods) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.ownuseridentity_requestVerification(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Does our user identity trust our own device, i.e. have we signed our own\n    * device keys with our self-signing key?\n    * @returns {Promise<any>}\n    */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the master key of the identity.\n    * @returns {string}\n    */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ownuseridentity_masterKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * Get the self-signing key of the identity.\n    * @returns {string}\n    */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ownuseridentity_selfSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * Get the user-signing key of the identity. This is only present for our\n    * own user identity.\n    * @returns {string}\n    */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ownuseridentity_userSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * True if we verified our own identity at some point in the past.\n    *\n    * To reset this latch back to `false`, call {@link withdrawVerification}.\n    * @returns {boolean}\n    */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Remove the requirement for this identity to be verified.\n    *\n    * If an identity was previously verified and is not any longer, it will be\n    * reported to the user. In order to remove this notice users have to\n    * verify again or to withdraw the verification requirement.\n    * @returns {Promise<any>}\n    */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Was this identity verified since initial observation and is not anymore?\n    *\n    * Such a violation should be reported to the local user by the\n    * application, and resolved by\n    *\n    * - Verifying the new identity with {@link requestVerification}, or:\n    * - Withdrawing the verification requirement with {@link\n    *   withdrawVerification}.\n    * @returns {boolean}\n    */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n* A pickled version of an `InboundGroupSession`.\n*\n* Holds all the information that needs to be stored in a database to restore\n* an InboundGroupSession.\n*/\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n    * The pickle string holding the Megolm Session, as returned by\n    * `olm_pickle_inbound_group_session` in libolm.\n    * @returns {string}\n    */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The pickle string holding the Megolm Session, as returned by\n    * `olm_pickle_inbound_group_session` in libolm.\n    * @param {string} arg0\n    */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The public curve25519 key of the account that sent us the session.\n    * @returns {string}\n    */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_backup_version(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The public curve25519 key of the account that sent us the session.\n    * @param {string} arg0\n    */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The public ed25519 key of the account that is believed to have initiated\n    * the session, if known.\n    *\n    * If the session was received directly from the creator via an\n    * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n    * property of the plaintext payload of that event (see\n    * [`m.olm.v1.curve25519-aes-sha2`]).\n    *\n    * If the session was forwarded to us using an [`m.forwarded_room_key`],\n    * this value is a copy of the `sender_claimed_ed25519_key` from the\n    * content of the event.\n    *\n    * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n    * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n    * @returns {string | undefined}\n    */\n    get senderSigningKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_backupRecoveryKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The public ed25519 key of the account that is believed to have initiated\n    * the session, if known.\n    *\n    * If the session was received directly from the creator via an\n    * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n    * property of the plaintext payload of that event (see\n    * [`m.olm.v1.curve25519-aes-sha2`]).\n    *\n    * If the session was forwarded to us using an [`m.forwarded_room_key`],\n    * this value is a copy of the `sender_claimed_ed25519_key` from the\n    * content of the event.\n    *\n    * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n    * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n    * @param {string | undefined} [arg0]\n    */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The id of the room that the session is used in.\n    *\n    * Nullable so that a `PickledInboundGroupSession` can be constructed\n    * incrementally. Must be populated!\n    * @returns {RoomId | undefined}\n    */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n    * The id of the room that the session is used in.\n    *\n    * Nullable so that a `PickledInboundGroupSession` can be constructed\n    * incrementally. Must be populated!\n    * @param {RoomId | undefined} [arg0]\n    */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * Flag remembering if the session was directly sent to us by the sender\n    * or if it was imported.\n    * @returns {boolean}\n    */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Flag remembering if the session was directly sent to us by the sender\n    * or if it was imported.\n    * @param {boolean} arg0\n    */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Flag remembering if the session has been backed up.\n    * @returns {boolean}\n    */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Flag remembering if the session has been backed up.\n    * @param {boolean} arg0\n    */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Construct a new `PickledInboundGroupSession`, with default values.\n    */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n* A pickled version of a `Session`.\n*\n* Holds all the information that needs to be stored in a database to restore\n* an Olm Session. Can be imported into the rust store with {@link\n* #migrateOlmSessions}.\n*/\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n    * The pickle string holding the Olm Session, as returned by\n    * `olm_pickle_session` in libolm.\n    * @returns {string}\n    */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The pickle string holding the Olm Session, as returned by\n    * `olm_pickle_session` in libolm.\n    * @param {string} arg0\n    */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The base64-encoded public curve25519 key of the other user that we share\n    * this session with.\n    * @returns {string}\n    */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_backup_version(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The base64-encoded public curve25519 key of the other user that we share\n    * this session with.\n    * @param {string} arg0\n    */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * Was the session created using a fallback key?\n    * @returns {boolean}\n    */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Was the session created using a fallback key?\n    * @param {boolean} arg0\n    */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n    * When the session was created.\n    * @returns {Date}\n    */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * When the session was created.\n    * @param {Date} arg0\n    */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, addHeapObject(arg0));\n    }\n    /**\n    * When the session was last used.\n    * @returns {Date}\n    */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * When the session was last used.\n    * @param {Date} arg0\n    */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, addHeapObject(arg0));\n    }\n    /**\n    * Construct a new `PickledSession`, with default values.\n    */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n* A request that will upload a dehydrated device to the server.\n*/\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `rooms`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `PutDehydratedDeviceRequest`\n    * @param {string} body\n    */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n* QR code based verification.\n*/\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n    * Get the current state of this request.\n    *\n    * Returns a `QrState`.\n    * @returns {QrState}\n    */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Has the QR verification been scanned by the other side.\n    *\n    * When the verification object is in this state it’s required\n    * that the user confirms that the other side has scanned the QR\n    * code.\n    * @returns {boolean}\n    */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Has the scanning of the QR code been confirmed by us?\n    * @returns {boolean}\n    */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get our own user ID.\n    * @returns {UserId}\n    */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * Get the user id of the other user that is participating in\n    * this verification flow.\n    * @returns {UserId}\n    */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * Get the device ID of the other side.\n    * @returns {DeviceId}\n    */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * Did we initiate the verification request?\n    * @returns {boolean}\n    */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get info about the cancellation if the verification flow has\n    * been cancelled.\n    * @returns {CancelInfo | undefined}\n    */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n    * Has the verification flow completed?\n    * @returns {boolean}\n    */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Has the verification flow been cancelled?\n    * @returns {boolean}\n    */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is this a verification that is verifying one of our own devices?\n    * @returns {boolean}\n    */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Have we successfully scanned the QR code and are able to send\n    * a reciprocation event?\n    * @returns {boolean}\n    */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the unique ID that identifies this QR verification flow,\n    * be either a to-device request ID or a room event ID.\n    * @returns {string}\n    */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_flowId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the room id if the verification is happening inside a\n    * room.\n    * @returns {RoomId | undefined}\n    */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n    * Generate a QR code object that is representing this\n    * verification flow.\n    *\n    * The QrCode can then be rendered as an image or as an unicode\n    * string.\n    *\n    * The `to_bytes` method can be used to instead output the raw\n    * bytes that should be encoded as a QR code.\n    *\n    * Returns a `QrCode`.\n    * @returns {QrCode}\n    */\n    toQrCode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_toQrCode(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return QrCode.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Generate a the raw bytes that should be encoded as a QR code\n    * is representing this verification flow.\n    *\n    * The `to_qr_code` method can be used to instead output a QrCode\n    * object that can be rendered.\n    * @returns {Uint8ClampedArray}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Notify the other side that we have successfully scanned the QR\n    * code and that the QR verification flow can start.\n    *\n    * This will return some OutgoingContent if the object is in the\n    * correct state to start the verification flow, otherwise None.\n    * @returns {any}\n    */\n    reciprocate() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_reciprocate(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Confirm that the other side has scanned our QR code.\n    *\n    * Returns either an `OutgoingRequest` which should be sent out, or\n    * `undefined` if the verification is already confirmed.\n    * @returns {any}\n    */\n    confirmScanning() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_confirmScanning(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Cancel the verification flow.\n    *\n    * Returns either an `OutgoingRequest` which should be sent out, or\n    * `undefined` if the verification is already cancelled.\n    * @returns {any}\n    */\n    cancel() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_cancel(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Cancel the verification.\n    *\n    * This cancels the verification with given code (e.g. `m.user`).\n    *\n    * Returns either an `OutgoingRequest` which should be sent out, or\n    * `undefined` if the verification is already cancelled.\n    * @param {string} code\n    * @returns {any}\n    */\n    cancelWithCode(code) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.qr_cancelWithCode(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * the request\n    *\n    * The `callback` is called with no parameters.\n    * @param {Function} callback\n    */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, addHeapObject(callback));\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n* A QR code.\n*/\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n    * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n    * dark pixel and 0 a white pixel.\n    * @returns {Uint8ClampedArray}\n    */\n    renderIntoBuffer() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcode_renderIntoBuffer(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n* Data for the QR code login mechanism.\n*\n* The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n* be decoded from a QR code.\n*/\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n    * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n    * and, optionally, a server name for the homeserver.\n    *\n    * If a server name is given, then the {@link QrCodeData} mode will be\n    * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n    * the existing device to display the QR code.\n    *\n    * If no server name is given, the {@link QrCodeData} mode will be\n    * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n    * new device to display the QR code.\n    * @param {Curve25519PublicKey} public_key\n    * @param {string} rendezvous_url\n    * @param {string | undefined} [server_name]\n    */\n    constructor(public_key, rendezvous_url, server_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(public_key, Curve25519PublicKey);\n            var ptr0 = public_key.__destroy_into_raw();\n            const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.qrcodedata_new(retptr, ptr0, ptr1, len1, ptr2, len2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n    *\n    * The slice of bytes would generally be returned by a QR code decoder.\n    * @param {Uint8Array} bytes\n    * @returns {QrCodeData}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.qrcodedata_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return QrCodeData.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encode the {@link QrCodeData} into a list of bytes.\n    *\n    * The list of bytes can be used by a QR code generator to create an image\n    * containing a QR code.\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcodedata_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n    * object.\n    * @param {string} data\n    * @returns {QrCodeData}\n    */\n    static fromBase64(data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.qrcodedata_fromBase64(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return QrCodeData.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encode the {@link QrCodeData} into a string using base64.\n    *\n    * This format can be used for debugging purposes and the\n    * [`QrcodeData::from_base64()`] method can be used to parse the string\n    * again.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcodedata_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n    *\n    * This Curve25519 public key should be used to establish an\n    * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n    * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n    * device.\n    * @returns {Curve25519PublicKey}\n    */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Get the URL of the rendezvous server which will be used to exchange\n    * messages between the two devices.\n    * @returns {string}\n    */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcodedata_rendezvousUrl(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the server name of the homeserver which the new device will be\n    * logged in to.\n    *\n    * This will be only available if the existing device has generated the QR\n    * code and the new device is the one scanning the QR code.\n    * @returns {string | undefined}\n    */\n    get serverName() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcodedata_serverName(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the mode of this {@link QrCodeData} instance.\n    * @returns {QrCodeMode}\n    */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n* A scanned QR code.\n*/\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n    * Parse the decoded payload of a QR code in byte slice form.\n    *\n    * This method is useful if you would like to do your own custom QR code\n    * decoding.\n    * @param {Uint8ClampedArray} buffer\n    * @returns {QrCodeScan}\n    */\n    static fromBytes(buffer) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcodescan_fromBytes(retptr, addBorrowedObject(buffer));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return QrCodeScan.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n* A rehydrated device\n*\n* This device can receive to-device events to get room keys that were send to\n* it.\n*/\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n    * Receive the to-device events that sent to the dehydrated device\n    *\n    * The rehydrated device will decrypt the events and pass the room keys\n    * into the `OlmMachine`.\n    *\n    * `to_device_events` is a JSON-encoded result of the `events` array from\n    * `/dehydrated_device/{device_id}/events`.\n    *\n    * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n    * received.\n    * @param {string} to_device_events\n    * @returns {Promise<Array<any>>}\n    */\n    receiveEvents(to_device_events) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n* A Matrix [room ID].\n*\n* [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n*/\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n    * Parse/validate and create a new `RoomId`.\n    * @param {string} id\n    */\n    constructor(id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.roomid_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            RoomIdFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the room ID as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.deviceid_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n* Struct holding the number of room keys we have.\n*/\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n    * The total number of room keys.\n    * @returns {number}\n    */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The total number of room keys.\n    * @param {number} arg0\n    */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n    * The number of backed up room keys.\n    * @returns {number}\n    */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The number of backed up room keys.\n    * @param {number} arg0\n    */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n* The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n* {@link OlmMachine.importBackedUpRoomKeys}.\n*/\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n    * The number of room keys that were imported.\n    * @returns {number}\n    */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * The total number of room keys that were found in the export.\n    * @returns {number}\n    */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * The keys that were imported.\n    *\n    * A Map from room id to a Map of the sender key to a Set of session ids.\n    *\n    * Typescript type: `Map<string, Map<string, Set<string>>`.\n    * @returns {Map<any, any>}\n    */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n* Information on a room key that has been received or imported.\n*/\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n    * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n    * of the `m.megolm.*` algorithms.\n    * @returns {EncryptionAlgorithm}\n    */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The room where the key is used.\n    * @returns {RoomId}\n    */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n    * The Curve25519 key of the device which initiated the session originally.\n    * @returns {Curve25519PublicKey}\n    */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * The ID of the session that the key is for.\n    * @returns {string}\n    */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.roomkeyinfo_sessionId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n* Information on a received `m.room_key.withheld` event.\n*/\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n    * The User ID of the user that sent us the `m.room_key.withheld` message.\n    * @returns {UserId}\n    */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The encryption algorithm of the session that is being withheld.\n    * @returns {EncryptionAlgorithm}\n    */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The `code` from the `m.room_key.withheld` message, such as\n    * `m.unverified`.\n    * @returns {string}\n    */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.roomkeywithheldinfo_withheldCode(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The room ID of the session that is being withheld.\n    * @returns {RoomId}\n    */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n    * The session ID of the session that is being withheld.\n    * @returns {string}\n    */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.roomkeywithheldinfo_sessionId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n* A customized owned request type for sending out room messages\n* ([specification]).\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n*/\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A string representing the room to send the event to.\n    * @returns {string}\n    */\n    get room_id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A string representing the transaction ID for this event.\n    *\n    * Clients should generate an ID unique across requests with the same\n    * access token; it will be used by the server to ensure idempotency of\n    * requests.\n    * @returns {string}\n    */\n    get txn_id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A string representing the type of event to be sent.\n    * @returns {string}\n    */\n    get event_type() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the message's content.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `RoomMessageRequest`.\n    * @param {string} id\n    * @param {string} room_id\n    * @param {string} txn_id\n    * @param {string} event_type\n    * @param {string} content\n    */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(addHeapObject(id), addHeapObject(room_id), addHeapObject(txn_id), addHeapObject(event_type), addHeapObject(content));\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n* Room encryption settings which are modified by state events or user options\n*/\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n    * The encryption algorithm that should be used in the room.\n    *\n    * Should be one of the members of {@link EncryptionAlgorithm}.\n    * @returns {EncryptionAlgorithm}\n    */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The encryption algorithm that should be used in the room.\n    *\n    * Should be one of the members of {@link EncryptionAlgorithm}.\n    * @param {EncryptionAlgorithm} arg0\n    */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Whether untrusted devices should receive room keys. If this is `false`,\n    * they will be excluded from the conversation.\n    * @returns {boolean}\n    */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Whether untrusted devices should receive room keys. If this is `false`,\n    * they will be excluded from the conversation.\n    * @param {boolean} arg0\n    */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n    * The maximum time, in milliseconds, that an encryption session should be\n    * used for, before it is rotated.\n    * @returns {number | undefined}\n    */\n    get sessionRotationPeriodMs() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The maximum time, in milliseconds, that an encryption session should be\n    * used for, before it is rotated.\n    * @param {number | undefined} [arg0]\n    */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n    * The maximum number of messages an encryption session should be used for,\n    * before it is rotated.\n    * @returns {number | undefined}\n    */\n    get sessionRotationPeriodMessages() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The maximum number of messages an encryption session should be used for,\n    * before it is rotated.\n    * @param {number | undefined} [arg0]\n    */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n    * Create a new `RoomSettings` with default values.\n    */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n* Short Authentication String (SAS) verification.\n*/\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n    * Get our own user ID.\n    * @returns {UserId}\n    */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * Get our own device ID.\n    * @returns {DeviceId}\n    */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * Get the user id of the other side.\n    * @returns {UserId}\n    */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * Get the device ID of the other side.\n    * @returns {DeviceId}\n    */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * Get the unique ID that identifies this SAS verification flow,\n    * be either a to-device request ID or a room event ID.\n    * @returns {string}\n    */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_flowId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the room ID if the verification is happening inside a\n    * room.\n    * @returns {RoomId | undefined}\n    */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n    * Does this verification flow support displaying emoji for the\n    * short authentication string?\n    * @returns {boolean}\n    */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Did this verification flow start from a verification request?\n    * @returns {boolean}\n    */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is this a verification that is verifying one of our own\n    * devices?\n    * @returns {boolean}\n    */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Have we confirmed that the short auth string matches?\n    * @returns {boolean}\n    */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Has the verification been accepted by both parties?\n    * @returns {boolean}\n    */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get info about the cancellation if the verification flow has\n    * been cancelled.\n    * @returns {CancelInfo | undefined}\n    */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n    * True if we initiated the verification flow (ie, we sent the\n    * `m.key.verification.request`).\n    * @returns {boolean}\n    */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Accept the SAS verification.\n    *\n    * This does nothing (and returns `undefined`) if the verification was\n    * already accepted, otherwise it returns an `OutgoingRequest`\n    * that needs to be sent out.\n    * @returns {any}\n    */\n    accept() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_accept(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Confirm the SAS verification.\n    *\n    * This confirms that the short auth strings match on both sides.\n    *\n    * Does nothing if we’re not in a state where we can confirm the\n    * short auth string.\n    *\n    * Returns a `Promise` for an array of `OutgoingRequest`s.\n    * @returns {Promise<any>}\n    */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Cancel the verification.\n    *\n    * Returns either an `OutgoingRequest` which should be sent out, or\n    * `undefined` if the verification is already cancelled.\n    * @returns {any}\n    */\n    cancel() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_cancel(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Cancel the verification.\n    *\n    * This cancels the verification with given code (e.g. `m.user`).\n    *\n    * Returns either an `OutgoingRequest` which should be sent out, or\n    * `undefined` if the verification is already cancelled.\n    * @param {string} code\n    * @returns {any}\n    */\n    cancelWithCode(code) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.sas_cancelWithCode(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Has the SAS verification flow timed out?\n    * @returns {boolean}\n    */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Are we in a state where we can show the short auth string?\n    * @returns {boolean}\n    */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is the SAS flow done?\n    * @returns {boolean}\n    */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is the SAS flow cancelled?\n    * @returns {boolean}\n    */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the emoji version of the short auth string.\n    *\n    * Returns `undefined` if we can't yet present the short auth string,\n    * otherwise an array of seven `Emoji` objects.\n    * @returns {(Emoji)[] | undefined}\n    */\n    emoji() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_emoji(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the index of the emoji representing the short auth string\n    *\n    * Returns `undefined` if we can’t yet present the short auth\n    * string, otherwise seven `u8` numbers in the range from 0 to 63\n    * inclusive which can be converted to an emoji using [the\n    * relevant specification\n    * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n    * @returns {Uint8Array | undefined}\n    */\n    emojiIndex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_emojiIndex(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the decimal version of the short auth string.\n    *\n    * Returns None if we can’t yet present the short auth string,\n    * otherwise a tuple containing three 4-digit integers that\n    * represent the short auth string.\n    * @returns {Uint16Array | undefined}\n    */\n    decimals() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_decimals(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU16FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 2, 2);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * the request.\n    *\n    * The `callback` is called with no parameters.\n    * @param {Function} callback\n    */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, addHeapObject(callback));\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n* Struct containing the bundle of secrets to fully activate a new device for\n* end-to-end encryption.\n*/\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n    * The seed of the master key encoded as unpadded base64.\n    * @returns {string}\n    */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretsbundle_masterKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The seed of the self signing key encoded as unpadded base64.\n    * @returns {string}\n    */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretsbundle_selfSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The seed of the user signing key encoded as unpadded base64.\n    * @returns {string}\n    */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretsbundle_userSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The bundle of the backup decryption key and backup version if any.\n    * @returns {BackupSecretsBundle | undefined}\n    */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n    * Serialize the [`SecretsBundle`] to a JSON object.\n    * @returns {any}\n    */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretsbundle_to_json(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserialize the [`SecretsBundle`] from a JSON object.\n    * @param {any} json\n    * @returns {SecretsBundle}\n    */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretsbundle_from_json(retptr, addHeapObject(json));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretsBundle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n* A Matrix-spec compliant [server name].\n*\n* It consists of a host and an optional port (separated by a colon if\n* present).\n*\n* [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n*/\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n    * Parse/validate and create a new `ServerName`.\n    * @param {string} name\n    */\n    constructor(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.servername_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ServerNameFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the host of the server name.\n    *\n    * That is: Return the part of the server before `:<port>` or the\n    * full server name if there is no port.\n    * @returns {string}\n    */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.servername_host(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the port of the server name if any.\n    * @returns {number | undefined}\n    */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * Returns true if and only if the server name is an IPv4 or IPv6\n    * address.\n    * @returns {boolean}\n    */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n* Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n* for more info.\n*/\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n    * The shield color\n    * @returns {ShieldColor}\n    */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The shield color\n    * @param {ShieldColor} arg0\n    */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n    * A machine-readable representation of the authenticity for a\n    * `ShieldState`.\n    * @returns {ShieldStateCode | undefined}\n    */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 6 ? undefined : ret;\n    }\n    /**\n    * A machine-readable representation of the authenticity for a\n    * `ShieldState`.\n    * @param {ShieldStateCode | undefined} [arg0]\n    */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 6 : arg0);\n    }\n    /**\n    * Error message that can be displayed as a tooltip\n    * @returns {string | undefined}\n    */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.shieldstate_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n* Represents a potentially decoded signature (but not a validated\n* one).\n*/\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n    * Get the Ed25519 signature, if this is one.\n    * @returns {Ed25519Signature | undefined}\n    */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * Convert the signature to a base64 encoded string.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n* Data for a request to the `/keys/signatures/upload` API endpoint\n* ([specification]).\n*\n* Publishes cross-signing signatures for the user.\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n*/\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * Some signature upload will have to an `id` field, some won't.\n    * They have one when they are created automatically during an interactive\n    * verification, otherwise they don't.\n    * @returns {string | undefined}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the payload of the request\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `SignatureUploadRequest`.\n    * @param {string} id\n    * @param {string} signed_keys\n    */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(addHeapObject(id), addHeapObject(signed_keys));\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n* The result of a signature verification of a signed JSON object.\n*/\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n    * Give the backup signature state from the current device.\n    * See SignatureState for values\n    * @returns {SignatureState}\n    */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Give the backup signature state from the current user identity.\n    * See SignatureState for values\n    * @returns {SignatureState}\n    */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Is the result considered to be trusted?\n    *\n    * This tells us if the result has a valid signature from any of the\n    * following:\n    *\n    * * Our own device\n    * * Our own user identity, provided the identity is trusted as well\n    * * Any of our own devices, provided the device is trusted as well\n    * @returns {boolean}\n    */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n* A collection of `Signature`.\n*/\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n    * Creates a new, empty, signatures collection.\n    */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Add the given signature from the given signer and the given key ID to\n    * the collection.\n    * @param {UserId} signer\n    * @param {DeviceKeyId} key_id\n    * @param {Ed25519Signature} signature\n    * @returns {MaybeSignature | undefined}\n    */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n    * Try to find an Ed25519 signature from the given signer with\n    * the given key ID.\n    * @param {UserId} signer\n    * @param {DeviceKeyId} key_id\n    * @returns {Ed25519Signature | undefined}\n    */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * Get the map of signatures that belong to the given user.\n    * @param {UserId} signer\n    * @returns {Map<any, any> | undefined}\n    */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Remove all the signatures we currently hold.\n    */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n    * Do we hold any signatures or is our collection completely\n    * empty.\n    * @returns {boolean}\n    */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * How many signatures do we currently hold.\n    * @returns {number}\n    */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Get the json with all signatures\n    * @returns {string}\n    */\n    asJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signatures_asJSON(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n* A struct containing an open connection to a CryptoStore.\n*\n* Opening the CryptoStore can take some time, due to the PBKDF calculation\n* involved, so if multiple operations are being done on the same store, it is\n* more efficient to open it once.\n*/\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n    * Open a crypto store.\n    *\n    * The created store will be based on IndexedDB if a `store_name` is\n    * provided; otherwise it will be based on a memory store and once the\n    * objects is dropped, the keys will be lost.\n    *\n    * # Arguments\n    *\n    * * `store_name` - The name that should be used to open the IndexedDB\n    *   based database. If this isn't provided, a memory-only store will be\n    *   used. *Note* the memory-only store will lose your E2EE keys when the\n    *   `StoreHandle` gets dropped.\n    *\n    * * `store_passphrase` - The passphrase that should be used to encrypt the\n    *   store, for IndexedDB-based stores\n    * @param {string | undefined} [store_name]\n    * @param {string | undefined} [store_passphrase]\n    * @returns {Promise<StoreHandle>}\n    */\n    static open(store_name, store_passphrase) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1);\n        return takeObject(ret);\n    }\n    /**\n    * Open a crypto store based on IndexedDB, using the given key for\n    * encryption.\n    *\n    * # Arguments\n    *\n    * * `store_name` - The name that should be used to open the IndexedDB\n    *   based database.\n    *\n    * * `store_key` - The key that should be used to encrypt the store, for\n    *   IndexedDB-based stores. Must be a 32-byte array.\n    * @param {string} store_name\n    * @param {Uint8Array} store_key\n    * @returns {Promise<StoreHandle>}\n    */\n    static openWithKey(store_name, store_key) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1);\n        return takeObject(ret);\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n* Data for a request to the `/sendToDevice` API endpoint\n* ([specification]).\n*\n* Send an event to a single device or to a group of devices.\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n*/\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * For to-device request this would be the same value as `txn_id`. It is\n    * exposed also as `id` so that the js bindings are consistent with the\n    * other request types by using this field to mark as sent.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A string representing the type of event being sent to each devices.\n    * @returns {string}\n    */\n    get event_type() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A string representing a request identifier unique to the access token\n    * used to send the request.\n    * @returns {string}\n    */\n    get txn_id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `messages`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `ToDeviceRequest`.\n    * @param {string} id\n    * @param {string} event_type\n    * @param {string} txn_id\n    * @param {string} body\n    */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(addHeapObject(id), addHeapObject(event_type), addHeapObject(txn_id), addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n* Type to install and to manipulate the tracing layer.\n*/\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n    * Check whether the `tracing` feature has been enabled.\n    *\n    * @deprecated: `tracing` is now always enabled.\n    * @returns {boolean}\n    */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n    * Install the tracing layer.\n    * @param {LoggerLevel} min_level\n    */\n    constructor(min_level) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tracing_new(retptr, min_level);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            TracingFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Re-define the minimum logger level.\n    * @param {LoggerLevel} min_level\n    */\n    set minLevel(min_level) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tracing_set_minLevel(retptr, this.__wbg_ptr, min_level);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Turn the logger on, i.e. it emits logs again if it was turned\n    * off.\n    */\n    turnOn() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tracing_turnOn(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Turn the logger off, i.e. it no longer emits logs.\n    */\n    turnOff() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tracing_turnOff(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n* Other Requests *\n* Request that will publish a cross signing identity.\n*\n* This uploads the public cross signing key triplet.\n*/\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `master_key`,\n    * `self_signing_key`, `user_signing_key`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `UploadSigningKeysRequest`.\n    * @param {string} body\n    */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n* A read only view over all devices belonging to a user.\n*/\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n    * Get the specific device with the given device ID.\n    * @param {DeviceId} device_id\n    * @returns {Device | undefined}\n    */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n    * Returns true if there is at least one devices of this user\n    * that is considered to be verified, false otherwise.\n    *\n    * This won't consider your own device as verified, as your own\n    * device is always implicitly verified.\n    * @returns {boolean}\n    */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Array over all the device IDs of the user devices.\n    * @returns {Array<any>}\n    */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Iterator over all the devices of the user devices.\n    * @returns {Array<any>}\n    */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n* A Matrix [user ID].\n*\n* [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n*/\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n    * Parse/validate and create a new `UserId`.\n    * @param {string} id\n    */\n    constructor(id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.userid_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            UserIdFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the user's localpart.\n    * @returns {string}\n    */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.userid_localpart(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the server name of the user ID.\n    * @returns {ServerName}\n    */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n    * Whether this user ID is a historical one.\n    *\n    * A historical user ID is one that doesn't conform to the latest\n    * specification of the user ID grammar but is still accepted\n    * because it was previously allowed.\n    * @returns {boolean}\n    */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Return the user ID as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.deviceid_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a clone of this `UserId`.\n    *\n    * This can be useful when passing a `UserId` instance to methods such as\n    * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n    * @returns {UserId}\n    */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n* An object controlling key verification requests.\n*\n* Interactive verification flows usually start with a verification\n* request, this object lets you send and reply to such a\n* verification request.\n*\n* After the initial handshake the verification flow transitions into\n* one of the verification methods.\n*/\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n    * Create an event content that can be sent as a room event to\n    * request verification from the other side. This should be used\n    * only for verifications of other users and it should be sent to\n    * a room we consider to be a DM with the other user.\n    * @param {UserId} own_user_id\n    * @param {DeviceId} own_device_id\n    * @param {UserId} other_user_id\n    * @param {any[] | undefined} [methods]\n    * @returns {string}\n    */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.verificationrequest_request(retptr, own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n    * Our own user id.\n    * @returns {UserId}\n    */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The ID of the other user that is participating in this\n    * verification request.\n    * @returns {UserId}\n    */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The ID of the other device that is participating in this\n    * verification.\n    * @returns {DeviceId | undefined}\n    */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n    * Get the room ID if the verification is happening inside a\n    * room.\n    * @returns {RoomId | undefined}\n    */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n    * Get info about the cancellation if the verification request\n    * has been cancelled.\n    * @returns {CancelInfo | undefined}\n    */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n    * Has the verification request been answered by another device?\n    * @returns {boolean}\n    */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is the verification request ready to start a verification flow?\n    * @returns {boolean}\n    */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Has the verification flow timed out?\n    * @returns {boolean}\n    */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * The number of milliseconds remaining before this verification flow times\n    * out.\n    *\n    * Returns zero if the time has already passed.\n    * @returns {number}\n    */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Get the supported verification methods of the other side.\n    *\n    * Will be present only if the other side requested the\n    * verification or if we’re in the ready state.\n    *\n    * # Returns\n    *\n    * `undefined` if we do not yet know the supported methods; otherwise, an\n    * array of `VerificationMethod`s.\n    * @returns {any[] | undefined}\n    */\n    get theirSupportedMethods() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationrequest_theirSupportedMethods(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get our own supported verification methods that we advertised.\n    *\n    * Will be present only we requested the verification or if we’re\n    * in the ready state.\n    * @returns {any[] | undefined}\n    */\n    get ourSupportedMethods() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationrequest_ourSupportedMethods(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the unique ID of this verification request.\n    * @returns {string}\n    */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationrequest_flowId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Is this a verification that is verifying one of our own\n    * devices?\n    * @returns {boolean}\n    */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Did we initiate the verification request?\n    * @returns {boolean}\n    */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Has the verification flow that was started with this request\n    * finished?\n    * @returns {boolean}\n    */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the current phase of this request.\n    *\n    * Returns a `VerificationRequestPhase`.\n    * @returns {VerificationRequestPhase}\n    */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * If this request has transitioned into a concrete verification\n    * flow (and not yet been completed or cancelled), returns a `Verification`\n    * object.\n    *\n    * Returns: a `Sas`, a `Qr`, or `undefined`.\n    * @returns {any}\n    */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * the request.\n    *\n    * The `callback` is called with no parameters.\n    * @param {Function} callback\n    */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, addHeapObject(callback));\n    }\n    /**\n    * Has the verification flow that was started with this request\n    * been cancelled?\n    * @returns {boolean}\n    */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Accept the verification request signaling that our client\n    * supports the given verification methods.\n    *\n    * `methods` represents the methods that we should advertise as\n    * supported by us.\n    *\n    * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n    * or `undefined`.\n    * @param {any[]} methods\n    * @returns {any}\n    */\n    acceptWithMethods(methods) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verificationrequest_acceptWithMethods(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Accept the verification request.\n    *\n    * This method will accept the request and signal that it\n    * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n    * `m.reciprocate.v1` method.\n    *\n    * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n    * feature is enabled. This feature is disabled by default. If\n    * it's enabled and QR code scanning should be supported or QR\n    * code showing shouldn't be supported the `accept_with_methods`\n    * method should be used instead.\n    *\n    * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n    * or `undefined`.\n    * @returns {any}\n    */\n    accept() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationrequest_accept(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Cancel the verification request.\n    *\n    * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n    * or `undefined`.\n    * @returns {any}\n    */\n    cancel() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationrequest_cancel(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Transition from this verification request into a SAS verification flow.\n    *\n    * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n    * @returns {Promise<any>}\n    */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Generate a QR code that can be used by another client to start\n    * a QR code based verification.\n    *\n    * Returns a `Qr` or `undefined`.\n    * @returns {Promise<any>}\n    */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Start a QR code verification by providing a scanned QR code\n    * for this verification flow.\n    * @param {QrCodeScan} data\n    * @returns {Promise<any>}\n    */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n* Object containing the versions of the Rust libraries we are using.\n*/\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n    * The version of the vodozemac crate.\n    * @returns {string}\n    */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The version of the matrix-sdk-crypto crate.\n    * @returns {string}\n    */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The Git commit hash of the crate's source tree at build time.\n    * @returns {string}\n    */\n    get git_sha() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The build-time output of the `git describe` command of the source tree\n    * of crate.\n    * @returns {string}\n    */\n    get git_description() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_length_ae22078168b726f5(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_iterator_888179a48810a9fe() {\n    const ret = Symbol.iterator;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_from_0791d740a9d37830(arg0) {\n    const ret = Array.from(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_at_5fa66069579ac579(arg0, arg1) {\n    const ret = getObject(arg0).at(arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = getObject(arg0) in getObject(arg1);\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = getObject(arg0);\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(getObject(arg0)) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = getObject(arg0);\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\ntry { result = +getObject(arg0) } catch (e) { result = e }\nconst ret = result;\nreturn addHeapObject(ret);\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_setTimeout_7d81d052875b0f4f() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(getObject(arg0), arg1);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_transaction_0549f2d854da77a6(arg0) {\n    const ret = getObject(arg0).transaction;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nexport function __wbg_createIndex_8420e89baab0736f() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).createIndex(getStringFromWasm0(arg1, arg2), getObject(arg3));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_objectStoreNames_2fc72464aff4baed(arg0) {\n    const ret = getObject(arg0).objectStoreNames;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_525245e2b9901204() {\n    const ret = new Object();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_setunique_6f46c3f803001492(arg0, arg1) {\n    getObject(arg0).unique = arg1 !== 0;\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_add_4d2791d6295ba9ec() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).add(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_getwithrefkey_edc2c8960f0f1191(arg0, arg1) {\n    const ret = getObject(arg0)[getObject(arg1)];\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_f975102236d3c502(arg0, arg1, arg2) {\n    getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n};\n\nexport function __wbg_version_85aa50b42026873e(arg0) {\n    const ret = getObject(arg0).version;\n    return ret;\n};\n\nexport function __wbg_close_7bef29d1d5feecdb(arg0) {\n    getObject(arg0).close();\n};\n\nexport function __wbindgen_object_clone_ref(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_is_array(arg0) {\n    const ret = Array.isArray(getObject(arg0));\n    return ret;\n};\n\nexport function __wbg_parse_52202f117ec9ecfa() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_b85e72ed1bfd57f9(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_748(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return addHeapObject(ret);\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_0d215095f6a3600f(arg0) {\n    const ret = new Set(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = takeObject(arg0).original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbg_setonblocked_554fa1541fe66a16(arg0, arg1) {\n    getObject(arg0).onblocked = getObject(arg1);\n};\n\nexport function __wbg_clearTimeout_541ac0980ffcef74(arg0) {\n    const ret = clearTimeout(takeObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbg_setonversionchange_b1a0928064e9b758(arg0, arg1) {\n    getObject(arg0).onversionchange = getObject(arg1);\n};\n\nexport function __wbg_new_a220cf903aa02ca2() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_push_37c89022f34c01ca(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = getObject(arg0) === getObject(arg1);\n    return ret;\n};\n\nexport function __wbg_String_88810dfeb4021902(arg0, arg1) {\n    const ret = String(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_673dda6c73d19609(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n};\n\nexport function __wbg_call_7de908392845a9a5() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3), getObject(arg4));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_getTime_91058879093a1589(arg0) {\n    const ret = getObject(arg0).getTime();\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_then_876bb3c633745cc6(arg0, arg1, arg2) {\n    const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_8608a2b51a5f6737() {\n    const ret = new Map();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_49185437f0ab06f8(arg0, arg1, arg2) {\n    const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_7982fb43cfca37ae(arg0) {\n    const ret = new Date(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_entries_2f5ddf03b53c6730(arg0) {\n    const ret = getObject(arg0).entries();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_values_fb3a48a5a8c681f6(arg0) {\n    const ret = getObject(arg0).values();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_get_3baa728f9d58d3f6(arg0, arg1) {\n    const ret = getObject(arg0)[arg1 >>> 0];\n    return addHeapObject(ret);\n};\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(getObject(arg0)) === 'string';\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_5e6d9547403deab8(arg0, arg1) {\n    const ret = getObject(arg0)[getObject(arg1)];\n    return addHeapObject(ret);\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_841ac57cff3d672b(arg0, arg1, arg2) {\n    getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n};\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithlength_dfb862b757677cfc(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_length_701cb851fad911df(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_buffer_b7b08af79b0b0974(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_e36b5ccdd852e18d(arg0) {\n    const ret = new Uint8ClampedArray(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_b68cc6ecd92a1101(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_abda76e883ba8a5f() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_658279fe44541cf6(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_error_f851667af71bcfc6(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_subarray_7c2e3576afe181d1(arg0, arg1, arg2) {\n    const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_getRandomValues_3aa56aa6edec874c() { return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n}, arguments) };\n\nexport function __wbg_newwithbyteoffsetandlength_8a2cb9ca96b27ec9(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_randomFillSync_5c9c955aa56b6049() { return handleError(function (arg0, arg1) {\n    getObject(arg0).randomFillSync(takeObject(arg1));\n}, arguments) };\n\nexport function __wbg_crypto_1d1f22824a6a080c(arg0) {\n    const ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_process_4a72847cc503995b(arg0) {\n    const ret = getObject(arg0).process;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_versions_f686565e586dd935(arg0) {\n    const ret = getObject(arg0).versions;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_node_104a2ff8d6ea03a2(arg0) {\n    const ret = getObject(arg0).node;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_require_cca90b1a94a0255b() { return handleError(function () {\n    const ret = module.require;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_msCrypto_eb05e62b530a1508(arg0) {\n    const ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithlength_ec548f448387c968(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_open_a89af1720976a433() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).open(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_Window_6a2291ac118902bc(arg0) {\n    const ret = getObject(arg0).Window;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_indexedDB_1f9ee79bddf7d011() { return handleError(function (arg0) {\n    const ret = getObject(arg0).indexedDB;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_WorkerGlobalScope_e82ddd4027f19bb8(arg0) {\n    const ret = getObject(arg0).WorkerGlobalScope;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_indexedDB_9d299adf9543d0c3() { return handleError(function (arg0) {\n    const ret = getObject(arg0).indexedDB;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_global_12bfcc55465b53ad(arg0) {\n    const ret = getObject(arg0).global;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_indexedDB_59bf81be2abc635d() { return handleError(function (arg0) {\n    const ret = getObject(arg0).indexedDB;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_open_e8f45f3526088828() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_setoncomplete_a9e0ec1d6568a6d9(arg0, arg1) {\n    getObject(arg0).oncomplete = getObject(arg1);\n};\n\nexport function __wbg_setonerror_00500154a07e987d(arg0, arg1) {\n    getObject(arg0).onerror = getObject(arg1);\n};\n\nexport function __wbg_setonabort_aedc77f0151af20c(arg0, arg1) {\n    getObject(arg0).onabort = getObject(arg1);\n};\n\nexport function __wbg_transaction_5a1543682e4ad921() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).transaction(getStringFromWasm0(arg1, arg2), [\"readonly\",\"readwrite\",\"versionchange\",\"readwriteflush\",\"cleanup\",][arg3]);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_createObjectStore_190c19a0bae3fedb() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).createObjectStore(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_clear_324ffb9a7c18a41c() { return handleError(function (arg0) {\n    const ret = getObject(arg0).clear();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_createIndex_6d4c3e20ee0f1066() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = getObject(arg0).createIndex(getStringFromWasm0(arg1, arg2), getObject(arg3), getObject(arg4));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_newwithmessage_7beb619ae81d7cb1() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_objectStore_80724f9f6d33ab5b() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).objectStore(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_readyState_80e6a6c7d538fa33(arg0) {\n    const ret = getObject(arg0).readyState;\n    return {\"pending\":0,\"done\":1,}[ret] ?? 2;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = getObject(arg0) === null;\n    return ret;\n};\n\nexport function __wbg_item_5a55aebc84c52f29(arg0, arg1, arg2) {\n    const ret = getObject(arg1).item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_openCursor_728ede41c2e2d7ec() { return handleError(function (arg0) {\n    const ret = getObject(arg0).openCursor();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nexport function __wbg_call_1084a111329e68ce() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_next_f9cb570345655b9a() { return handleError(function (arg0) {\n    const ret = getObject(arg0).next();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_done_bfda7aa8f252b39f(arg0) {\n    const ret = getObject(arg0).done;\n    return ret;\n};\n\nexport function __wbg_value_6d39332ab4788d86(arg0) {\n    const ret = getObject(arg0).value;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_get_224d16597dbbfd96() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_next_de3e9db4440638b2(arg0) {\n    const ret = getObject(arg0).next;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_self_3093d5d1f7bcb682() { return handleError(function () {\n    const ret = self.self;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_window_3bcfc4d31bc012f8() { return handleError(function () {\n    const ret = window.window;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_globalThis_86b222e13bdf32ed() { return handleError(function () {\n    const ret = globalThis.globalThis;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_global_e5a3fe56f8be9485() { return handleError(function () {\n    const ret = global.global;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_newnoargs_76313bd6ff35d0f2(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_isArray_8364a5371e9737d8(arg0) {\n    const ret = Array.isArray(getObject(arg0));\n    return ret;\n};\n\nexport function __wbg_instanceof_ArrayBuffer_61dfc3198373c902(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_call_89af060b4e1523f2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_call_c6fe275aaa60da79() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_instanceof_Map_763ce0e95960d55e(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_7f1ed56200d90674(arg0) {\n    const ret = Number.isSafeInteger(getObject(arg0));\n    return ret;\n};\n\nexport function __wbg_entries_7a0e06255456ebcd(arg0) {\n    const ret = Object.entries(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_add_653baf3821a15934(arg0, arg1) {\n    const ret = getObject(arg0).add(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stringify_bbf45426c92a6bf5() { return handleError(function (arg0) {\n    const ret = JSON.stringify(getObject(arg0));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_instanceof_Promise_ae8c7ffdec83f2ae(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_new_ea1883e1e5e86686(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_d1e79e2388520f18(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbg_length_8339fcf5d8ecd12e(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_94126d2ad22a595c(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_instanceof_Uint8Array_247a91427532499e(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_debug_5a33c41aeac15ee6(arg0) {\n    console.debug(getObject(arg0));\n};\n\nexport function __wbg_info_c261acb2deacd903(arg0) {\n    console.info(getObject(arg0));\n};\n\nexport function __wbg_warn_2b3adb99ce26c314(arg0) {\n    console.warn(getObject(arg0));\n};\n\nexport function __wbg_error_09480e4aadca50ad(arg0) {\n    console.error(getObject(arg0));\n};\n\nexport function __wbg_debug_7be7a5cabff29e7a(arg0, arg1) {\n    getObject(arg0).debug(getObject(arg1));\n};\n\nexport function __wbg_info_b9011639ae790fb7(arg0, arg1) {\n    getObject(arg0).info(getObject(arg1));\n};\n\nexport function __wbg_warn_8071ed4fdd3f9f0b(arg0, arg1) {\n    getObject(arg0).warn(getObject(arg1));\n};\n\nexport function __wbg_error_aa8b7900fa597371(arg0, arg1) {\n    getObject(arg0).error(getObject(arg1));\n};\n\nexport function __wbg_now_b7a162010a9e75b4() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_String_b9412f8799faab3e(arg0, arg1) {\n    const ret = String(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_key_37c613728ba0b769() { return handleError(function (arg0) {\n    const ret = getObject(arg0).key;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_transaction_66168ca19ab39a78() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).transaction(getObject(arg1), [\"readonly\",\"readwrite\",\"versionchange\",\"readwriteflush\",\"cleanup\",][arg2]);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_name_fe926223443dc728(arg0, arg1) {\n    const ret = getObject(arg1).name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_message_b477ea215924b777(arg0, arg1) {\n    const ret = getObject(arg1).message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_code_4a4b2516783729c7(arg0) {\n    const ret = getObject(arg0).code;\n    return ret;\n};\n\nexport function __wbg_getAllKeys_404d5487a041555d() { return handleError(function (arg0) {\n    const ret = getObject(arg0).getAllKeys();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_getAll_cf97564e37784cbe() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).getAll(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_lowerBound_94d1c4a44fcc36a9() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(getObject(arg0), arg1 !== 0);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_openCursor_8ca06744434102da() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).openCursor(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_bound_f24ae26594f11d12() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(getObject(arg0), getObject(arg1), arg2 !== 0, arg3 !== 0);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_getAll_e51dc29fdf0c6915() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).getAll(getObject(arg1), arg2 >>> 0);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_index_c90226e82bd94b45() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).index(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_count_bb99b5211d93738d() { return handleError(function (arg0) {\n    const ret = getObject(arg0).count();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_openCursor_3e5f2356f0515f34() { return handleError(function (arg0) {\n    const ret = getObject(arg0).openCursor();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_update_375c91f2a290ec51() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).update(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_get_b51eae1c0542125a() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).get(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_getAll_789d8b6775c0f8de() { return handleError(function (arg0) {\n    const ret = getObject(arg0).getAll();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +getObject(arg0);\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = getObject(arg0) == getObject(arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = getObject(arg1);\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_then_95e6edc0f89b73b1(arg0, arg1) {\n    const ret = getObject(arg0).then(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_queueMicrotask_12a30234db4045d3(arg0) {\n    queueMicrotask(getObject(arg0));\n};\n\nexport function __wbg_queueMicrotask_48421b3cc9052b68(arg0) {\n    const ret = getObject(arg0).queueMicrotask;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_resolve_570458cb99d56a43(arg0) {\n    const ret = Promise.resolve(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_target_b7cb1739bee70928(arg0) {\n    const ret = getObject(arg0).target;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nexport function __wbg_continue_a92b4c9f17458897() { return handleError(function (arg0) {\n    getObject(arg0).continue();\n}, arguments) };\n\nexport function __wbg_delete_fbab4d55ffb8712b() { return handleError(function (arg0) {\n    const ret = getObject(arg0).delete();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_value_d4be628e515b251f() { return handleError(function (arg0) {\n    const ret = getObject(arg0).value;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_deleteObjectStore_745da9b507613eca() { return handleError(function (arg0, arg1, arg2) {\n    getObject(arg0).deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_bound_8b7ae17c676052c7() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_count_7b9a7e71c616b931() { return handleError(function (arg0) {\n    const ret = getObject(arg0).count();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_delete_34764ece57bdc720() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).delete(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_get_88b5e79e9daccb9f() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).get(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_put_f83d95662936dee7() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).put(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_setonupgradeneeded_8f3f0ac5d7130a6f(arg0, arg1) {\n    getObject(arg0).onupgradeneeded = getObject(arg1);\n};\n\nexport function __wbg_result_fd2dae625828961d() { return handleError(function (arg0) {\n    const ret = getObject(arg0).result;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_error_1221bc1f1d0b14d3() { return handleError(function (arg0) {\n    const ret = getObject(arg0).error;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_setonsuccess_962c293b6e38a5d5(arg0, arg1) {\n    getObject(arg0).onsuccess = getObject(arg1);\n};\n\nexport function __wbg_setonerror_bd61d0a61808ca40(arg0, arg1) {\n    getObject(arg0).onerror = getObject(arg1);\n};\n\nexport function __wbg_oldVersion_74205b5e4698efc3(arg0) {\n    const ret = getObject(arg0).oldVersion;\n    return ret;\n};\n\nexport function __wbg_now_abd80e969af37148(arg0) {\n    const ret = getObject(arg0).now();\n    return ret;\n};\n\nexport function __wbg_performance_a1b8bde2ee512264(arg0) {\n    const ret = getObject(arg0).performance;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper1049(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 30, __wbg_adapter_56);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper2208(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 405, __wbg_adapter_59);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper5361(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 405, __wbg_adapter_62);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper6806(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 411, __wbg_adapter_65);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper6808(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 411, __wbg_adapter_68);\n    return addHeapObject(ret);\n};\n\n","// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entrypoint on non-node ESM environments.\n * `asyncLoad` will load the WASM module using a `fetch` call.\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\nconst moduleUrl = new URL(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\", import.meta.url);\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync() {\n    const { instance } = await WebAssembly.instantiateStreaming(fetch(moduleUrl), {\n        // @ts-expect-error: The bindings don't exactly match the 'ExportValue' type\n        \"./matrix_sdk_crypto_wasm_bg.js\": bindings,\n    });\n\n    bindings.__wbg_set_wasm(instance.exports);\n    // @ts-expect-error: Typescript doesn't know what the module exports are\n    instance.exports.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @returns {Promise<void>}\n */\nexport async function initAsync() {\n    if (!modPromise) modPromise = loadModuleAsync();\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n"],"names":["wasm","__wbg_set_wasm","val","lTextDecoder","cachedTextDecoder","cachedUint8ArrayMemory0","getUint8ArrayMemory0","getStringFromWasm0","ptr","len","heap","heap_next","addHeapObject","obj","idx","getObject","isLikeNone","x","cachedDataViewMemory0","getDataViewMemory0","WASM_VECTOR_LEN","lTextEncoder","cachedTextEncoder","encodeString","arg","view","buf","passStringToWasm0","malloc","realloc","mem","offset","code","ret","dropObject","takeObject","debugString","type","description","name","length","debug","i","builtInMatches","className","CLOSURE_DTORS","state","makeMutClosure","arg0","arg1","dtor","f","real","args","a","__wbg_adapter_56","arg2","retptr","r0","r1","__wbg_adapter_59","__wbg_adapter_62","makeClosure","__wbg_adapter_65","__wbg_adapter_68","passArray8ToWasm0","_assertClass","instance","klass","getArrayU8FromWasm0","passArrayJsValueToWasm0","array","stack_pointer","addBorrowedObject","getArrayJsValueFromWasm0","result","cachedUint16ArrayMemory0","getUint16ArrayMemory0","getArrayU16FromWasm0","getVersions","Versions","start","handleError","e","__wbg_adapter_748","arg3","HistoryVisibility","LoggerLevel","VerificationRequestPhase","VerificationMethod","QrState","SignatureState","EncryptionAlgorithm","LocalTrust","DeviceKeyAlgorithmName","DecryptionErrorCode","QrCodeMode","TrustRequirement","ShieldColor","DeviceKeyName","RequestType","ShieldStateCode","AttachmentFinalization","Attachment","ptr0","len0","r2","EncryptedAttachment","attachment","r3","v1","BackupDecryptionKeyFinalization","BackupDecryptionKey","key","MegolmV1BackupKey","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","ptr4","len4","BackupKeysFinalization","BackupKeys","BackupSecretsBundleFinalization","BackupSecretsBundle","deferred1_0","deferred1_1","BaseMigrationDataFinalization","BaseMigrationData","UserId","DeviceId","CancelInfoFinalization","CancelInfo","CheckCodeFinalization","CheckCode","CollectStrategyFinalization","CollectStrategy","other","only_allow_trusted_devices","error_on_verified_user_problem","CrossSigningBootstrapRequestsFinalization","CrossSigningBootstrapRequests","UploadSigningKeysRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","CrossSigningKeyExport","CrossSigningStatusFinalization","CrossSigningStatus","Curve25519PublicKeyFinalization","Curve25519PublicKey","DecryptedRoomEventFinalization","DecryptedRoomEvent","strict","ShieldState","DecryptionSettingsFinalization","DecryptionSettings","sender_device_trust_requirement","DehydratedDeviceFinalization","DehydratedDevice","initial_device_display_name","pickle_key","DehydratedDevicesFinalization","DehydratedDevices","device_id","device_data","DeviceFinalization","Device","methods","event_type","content","local_state","algorithm","DeviceKey","Ed25519PublicKey","Signatures","DeviceIdFinalization","id","DeviceKeyFinalization","DeviceKeyAlgorithmFinalization","DeviceKeyAlgorithm","DeviceKeyIdFinalization","DeviceKeyId","DeviceListsFinalization","DeviceLists","changed","left","EciesFinalization","Ecies","initial_message","InboundCreationResult","public_key","OutboundCreationResult","Ed25519PublicKeyFinalization","Ed25519SignatureFinalization","Ed25519Signature","signature","EmojiFinalization","Emoji","EncryptedAttachmentFinalization","encrypted_data","media_encryption_info","EncryptionInfoFinalization","EncryptionInfo","EncryptionSettingsFinalization","EncryptionSettings","EstablishedEciesFinalization","EstablishedEcies","message","deferred2_0","deferred2_1","deferred3_0","deferred3_1","EventIdFinalization","EventId","ServerName","IdentityKeysFinalization","IdentityKeys","InboundCreationResultFinalization","InboundGroupSessionFinalization","InboundGroupSession","RoomId","KeysBackupRequestFinalization","KeysBackupRequest","body","version","KeysClaimRequestFinalization","KeysClaimRequest","KeysQueryRequestFinalization","KeysQueryRequest","KeysUploadRequestFinalization","KeysUploadRequest","MaybeSignatureFinalization","MaybeSignature","Signature","MegolmDecryptionErrorFinalization","MegolmDecryptionError","MegolmV1BackupKeyFinalization","MigrationFinalization","Migration","data","store_handle","StoreHandle","sessions","OlmMachineFinalization","OlmMachine","user_id","store_name","store_passphrase","enabled","users","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","request_id","request_type","response","room_id","event","decryption_settings","bundle","SecretsBundle","master_key","self_signing_key","user_signing_key","reset","encryption_settings","timeout_secs","flow_id","VerificationRequest","predicate","exported_room_keys","progress_listener","backed_up_room_keys","backup_version","decryption_key","backup_info","public_key_base_64","passphrase","rounds","deferred4_0","deferred4_1","ptr3","len3","encrypted_exported_room_keys","callback","secret_name","room_settings","RoomSettings","OtherUserIdentityFinalization","OtherUserIdentity","request_event_id","OutboundCreationResultFinalization","OwnUserIdentityFinalization","OwnUserIdentity","PickledInboundGroupSessionFinalization","PickledInboundGroupSession","jsValue","PickledSessionFinalization","PickledSession","PutDehydratedDeviceRequestFinalization","PutDehydratedDeviceRequest","QrFinalization","Qr","QrCode","QrCodeFinalization","QrCodeDataFinalization","QrCodeData","rendezvous_url","server_name","bytes","QrCodeScanFinalization","QrCodeScan","buffer","RehydratedDeviceFinalization","RehydratedDevice","RoomIdFinalization","RoomKeyCountsFinalization","RoomKeyCounts","RoomKeyImportResultFinalization","RoomKeyImportResult","RoomKeyInfoFinalization","RoomKeyInfo","RoomKeyWithheldInfoFinalization","RoomKeyWithheldInfo","RoomMessageRequestFinalization","RoomMessageRequest","txn_id","RoomSettingsFinalization","SasFinalization","Sas","SecretsBundleFinalization","json","ServerNameFinalization","ShieldStateFinalization","SignatureFinalization","SignatureUploadRequestFinalization","signed_keys","SignatureVerificationFinalization","SignatureVerification","SignaturesFinalization","signer","key_id","StoreHandleFinalization","store_key","ToDeviceRequestFinalization","ToDeviceRequest","TracingFinalization","Tracing","min_level","UploadSigningKeysRequestFinalization","UserDevicesFinalization","UserDevices","UserIdFinalization","VerificationRequestFinalization","own_user_id","own_device_id","other_user_id","VersionsFinalization","__wbindgen_error_new","__wbg_length_ae22078168b726f5","__wbg_iterator_888179a48810a9fe","__wbg_from_0791d740a9d37830","__wbg_at_5fa66069579ac579","__wbindgen_is_undefined","__wbindgen_in","__wbindgen_number_get","__wbindgen_boolean_get","v","__wbindgen_string_get","__wbindgen_is_bigint","__wbindgen_is_object","__wbindgen_number_new","__wbindgen_try_into_number","__wbg_userid_unwrap","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbg_setTimeout_7d81d052875b0f4f","__wbg_transaction_0549f2d854da77a6","__wbg_createIndex_8420e89baab0736f","__wbg_objectStoreNames_2fc72464aff4baed","__wbg_new_525245e2b9901204","__wbg_setunique_6f46c3f803001492","__wbindgen_string_new","__wbg_add_4d2791d6295ba9ec","__wbg_getwithrefkey_edc2c8960f0f1191","__wbg_set_f975102236d3c502","__wbg_version_85aa50b42026873e","__wbg_close_7bef29d1d5feecdb","__wbindgen_object_clone_ref","__wbindgen_is_array","__wbg_parse_52202f117ec9ecfa","__wbg_dehydrateddevice_new","__wbg_new_b85e72ed1bfd57f9","state0","cb0","__wbg_new_0d215095f6a3600f","__wbg_roomsettings_new","__wbg_putdehydrateddevicerequest_new","__wbg_pickledsession_unwrap","__wbg_rehydrateddevice_new","__wbg_pickledinboundgroupsession_unwrap","__wbg_secretsbundle_new","__wbindgen_cb_drop","__wbg_setonblocked_554fa1541fe66a16","__wbg_clearTimeout_541ac0980ffcef74","__wbindgen_object_drop_ref","__wbg_setonversionchange_b1a0928064e9b758","__wbg_new_a220cf903aa02ca2","__wbg_roomkeyinfo_new","__wbg_push_37c89022f34c01ca","__wbg_roomkeyimportresult_new","__wbg_userid_new","__wbg_crosssigningstatus_new","__wbindgen_jsval_eq","__wbg_String_88810dfeb4021902","__wbg_storehandle_new","__wbg_encryptioninfo_new","__wbg_userdevices_new","__wbg_crosssigningbootstraprequests_new","__wbg_ownuseridentity_new","__wbg_otheruseridentity_new","__wbg_signatureverification_new","__wbg_keysbackuprequest_new","__wbg_inboundgroupsession_new","__wbg_backupkeys_new","__wbg_signatures_new","__wbg_roomkeycounts_new","__wbg_crosssigningkeyexport_new","__wbg_set_673dda6c73d19609","__wbg_call_7de908392845a9a5","arg4","__wbg_decryptedroomevent_new","__wbg_megolmdecryptionerror_new","__wbg_getTime_91058879093a1589","__wbg_roomkeywithheldinfo_new","__wbg_then_876bb3c633745cc6","__wbg_keysuploadrequest_new","__wbg_keysqueryrequest_new","__wbg_device_new","__wbg_new_8608a2b51a5f6737","__wbg_devicekeyid_new","__wbg_devicekey_new","__wbg_set_49185437f0ab06f8","__wbg_deviceid_new","__wbg_new_7982fb43cfca37ae","__wbg_olmmachine_new","__wbg_entries_2f5ddf03b53c6730","__wbg_values_fb3a48a5a8c681f6","__wbg_get_3baa728f9d58d3f6","__wbg_roomid_unwrap","__wbindgen_is_string","__wbg_getwithrefkey_5e6d9547403deab8","__wbg_keysclaimrequest_new","__wbg_todevicerequest_new","__wbg_signatureuploadrequest_new","__wbg_roommessagerequest_new","__wbg_set_841ac57cff3d672b","__wbg_maybesignature_new","__wbg_sas_new","__wbg_emoji_new","__wbg_qr_new","__wbg_newwithlength_dfb862b757677cfc","__wbg_length_701cb851fad911df","__wbindgen_memory","__wbg_buffer_b7b08af79b0b0974","__wbg_new_e36b5ccdd852e18d","__wbg_set_b68cc6ecd92a1101","__wbg_verificationrequest_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","__wbg_subarray_7c2e3576afe181d1","__wbg_getRandomValues_3aa56aa6edec874c","__wbg_newwithbyteoffsetandlength_8a2cb9ca96b27ec9","__wbg_randomFillSync_5c9c955aa56b6049","__wbg_crypto_1d1f22824a6a080c","__wbg_process_4a72847cc503995b","__wbg_versions_f686565e586dd935","__wbg_node_104a2ff8d6ea03a2","__wbg_require_cca90b1a94a0255b","__wbg_msCrypto_eb05e62b530a1508","__wbg_newwithlength_ec548f448387c968","__wbg_open_a89af1720976a433","__wbg_Window_6a2291ac118902bc","__wbg_indexedDB_1f9ee79bddf7d011","__wbg_WorkerGlobalScope_e82ddd4027f19bb8","__wbg_indexedDB_9d299adf9543d0c3","__wbg_global_12bfcc55465b53ad","__wbg_indexedDB_59bf81be2abc635d","__wbg_open_e8f45f3526088828","__wbg_setoncomplete_a9e0ec1d6568a6d9","__wbg_setonerror_00500154a07e987d","__wbg_setonabort_aedc77f0151af20c","__wbg_transaction_5a1543682e4ad921","__wbg_createObjectStore_190c19a0bae3fedb","__wbg_clear_324ffb9a7c18a41c","__wbg_createIndex_6d4c3e20ee0f1066","__wbg_newwithmessage_7beb619ae81d7cb1","__wbg_objectStore_80724f9f6d33ab5b","__wbg_readyState_80e6a6c7d538fa33","__wbindgen_is_null","__wbg_item_5a55aebc84c52f29","__wbg_openCursor_728ede41c2e2d7ec","__wbindgen_is_function","__wbg_call_1084a111329e68ce","__wbg_next_f9cb570345655b9a","__wbg_done_bfda7aa8f252b39f","__wbg_value_6d39332ab4788d86","__wbg_get_224d16597dbbfd96","__wbg_next_de3e9db4440638b2","__wbg_self_3093d5d1f7bcb682","__wbg_window_3bcfc4d31bc012f8","__wbg_globalThis_86b222e13bdf32ed","__wbg_global_e5a3fe56f8be9485","__wbg_newnoargs_76313bd6ff35d0f2","__wbg_isArray_8364a5371e9737d8","__wbg_instanceof_ArrayBuffer_61dfc3198373c902","__wbg_call_89af060b4e1523f2","__wbg_call_c6fe275aaa60da79","__wbg_instanceof_Map_763ce0e95960d55e","__wbg_isSafeInteger_7f1ed56200d90674","__wbg_entries_7a0e06255456ebcd","__wbg_add_653baf3821a15934","__wbg_stringify_bbf45426c92a6bf5","__wbg_instanceof_Promise_ae8c7ffdec83f2ae","__wbg_new_ea1883e1e5e86686","__wbg_set_d1e79e2388520f18","__wbg_length_8339fcf5d8ecd12e","__wbg_newwithbyteoffsetandlength_94126d2ad22a595c","__wbg_instanceof_Uint8Array_247a91427532499e","__wbg_debug_5a33c41aeac15ee6","__wbg_info_c261acb2deacd903","__wbg_warn_2b3adb99ce26c314","__wbg_error_09480e4aadca50ad","__wbg_debug_7be7a5cabff29e7a","__wbg_info_b9011639ae790fb7","__wbg_warn_8071ed4fdd3f9f0b","__wbg_error_aa8b7900fa597371","__wbg_now_b7a162010a9e75b4","__wbg_String_b9412f8799faab3e","__wbg_key_37c613728ba0b769","__wbg_transaction_66168ca19ab39a78","__wbg_name_fe926223443dc728","__wbg_message_b477ea215924b777","__wbg_code_4a4b2516783729c7","__wbg_getAllKeys_404d5487a041555d","__wbg_getAll_cf97564e37784cbe","__wbg_lowerBound_94d1c4a44fcc36a9","__wbg_openCursor_8ca06744434102da","__wbg_bound_f24ae26594f11d12","__wbg_getAll_e51dc29fdf0c6915","__wbg_index_c90226e82bd94b45","__wbg_count_bb99b5211d93738d","__wbg_openCursor_3e5f2356f0515f34","__wbg_update_375c91f2a290ec51","__wbg_get_b51eae1c0542125a","__wbg_getAll_789d8b6775c0f8de","__wbindgen_as_number","__wbindgen_jsval_loose_eq","__wbindgen_throw","__wbindgen_bigint_get_as_i64","__wbindgen_debug_string","__wbg_then_95e6edc0f89b73b1","__wbg_queueMicrotask_12a30234db4045d3","__wbg_queueMicrotask_48421b3cc9052b68","__wbg_resolve_570458cb99d56a43","__wbg_target_b7cb1739bee70928","__wbg_continue_a92b4c9f17458897","__wbg_delete_fbab4d55ffb8712b","__wbg_value_d4be628e515b251f","__wbg_deleteObjectStore_745da9b507613eca","__wbg_bound_8b7ae17c676052c7","__wbg_count_7b9a7e71c616b931","__wbg_delete_34764ece57bdc720","__wbg_get_88b5e79e9daccb9f","__wbg_put_f83d95662936dee7","__wbg_setonupgradeneeded_8f3f0ac5d7130a6f","__wbg_result_fd2dae625828961d","__wbg_error_1221bc1f1d0b14d3","__wbg_setonsuccess_962c293b6e38a5d5","__wbg_setonerror_bd61d0a61808ca40","__wbg_oldVersion_74205b5e4698efc3","__wbg_now_abd80e969af37148","__wbg_performance_a1b8bde2ee512264","__wbindgen_closure_wrapper1049","__wbindgen_closure_wrapper2208","__wbindgen_closure_wrapper5361","__wbindgen_closure_wrapper6806","__wbindgen_closure_wrapper6808","moduleUrl","bindings.__wbg_set_wasm","modPromise","loadModuleAsync","bindings","initAsync"],"mappings":"AAAA,IAAIA,EACG,SAASC,GAAeC,EAAK,CAChCF,EAAOE,CACX,CAGA,MAAMC,GAAe,OAAO,YAAgB,OAAkB,OAAO,SAAS,MAAM,EAAE,YAAc,YAEpG,IAAIC,GAAoB,IAAID,GAAa,QAAS,CAAE,UAAW,GAAM,MAAO,GAAM,EAElFC,GAAkB,OAAQ,EAE1B,IAAIC,GAA0B,KAE9B,SAASC,GAAuB,CAC5B,OAAID,KAA4B,MAAQA,GAAwB,aAAe,KAC3EA,GAA0B,IAAI,WAAWL,EAAK,OAAO,MAAM,GAExDK,EACX,CAEA,SAASE,EAAmBC,EAAKC,EAAK,CAClC,OAAAD,EAAMA,IAAQ,EACPJ,GAAkB,OAAOE,EAAsB,EAAC,SAASE,EAAKA,EAAMC,CAAG,CAAC,CACnF,CAEA,MAAMC,EAAO,IAAI,MAAM,GAAG,EAAE,KAAK,MAAS,EAE1CA,EAAK,KAAK,OAAW,KAAM,GAAM,EAAK,EAEtC,IAAIC,EAAYD,EAAK,OAErB,SAASE,EAAcC,EAAK,CACpBF,IAAcD,EAAK,QAAQA,EAAK,KAAKA,EAAK,OAAS,CAAC,EACxD,MAAMI,EAAMH,EACZ,OAAAA,EAAYD,EAAKI,CAAG,EAEpBJ,EAAKI,CAAG,EAAID,EACLC,CACX,CAEA,SAASC,EAAUD,EAAK,CAAE,OAAOJ,EAAKI,CAAG,CAAE,CAE3C,SAASE,EAAWC,EAAG,CACnB,OAA0BA,GAAM,IACpC,CAEA,IAAIC,EAAwB,KAE5B,SAASC,GAAqB,CAC1B,OAAID,IAA0B,MAAQA,EAAsB,OAAO,WAAa,IAASA,EAAsB,OAAO,WAAa,QAAaA,EAAsB,SAAWlB,EAAK,OAAO,UACzLkB,EAAwB,IAAI,SAASlB,EAAK,OAAO,MAAM,GAEpDkB,CACX,CAEA,IAAIE,EAAkB,EAEtB,MAAMC,GAAe,OAAO,YAAgB,OAAkB,OAAO,SAAS,MAAM,EAAE,YAAc,YAEpG,IAAIC,GAAoB,IAAID,GAAa,OAAO,EAEhD,MAAME,GAAgB,OAAOD,GAAkB,YAAe,WACxD,SAAUE,EAAKC,EAAM,CACvB,OAAOH,GAAkB,WAAWE,EAAKC,CAAI,CACjD,EACM,SAAUD,EAAKC,EAAM,CACvB,MAAMC,EAAMJ,GAAkB,OAAOE,CAAG,EACxC,OAAAC,EAAK,IAAIC,CAAG,EACL,CACH,KAAMF,EAAI,OACV,QAASE,EAAI,MAChB,CACL,EAEA,SAASC,EAAkBH,EAAKI,EAAQC,EAAS,CAE7C,GAAIA,IAAY,OAAW,CACvB,MAAMH,EAAMJ,GAAkB,OAAOE,CAAG,EAClChB,EAAMoB,EAAOF,EAAI,OAAQ,CAAC,IAAM,EACtC,OAAApB,EAAsB,EAAC,SAASE,EAAKA,EAAMkB,EAAI,MAAM,EAAE,IAAIA,CAAG,EAC9DN,EAAkBM,EAAI,OACflB,CACf,CAEI,IAAIC,EAAMe,EAAI,OACVhB,EAAMoB,EAAOnB,EAAK,CAAC,IAAM,EAE7B,MAAMqB,EAAMxB,EAAsB,EAElC,IAAIyB,EAAS,EAEb,KAAOA,EAAStB,EAAKsB,IAAU,CAC3B,MAAMC,EAAOR,EAAI,WAAWO,CAAM,EAClC,GAAIC,EAAO,IAAM,MACjBF,EAAItB,EAAMuB,CAAM,EAAIC,CAC5B,CAEI,GAAID,IAAWtB,EAAK,CACZsB,IAAW,IACXP,EAAMA,EAAI,MAAMO,CAAM,GAE1BvB,EAAMqB,EAAQrB,EAAKC,EAAKA,EAAMsB,EAASP,EAAI,OAAS,EAAG,CAAC,IAAM,EAC9D,MAAMC,EAAOnB,IAAuB,SAASE,EAAMuB,EAAQvB,EAAMC,CAAG,EAC9DwB,EAAMV,GAAaC,EAAKC,CAAI,EAElCM,GAAUE,EAAI,QACdzB,EAAMqB,EAAQrB,EAAKC,EAAKsB,EAAQ,CAAC,IAAM,CAC/C,CAEI,OAAAX,EAAkBW,EACXvB,CACX,CAEA,SAAS0B,GAAWpB,EAAK,CACjBA,EAAM,MACVJ,EAAKI,CAAG,EAAIH,EACZA,EAAYG,EAChB,CAEA,SAASqB,EAAWrB,EAAK,CACrB,MAAMmB,EAAMlB,EAAUD,CAAG,EACzB,OAAAoB,GAAWpB,CAAG,EACPmB,CACX,CAEA,SAASG,GAAYlC,EAAK,CAEtB,MAAMmC,EAAO,OAAOnC,EACpB,GAAImC,GAAQ,UAAYA,GAAQ,WAAanC,GAAO,KAChD,MAAQ,GAAGA,CAAG,GAElB,GAAImC,GAAQ,SACR,MAAO,IAAInC,CAAG,IAElB,GAAImC,GAAQ,SAAU,CAClB,MAAMC,EAAcpC,EAAI,YACxB,OAAIoC,GAAe,KACR,SAEA,UAAUA,CAAW,GAExC,CACI,GAAID,GAAQ,WAAY,CACpB,MAAME,EAAOrC,EAAI,KACjB,OAAI,OAAOqC,GAAQ,UAAYA,EAAK,OAAS,EAClC,YAAYA,CAAI,IAEhB,UAEnB,CAEI,GAAI,MAAM,QAAQrC,CAAG,EAAG,CACpB,MAAMsC,EAAStC,EAAI,OACnB,IAAIuC,EAAQ,IACRD,EAAS,IACTC,GAASL,GAAYlC,EAAI,CAAC,CAAC,GAE/B,QAAQwC,EAAI,EAAGA,EAAIF,EAAQE,IACvBD,GAAS,KAAOL,GAAYlC,EAAIwC,CAAC,CAAC,EAEtC,OAAAD,GAAS,IACFA,CACf,CAEI,MAAME,EAAiB,sBAAsB,KAAK,SAAS,KAAKzC,CAAG,CAAC,EACpE,IAAI0C,EACJ,GAAID,EAAe,OAAS,EACxBC,EAAYD,EAAe,CAAC,MAG5B,QAAO,SAAS,KAAKzC,CAAG,EAE5B,GAAI0C,GAAa,SAIb,GAAI,CACA,MAAO,UAAY,KAAK,UAAU1C,CAAG,EAAI,GAC5C,MAAW,CACR,MAAO,QACnB,CAGI,OAAIA,aAAe,MACR,GAAGA,EAAI,IAAI,KAAKA,EAAI,OAAO;AAAA,EAAKA,EAAI,KAAK,GAG7C0C,CACX,CAEA,MAAMC,GAAiB,OAAO,qBAAyB,IACjD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBC,GAAS,CACpC9C,EAAK,oBAAoB,IAAI8C,EAAM,IAAI,EAAEA,EAAM,EAAGA,EAAM,CAAC,CAC7D,CAAC,EAED,SAASC,GAAeC,EAAMC,EAAMC,EAAMC,EAAG,CACzC,MAAML,EAAQ,CAAE,EAAGE,EAAM,EAAGC,EAAM,IAAK,EAAG,KAAAC,CAAM,EAC1CE,EAAO,IAAIC,IAAS,CAItBP,EAAM,MACN,MAAMQ,EAAIR,EAAM,EAChBA,EAAM,EAAI,EACV,GAAI,CACA,OAAOK,EAAEG,EAAGR,EAAM,EAAG,GAAGO,CAAI,CACxC,QAAkB,CACF,EAAEP,EAAM,MAAQ,GAChB9C,EAAK,oBAAoB,IAAI8C,EAAM,IAAI,EAAEQ,EAAGR,EAAM,CAAC,EACnDD,GAAc,WAAWC,CAAK,GAE9BA,EAAM,EAAIQ,CAE1B,CACK,EACD,OAAAF,EAAK,SAAWN,EAChBD,GAAc,SAASO,EAAMN,EAAOA,CAAK,EAClCM,CACX,CACA,SAASG,GAAiBP,EAAMC,EAAMO,EAAM,CACxC,GAAI,CACA,MAAMC,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,6HAA6HyD,EAAQT,EAAMC,EAAMrC,EAAc4C,CAAI,CAAC,EACzK,IAAIE,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIE,EACA,MAAMxB,EAAWuB,CAAE,CAE/B,QAAc,CACN1D,EAAK,gCAAgC,EAAE,CAC/C,CACA,CAEA,SAAS4D,GAAiBZ,EAAMC,EAAM,CAClCjD,EAAK,2HAA2HgD,EAAMC,CAAI,CAC9I,CAEA,SAASY,GAAiBb,EAAMC,EAAMO,EAAM,CACxCxD,EAAK,6HAA6HgD,EAAMC,EAAMrC,EAAc4C,CAAI,CAAC,CACrK,CAEA,SAASM,GAAYd,EAAMC,EAAMC,EAAMC,EAAG,CACtC,MAAML,EAAQ,CAAE,EAAGE,EAAM,EAAGC,EAAM,IAAK,EAAG,KAAAC,CAAM,EAC1CE,EAAO,IAAIC,IAAS,CAItBP,EAAM,MACN,GAAI,CACA,OAAOK,EAAEL,EAAM,EAAGA,EAAM,EAAG,GAAGO,CAAI,CAC9C,QAAkB,CACF,EAAEP,EAAM,MAAQ,IAChB9C,EAAK,oBAAoB,IAAI8C,EAAM,IAAI,EAAEA,EAAM,EAAGA,EAAM,CAAC,EACzDA,EAAM,EAAI,EACVD,GAAc,WAAWC,CAAK,EAE9C,CACK,EACD,OAAAM,EAAK,SAAWN,EAChBD,GAAc,SAASO,EAAMN,EAAOA,CAAK,EAClCM,CACX,CACA,SAASW,GAAiBf,EAAMC,EAAM,CAClCjD,EAAK,wHAAwHgD,EAAMC,CAAI,CAC3I,CAEA,SAASe,GAAiBhB,EAAMC,EAAMO,EAAM,CACxCxD,EAAK,0HAA0HgD,EAAMC,EAAMrC,EAAc4C,CAAI,CAAC,CAClK,CAEA,SAASS,GAAkBzC,EAAKI,EAAQ,CACpC,MAAMpB,EAAMoB,EAAOJ,EAAI,OAAS,EAAG,CAAC,IAAM,EAC1C,OAAAlB,EAAsB,EAAC,IAAIkB,EAAKhB,EAAM,CAAC,EACvCY,EAAkBI,EAAI,OACfhB,CACX,CAEA,SAAS0D,EAAaC,EAAUC,EAAO,CACnC,GAAI,EAAED,aAAoBC,GACtB,MAAM,IAAI,MAAM,wBAAwBA,EAAM,IAAI,EAAE,EAExD,OAAOD,EAAS,GACpB,CAEA,SAASE,EAAoB7D,EAAKC,EAAK,CACnC,OAAAD,EAAMA,IAAQ,EACPF,EAAsB,EAAC,SAASE,EAAM,EAAGA,EAAM,EAAIC,CAAG,CACjE,CAEA,SAAS6D,EAAwBC,EAAO3C,EAAQ,CAC5C,MAAMpB,EAAMoB,EAAO2C,EAAM,OAAS,EAAG,CAAC,IAAM,EACtCzC,EAAMX,EAAoB,EAChC,QAAS,EAAI,EAAG,EAAIoD,EAAM,OAAQ,IAC9BzC,EAAI,UAAUtB,EAAM,EAAI,EAAGI,EAAc2D,EAAM,CAAC,CAAC,EAAG,EAAI,EAE5D,OAAAnD,EAAkBmD,EAAM,OACjB/D,CACX,CAEA,IAAIgE,EAAgB,IAEpB,SAASC,GAAkB5D,EAAK,CAC5B,GAAI2D,GAAiB,EAAG,MAAM,IAAI,MAAM,iBAAiB,EACzD,OAAA9D,EAAK,EAAE8D,CAAa,EAAI3D,EACjB2D,CACX,CAEA,SAASE,EAAyBlE,EAAKC,EAAK,CACxCD,EAAMA,IAAQ,EACd,MAAMsB,EAAMX,EAAoB,EAC1BwD,EAAS,CAAE,EACjB,QAAS,EAAInE,EAAK,EAAIA,EAAM,EAAIC,EAAK,GAAK,EACtCkE,EAAO,KAAKxC,EAAWL,EAAI,UAAU,EAAG,EAAI,CAAC,CAAC,EAElD,OAAO6C,CACX,CAEA,IAAIC,GAA2B,KAE/B,SAASC,IAAwB,CAC7B,OAAID,KAA6B,MAAQA,GAAyB,aAAe,KAC7EA,GAA2B,IAAI,YAAY5E,EAAK,OAAO,MAAM,GAE1D4E,EACX,CAEA,SAASE,GAAqBtE,EAAKC,EAAK,CACpC,OAAAD,EAAMA,IAAQ,EACPqE,GAAuB,EAAC,SAASrE,EAAM,EAAGA,EAAM,EAAIC,CAAG,CAClE,CAKO,SAASsE,IAAc,CAC1B,MAAM9C,EAAMjC,EAAK,YAAa,EAC9B,OAAOgF,GAAS,OAAO/C,CAAG,CAC9B,CASO,SAASgD,IAAQ,CACpBjF,EAAK,MAAO,CAChB,CAEA,SAASkF,EAAY/B,EAAGE,EAAM,CAC1B,GAAI,CACA,OAAOF,EAAE,MAAM,KAAME,CAAI,CAC5B,OAAQ8B,EAAG,CACRnF,EAAK,qBAAqBY,EAAcuE,CAAC,CAAC,CAClD,CACA,CACA,SAASC,GAAkBpC,EAAMC,EAAMO,EAAM6B,EAAM,CAC/CrF,EAAK,gEAAgEgD,EAAMC,EAAMrC,EAAc4C,CAAI,EAAG5C,EAAcyE,CAAI,CAAC,CAC7H,CAKY,MAACC,GAAoB,OAAO,OAAO,CAQ/C,QAAQ,EAAE,EAAI,UAQd,OAAO,EAAE,EAAI,SAOb,OAAO,EAAE,EAAI,SAMb,cAAc,EAAE,EAAI,eAAkB,CAAA,EAIzBC,GAAc,OAAO,OAAO,CAOzC,MAAM,EAAE,EAAI,QAMZ,MAAM,EAAE,EAAI,QAMZ,KAAK,EAAE,EAAI,OAMX,KAAK,EAAE,EAAI,OAMX,MAAM,EAAE,EAAI,OAAU,CAAA,EAITC,GAA2B,OAAO,OAAO,CAItD,QAAQ,EAAE,EAAI,UAId,UAAU,EAAE,EAAI,YAIhB,MAAM,EAAE,EAAI,QAMZ,aAAa,EAAE,EAAI,eAInB,KAAK,EAAE,EAAI,OAIX,UAAU,EAAE,EAAI,WAAc,CAAA,EAIjBC,GAAqB,OAAO,OAAO,CAMhD,MAAM,EAAE,EAAI,QAIZ,aAAa,EAAE,EAAI,eAInB,aAAa,EAAE,EAAI,eAInB,cAAc,EAAE,EAAI,eAAkB,CAAA,EAIzBC,GAAU,OAAO,OAAO,CAOrC,QAAQ,EAAE,EAAI,UAMd,QAAQ,EAAE,EAAI,UAKd,UAAU,EAAE,EAAI,YAUhB,aAAa,EAAE,EAAI,eAKnB,KAAK,EAAE,EAAI,OAIX,UAAU,EAAE,EAAI,WAAc,CAAA,EAIjBC,GAAiB,OAAO,OAAO,CAI5C,QAAQ,EAAE,EAAI,UAId,QAAQ,EAAE,EAAI,UAKd,mBAAmB,EAAE,EAAI,qBAKzB,gBAAgB,EAAE,EAAI,kBAAoB,EAK7BC,GAAsB,OAAO,OAAO,CAIjD,uBAAuB,EAAE,EAAI,yBAI7B,gBAAgB,EAAE,EAAI,kBAOtB,QAAQ,EAAE,EAAI,SAAY,CAAA,EAIbC,GAAa,OAAO,OAAO,CAIxC,SAAS,EAAE,EAAI,WAIf,YAAY,EAAE,EAAI,cAIlB,QAAQ,EAAE,EAAI,UAId,MAAM,EAAE,EAAI,OAAU,CAAA,EAITC,GAAyB,OAAO,OAAO,CAIpD,QAAQ,EAAE,EAAI,UAId,WAAW,EAAE,EAAI,aAIjB,QAAQ,EAAE,EAAI,UAAY,EAIbC,GAAsB,OAAO,OAAO,CAIjD,eAAe,EAAE,EAAI,iBAIrB,oBAAoB,EAAE,EAAI,sBAM1B,uBAAuB,EAAE,EAAI,yBAI7B,oBAAoB,EAAE,EAAI,sBAI1B,qBAAqB,EAAE,EAAI,uBAI3B,oCAAoC,EAAE,EAAI,sCAI1C,gBAAgB,EAAE,EAAI,iBAAoB,CAAA,EAU7BC,GAAa,OAAO,OAAO,CAIxC,MAAM,EAAE,EAAI,QAIZ,YAAY,EAAE,EAAI,cAAgB,EAIrBC,GAAmB,OAAO,OAAO,CAI9C,UAAU,EAAE,EAAI,YAIhB,oBAAoB,EAAE,EAAI,sBAI1B,YAAY,EAAE,EAAI,aAAgB,CAAA,EAKrBC,GAAc,OAAO,OAAO,CAIzC,IAAI,EAAE,EAAI,MAIV,KAAK,EAAE,EAAI,OAIX,KAAK,EAAE,EAAI,MAAS,CAAA,EAQPC,GAAgB,OAAO,OAAO,CAI3C,WAAW,EAAE,EAAI,aAIjB,QAAQ,EAAE,EAAI,UAId,QAAQ,EAAE,EAAI,UAAY,EAIbC,GAAc,OAAO,OAAO,CAIzC,WAAW,EAAE,EAAI,aAIjB,UAAU,EAAE,EAAI,YAIhB,UAAU,EAAE,EAAI,YAIhB,SAAS,EAAE,EAAI,WAIf,gBAAgB,EAAE,EAAI,kBAItB,YAAY,EAAE,EAAI,cAIlB,WAAW,EAAE,EAAI,aAAe,EAInBC,GAAkB,OAAO,OAAO,CAI7C,0BAA0B,EAAE,EAAI,4BAIhC,cAAc,EAAE,EAAI,gBAIpB,eAAe,EAAE,EAAI,iBAIrB,mBAAmB,EAAE,EAAI,qBAIzB,YAAY,EAAE,EAAI,cAIlB,sBAAsB,EAAE,EAAI,uBAA0B,CAAA,EAEhDC,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9F,GAAOR,EAAK,sBAAsBQ,IAAQ,EAAG,CAAC,CAAC,EAKvE,MAAM+F,EAAW,CAEpB,oBAAqB,CACjB,MAAM/F,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8F,GAAuB,WAAW,IAAI,EAC/B9F,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,sBAAsBQ,EAAK,CAAC,CACzC,CAUI,OAAO,QAAQ+D,EAAO,CAClB,GAAI,CACA,MAAMd,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAOvC,GAAkBM,EAAOvE,EAAK,iBAAiB,EACtDyG,EAAOrF,EACbpB,EAAK,mBAAmByD,EAAQ+C,EAAMC,CAAI,EAC1C,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOgD,EAAoB,OAAOjD,CAAE,CAChD,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAeI,OAAO,QAAQ4G,EAAY,CACvB,GAAI,CACA,MAAMnD,EAASzD,EAAK,gCAAgC,GAAG,EACvDkE,EAAa0C,EAAYD,CAAmB,EAC5C3G,EAAK,mBAAmByD,EAAQmD,EAAW,SAAS,EACpD,IAAIlD,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIoD,EACA,MAAM1E,EAAWuE,CAAE,EAEvB,IAAII,EAAKzC,EAAoBX,EAAIC,CAAE,EAAE,MAAO,EAC5C,OAAA3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,EAC3BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CACA,CAEA,MAAM+G,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvG,GAAOR,EAAK,+BAA+BQ,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAMwG,CAAoB,CAE7B,OAAO,OAAOxG,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOmG,EAAoB,SAAS,EACvD,OAAAnG,EAAI,UAAYL,EAChBuG,GAAgC,SAASlG,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuG,GAAgC,WAAW,IAAI,EACxCvG,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,+BAA+BQ,EAAK,CAAC,CAClD,CAKI,OAAO,iBAAkB,CACrB,MAAMyB,EAAMjC,EAAK,oCAAqC,EACtD,OAAOgH,EAAoB,OAAO/E,CAAG,CAC7C,CAMI,OAAO,WAAWgF,EAAK,CACnB,GAAI,CACA,MAAMxD,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkBsF,EAAKjH,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EyG,EAAOrF,EACbpB,EAAK,+BAA+ByD,EAAQ+C,EAAMC,CAAI,EACtD,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOqD,EAAoB,OAAOtD,CAAE,CAChD,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,UAAW,CACP,MAAMiC,EAAMjC,EAAK,6BAA6B,KAAK,SAAS,EAC5D,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,mBAAoB,CACpB,MAAMA,EAAMjC,EAAK,sCAAsC,KAAK,SAAS,EACrE,OAAOkH,GAAkB,OAAOjF,CAAG,CAC3C,CASI,UAAUkF,EAAeC,EAAKC,EAAY,CACtC,IAAIC,EACAC,EACJ,GAAI,CACA,MAAM9D,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkBwF,EAAenH,EAAK,kBAAmBA,EAAK,kBAAkB,EACvFyG,EAAOrF,EACPoG,EAAO7F,EAAkByF,EAAKpH,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EyH,GAAOrG,EACPsG,GAAO/F,EAAkB0F,EAAYrH,EAAK,kBAAmBA,EAAK,kBAAkB,EACpF2H,GAAOvG,EACbpB,EAAK,8BAA8ByD,EAAQ,KAAK,UAAW+C,EAAMC,EAAMe,EAAMC,GAAMC,GAAMC,EAAI,EAC7F,IAAIjE,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDmE,EAAOlE,EACPmE,EAAOlE,EACX,GAAIkD,EACA,MAAAe,EAAO,EAAGC,EAAO,EACX1F,EAAWuE,CAAE,EAEvB,OAAAY,EAAcM,EACdL,EAAcM,EACPtH,EAAmBqH,EAAMC,CAAI,CAChD,QAAkB,CACN7H,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBsH,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMO,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBtH,GAAOR,EAAK,sBAAsBQ,IAAQ,EAAG,CAAC,CAAC,EAIvE,MAAMuH,EAAW,CAEpB,OAAO,OAAOvH,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOkH,GAAW,SAAS,EAC9C,OAAAlH,EAAI,UAAYL,EAChBsH,GAAuB,SAASjH,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBsH,GAAuB,WAAW,IAAI,EAC/BtH,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,sBAAsBQ,EAAK,CAAC,CACzC,CAKI,IAAI,eAAgB,CAChB,MAAMyB,EAAMjC,EAAK,mCAAmC,KAAK,SAAS,EAClE,OAAOiC,IAAQ,EAAI,OAAY+E,EAAoB,OAAO/E,CAAG,CACrE,CAKI,IAAI,cAAce,EAAM,CACpB,IAAIwD,EAAO,EACNxF,EAAWgC,CAAI,IAChBkB,EAAalB,EAAMgE,CAAmB,EACtCR,EAAOxD,EAAK,mBAAoB,GAEpChD,EAAK,mCAAmC,KAAK,UAAWwG,CAAI,CACpE,CAKI,IAAI,eAAgB,CAChB,GAAI,CACA,MAAM/C,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,mCAAmCyD,EAAQ,KAAK,SAAS,EAC9D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,cAAcgD,EAAM,CACpB,IAAIwD,EAAOxF,EAAWgC,CAAI,EAAI,EAAIrB,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGyG,EAAOrF,EACXpB,EAAK,mCAAmC,KAAK,UAAWwG,EAAMC,CAAI,CAC1E,CAOI,IAAI,qBAAsB,CACtB,MAAMxE,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOmC,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAM+F,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBxH,GAAOR,EAAK,+BAA+BQ,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAMyH,EAAoB,CAE7B,OAAO,OAAOzH,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOoH,GAAoB,SAAS,EACvD,OAAApH,EAAI,UAAYL,EAChBwH,GAAgC,SAASnH,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBwH,GAAgC,WAAW,IAAI,EACxCxH,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,+BAA+BQ,EAAK,CAAC,CAClD,CAKI,IAAI,KAAM,CACN,IAAI0H,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kCAAkCyD,EAAQ,KAAK,SAAS,EAC7D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,IAAInF,EAAM,CACV,MAAMwD,EAAO7E,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,kCAAkC,KAAK,UAAWwG,EAAMC,CAAI,CACzE,CAKI,IAAI,gBAAiB,CACjB,IAAIyB,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,6CAA6CyD,EAAQ,KAAK,SAAS,EACxE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,eAAenF,EAAM,CACrB,MAAMwD,EAAO7E,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,6CAA6C,KAAK,UAAWwG,EAAMC,CAAI,CACpF,CACA,CAEA,MAAM2B,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB5H,GAAOR,EAAK,6BAA6BQ,IAAQ,EAAG,CAAC,CAAC,EAM9E,MAAM6H,EAAkB,CAE3B,oBAAqB,CACjB,MAAM7H,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB4H,GAA8B,WAAW,IAAI,EACtC5H,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,6BAA6BQ,EAAK,CAAC,CAChD,CAKI,IAAI,QAAS,CACT,MAAMyB,EAAMjC,EAAK,mCAAmC,KAAK,SAAS,EAClE,OAAOiC,IAAQ,EAAI,OAAYqG,EAAO,OAAOrG,CAAG,CACxD,CAKI,IAAI,OAAOe,EAAM,CACb,IAAIwD,EAAO,EACNxF,EAAWgC,CAAI,IAChBkB,EAAalB,EAAMsF,CAAM,EACzB9B,EAAOxD,EAAK,mBAAoB,GAEpChD,EAAK,mCAAmC,KAAK,UAAWwG,CAAI,CACpE,CAKI,IAAI,UAAW,CACX,MAAMvE,EAAMjC,EAAK,qCAAqC,KAAK,SAAS,EACpE,OAAOiC,IAAQ,EAAI,OAAYsG,EAAS,OAAOtG,CAAG,CAC1D,CAKI,IAAI,SAASe,EAAM,CACf,IAAIwD,EAAO,EACNxF,EAAWgC,CAAI,IAChBkB,EAAalB,EAAMuF,CAAQ,EAC3B/B,EAAOxD,EAAK,mBAAoB,GAEpChD,EAAK,qCAAqC,KAAK,UAAWwG,CAAI,CACtE,CAMI,IAAI,gBAAiB,CACjB,IAAI0B,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kCAAkCyD,EAAQ,KAAK,SAAS,EAC7D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,eAAenF,EAAM,CACrB,MAAMwD,EAAO7E,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,kCAAkC,KAAK,UAAWwG,EAAMC,CAAI,CACzE,CAKI,IAAI,eAAgB,CAChB,GAAI,CACA,MAAMhD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,0CAA0CyD,EAAQ,KAAK,SAAS,EACrE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,cAAcgD,EAAM,CACpB,IAAIwD,EAAOxF,EAAWgC,CAAI,EAAI,EAAIrB,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGyG,EAAOrF,EACXpB,EAAK,0CAA0C,KAAK,UAAWwG,EAAMC,CAAI,CACjF,CAKI,IAAI,mBAAoB,CACpB,GAAI,CACA,MAAMhD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,8CAA8CyD,EAAQ,KAAK,SAAS,EACzE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,kBAAkBgD,EAAM,CACxB,IAAIwD,EAAOxF,EAAWgC,CAAI,EAAI,EAAIrB,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGyG,EAAOrF,EACXpB,EAAK,8CAA8C,KAAK,UAAWwG,EAAMC,CAAI,CACrF,CAKI,IAAI,8BAA+B,CAC/B,GAAI,CACA,MAAMhD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,yDAAyDyD,EAAQ,KAAK,SAAS,EACpF,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,6BAA6BgD,EAAM,CACnC,IAAIwD,EAAOxF,EAAWgC,CAAI,EAAI,EAAIrB,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGyG,EAAOrF,EACXpB,EAAK,yDAAyD,KAAK,UAAWwG,EAAMC,CAAI,CAChG,CAKI,IAAI,mCAAoC,CACpC,GAAI,CACA,MAAMhD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,8DAA8DyD,EAAQ,KAAK,SAAS,EACzF,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,kCAAkCgD,EAAM,CACxC,IAAIwD,EAAOxF,EAAWgC,CAAI,EAAI,EAAIrB,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGyG,EAAOrF,EACXpB,EAAK,8DAA8D,KAAK,UAAWwG,EAAMC,CAAI,CACrG,CAKI,IAAI,mCAAoC,CACpC,GAAI,CACA,MAAMhD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,8DAA8DyD,EAAQ,KAAK,SAAS,EACzF,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,kCAAkCgD,EAAM,CACxC,IAAIwD,EAAOxF,EAAWgC,CAAI,EAAI,EAAIrB,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGyG,EAAOrF,EACXpB,EAAK,8DAA8D,KAAK,UAAWwG,EAAMC,CAAI,CACrG,CAII,aAAc,CACV,MAAMxE,EAAMjC,EAAK,sBAAuB,EACxC,YAAK,UAAYiC,IAAQ,EACzBmG,GAA8B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC1D,IACf,CACA,CAEA,MAAMI,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBhI,GAAOR,EAAK,sBAAsBQ,IAAQ,EAAG,CAAC,CAAC,EAKvE,MAAMiI,CAAW,CAEpB,OAAO,OAAOjI,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO4H,EAAW,SAAS,EAC9C,OAAA5H,EAAI,UAAYL,EAChBgI,GAAuB,SAAS3H,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBgI,GAAuB,WAAW,IAAI,EAC/BhI,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,sBAAsBQ,EAAK,CAAC,CACzC,CAKI,QAAS,CACL,MAAMyB,EAAMjC,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,YAAa,CACT,IAAIiG,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,sBAAsByD,EAAQ,KAAK,SAAS,EACjD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,eAAgB,CAEZ,OADYnI,EAAK,yBAAyB,KAAK,SAAS,IACzC,CACvB,CACA,CAEA,MAAM0I,GAAyB,OAAO,qBAAyB,IACzD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlI,GAAOR,EAAK,qBAAqBQ,IAAQ,EAAG,CAAC,CAAC,EAiBtE,MAAMmI,EAAU,CAEnB,OAAO,OAAOnI,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO8H,GAAU,SAAS,EAC7C,OAAA9H,EAAI,UAAYL,EAChBkI,GAAsB,SAAS7H,EAAKA,EAAI,UAAWA,CAAG,EAC/CA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkI,GAAsB,WAAW,IAAI,EAC9BlI,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,qBAAqBQ,EAAK,CAAC,CACxC,CAQI,UAAW,CACP,GAAI,CACA,MAAMiD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,mBAAmByD,EAAQ,KAAK,SAAS,EAC9C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDqD,EAAKzC,EAAoBX,EAAIC,CAAE,EAAE,MAAO,EAC5C,OAAA3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,EAC3BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,UAAW,CAEP,OADYA,EAAK,mBAAmB,KAAK,SAAS,CAE1D,CACA,CAEA,MAAM4I,GAA+B,OAAO,qBAAyB,IAC/D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpI,GAAOR,EAAK,2BAA2BQ,IAAQ,EAAG,CAAC,CAAC,EAK5E,MAAMqI,CAAgB,CAEzB,OAAO,OAAOrI,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOgI,EAAgB,SAAS,EACnD,OAAAhI,EAAI,UAAYL,EAChBoI,GAA4B,SAAS/H,EAAKA,EAAI,UAAWA,CAAG,EACrDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoI,GAA4B,WAAW,IAAI,EACpCpI,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,2BAA2BQ,EAAK,CAAC,CAC9C,CAMI,GAAGsI,EAAO,CACN,OAAA5E,EAAa4E,EAAOD,CAAe,EACvB7I,EAAK,mBAAmB,KAAK,UAAW8I,EAAM,SAAS,IACpD,CACvB,CA2BI,OAAO,oBAAoBC,EAA4BC,EAAgC,CACnF,MAAM/G,EAAMjC,EAAK,oCAAoC+I,EAA4BC,CAA8B,EAC/G,OAAOH,EAAgB,OAAO5G,CAAG,CACzC,CAOI,OAAO,uBAAwB,CAC3B,MAAMA,EAAMjC,EAAK,sCAAuC,EACxD,OAAO6I,EAAgB,OAAO5G,CAAG,CACzC,CACA,CAEA,MAAMgH,GAA6C,OAAO,qBAAyB,IAC7E,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBzI,GAAOR,EAAK,yCAAyCQ,IAAQ,EAAG,CAAC,CAAC,EAK1F,MAAM0I,EAA8B,CAEvC,OAAO,OAAO1I,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOqI,GAA8B,SAAS,EACjE,OAAArI,EAAI,UAAYL,EAChByI,GAA0C,SAASpI,EAAKA,EAAI,UAAWA,CAAG,EACnEA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjByI,GAA0C,WAAW,IAAI,EAClDzI,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,yCAAyCQ,EAAK,CAAC,CAC5D,CAWI,IAAI,mBAAoB,CACpB,MAAMyB,EAAMjC,EAAK,0DAA0D,KAAK,SAAS,EACzF,OAAOmC,EAAWF,CAAG,CAC7B,CAOI,IAAI,0BAA2B,CAC3B,MAAMA,EAAMjC,EAAK,iEAAiE,KAAK,SAAS,EAChG,OAAOmJ,GAAyB,OAAOlH,CAAG,CAClD,CAQI,IAAI,yBAA0B,CAC1B,MAAMA,EAAMjC,EAAK,gEAAgE,KAAK,SAAS,EAC/F,OAAOoJ,GAAuB,OAAOnH,CAAG,CAChD,CACA,CAEA,MAAMoH,GAAqC,OAAO,qBAAyB,IACrE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB7I,GAAOR,EAAK,iCAAiCQ,IAAQ,EAAG,CAAC,CAAC,EAKlF,MAAM8I,EAAsB,CAE/B,OAAO,OAAO9I,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOyI,GAAsB,SAAS,EACzD,OAAAzI,EAAI,UAAYL,EAChB6I,GAAkC,SAASxI,EAAKA,EAAI,UAAWA,CAAG,EAC3DA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB6I,GAAkC,WAAW,IAAI,EAC1C7I,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,iCAAiCQ,EAAK,CAAC,CACpD,CAKI,IAAI,WAAY,CACZ,GAAI,CACA,MAAMiD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,gCAAgCyD,EAAQ,KAAK,SAAS,EAC3D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,kBAAmB,CACnB,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,uCAAuCyD,EAAQ,KAAK,SAAS,EAClE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,gBAAiB,CACjB,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,qCAAqCyD,EAAQ,KAAK,SAAS,EAChE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CACA,CAEA,MAAMuJ,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB/I,GAAOR,EAAK,8BAA8BQ,IAAQ,EAAG,CAAC,CAAC,EAK/E,MAAMgJ,EAAmB,CAE5B,OAAO,OAAOhJ,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO2I,GAAmB,SAAS,EACtD,OAAA3I,EAAI,UAAYL,EAChB+I,GAA+B,SAAS1I,EAAKA,EAAI,UAAWA,CAAG,EACxDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB+I,GAA+B,WAAW,IAAI,EACvC/I,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,8BAA8BQ,EAAK,CAAC,CACjD,CAKI,IAAI,WAAY,CAEZ,OADYR,EAAK,6BAA6B,KAAK,SAAS,IAC7C,CACvB,CAMI,IAAI,gBAAiB,CAEjB,OADYA,EAAK,kCAAkC,KAAK,SAAS,IAClD,CACvB,CAMI,IAAI,gBAAiB,CAEjB,OADYA,EAAK,kCAAkC,KAAK,SAAS,IAClD,CACvB,CACA,CAEA,MAAMyJ,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjJ,GAAOR,EAAK,+BAA+BQ,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAMkJ,CAAoB,CAE7B,OAAO,OAAOlJ,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO6I,EAAoB,SAAS,EACvD,OAAA7I,EAAI,UAAYL,EAChBiJ,GAAgC,SAAS5I,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiJ,GAAgC,WAAW,IAAI,EACxCjJ,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,+BAA+BQ,EAAK,CAAC,CAClD,CAKI,YAAYyG,EAAK,CACb,GAAI,CACA,MAAMxD,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkBsF,EAAKjH,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EyG,EAAOrF,EACbpB,EAAK,wBAAwByD,EAAQ+C,EAAMC,CAAI,EAC/C,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxB+F,GAAgC,SAAS,KAAM,KAAK,UAAW,IAAI,EAC5D,IACnB,QAAkB,CACNzJ,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,QAAS,CAET,OADYA,EAAK,2BAA2B,KAAK,SAAS,IAC3C,CACvB,CAMI,UAAW,CACP,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,6BAA6ByD,EAAQ,KAAK,SAAS,EACxD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMwB,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBnJ,GAAOR,EAAK,8BAA8BQ,IAAQ,EAAG,CAAC,CAAC,EAI/E,MAAMoJ,EAAmB,CAE5B,OAAO,OAAOpJ,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO+I,GAAmB,SAAS,EACtD,OAAA/I,EAAI,UAAYL,EAChBmJ,GAA+B,SAAS9I,EAAKA,EAAI,UAAWA,CAAG,EACxDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBmJ,GAA+B,WAAW,IAAI,EACvCnJ,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,8BAA8BQ,EAAK,CAAC,CACjD,CAKI,IAAI,OAAQ,CACR,MAAMyB,EAAMjC,EAAK,mCAAmC,KAAK,SAAS,EAClE,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,IAAI,QAAS,CACT,MAAMA,EAAMjC,EAAK,0BAA0B,KAAK,SAAS,EACzD,OAAOiC,IAAQ,EAAI,OAAYqG,EAAO,OAAOrG,CAAG,CACxD,CAOI,IAAI,cAAe,CACf,MAAMA,EAAMjC,EAAK,gCAAgC,KAAK,SAAS,EAC/D,OAAOiC,IAAQ,EAAI,OAAYsG,EAAS,OAAOtG,CAAG,CAC1D,CAMI,IAAI,qBAAsB,CACtB,MAAMA,EAAMjC,EAAK,uCAAuC,KAAK,SAAS,EACtE,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,IAAI,yBAA0B,CAC1B,MAAMA,EAAMjC,EAAK,2CAA2C,KAAK,SAAS,EAC1E,OAAOmC,EAAWF,CAAG,CAC7B,CAYI,IAAI,8BAA+B,CAC/B,MAAMA,EAAMjC,EAAK,gDAAgD,KAAK,SAAS,EAC/E,OAAOmC,EAAWF,CAAG,CAC7B,CASI,YAAY4H,EAAQ,CAChB,MAAM5H,EAAMjC,EAAK,+BAA+B,KAAK,UAAW6J,CAAM,EACtE,OAAO5H,IAAQ,EAAI,OAAY6H,GAAY,OAAO7H,CAAG,CAC7D,CACA,CAEA,MAAM8H,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvJ,GAAOR,EAAK,8BAA8BQ,IAAQ,EAAG,CAAC,CAAC,EAI/E,MAAMwJ,EAAmB,CAE5B,oBAAqB,CACjB,MAAMxJ,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuJ,GAA+B,WAAW,IAAI,EACvCvJ,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,8BAA8BQ,EAAK,CAAC,CACjD,CAKI,IAAI,iCAAkC,CAElC,OADYR,EAAK,6DAA6D,KAAK,SAAS,CAEpG,CAKI,IAAI,gCAAgCgD,EAAM,CACtChD,EAAK,6DAA6D,KAAK,UAAWgD,CAAI,CAC9F,CAKI,YAAYiH,EAAiC,CACzC,MAAMhI,EAAMjC,EAAK,uBAAuBiK,CAA+B,EACvE,YAAK,UAAYhI,IAAQ,EACzB8H,GAA+B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC3D,IACf,CACA,CAEA,MAAMG,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB1J,GAAOR,EAAK,4BAA4BQ,IAAQ,EAAG,CAAC,CAAC,EAI7E,MAAM2J,EAAiB,CAE1B,OAAO,OAAO3J,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOsJ,GAAiB,SAAS,EACpD,OAAAtJ,EAAI,UAAYL,EAChB0J,GAA6B,SAASrJ,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB0J,GAA6B,WAAW,IAAI,EACrC1J,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,4BAA4BQ,EAAK,CAAC,CAC/C,CAOI,cAAc4J,EAA6BC,EAAY,CACnD,MAAMpI,EAAMjC,EAAK,+BAA+B,KAAK,UAAWY,EAAcwJ,CAA2B,EAAGxJ,EAAcyJ,CAAU,CAAC,EACrI,OAAOlI,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAMqI,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9J,GAAOR,EAAK,6BAA6BQ,IAAQ,EAAG,CAAC,CAAC,EAI9E,MAAM+J,EAAkB,CAE3B,OAAO,OAAO/J,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO0J,GAAkB,SAAS,EACrD,OAAA1J,EAAI,UAAYL,EAChB8J,GAA8B,SAASzJ,EAAKA,EAAI,UAAWA,CAAG,EACvDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8J,GAA8B,WAAW,IAAI,EACtC9J,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,6BAA6BQ,EAAK,CAAC,CAChD,CAKI,QAAS,CACL,MAAMyB,EAAMjC,EAAK,yBAAyB,KAAK,SAAS,EACxD,OAAOmC,EAAWF,CAAG,CAC7B,CAQI,UAAUoI,EAAYG,EAAWC,EAAa,CAC1CvG,EAAasG,EAAWjC,CAAQ,EAChC,MAAM/B,EAAO7E,EAAkB8I,EAAazK,EAAK,kBAAmBA,EAAK,kBAAkB,EACrFyG,EAAOrF,EACPa,EAAMjC,EAAK,4BAA4B,KAAK,UAAWY,EAAcyJ,CAAU,EAAGG,EAAU,UAAWhE,EAAMC,CAAI,EACvH,OAAOtE,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAMyI,GAAsB,OAAO,qBAAyB,IACtD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlK,GAAOR,EAAK,kBAAkBQ,IAAQ,EAAG,CAAC,CAAC,EAInE,MAAMmK,CAAO,CAEhB,OAAO,OAAOnK,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO8J,EAAO,SAAS,EAC1C,OAAA9J,EAAI,UAAYL,EAChBkK,GAAmB,SAAS7J,EAAKA,EAAI,UAAWA,CAAG,EAC5CA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkK,GAAmB,WAAW,IAAI,EAC3BlK,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,kBAAkBQ,EAAK,CAAC,CACrC,CAQI,oBAAoBoK,EAAS,CACzB,GAAI,CACA,MAAMnH,EAASzD,EAAK,gCAAgC,GAAG,EACvD,IAAIwG,EAAOxF,EAAW4J,CAAO,EAAI,EAAItG,EAAwBsG,EAAS5K,EAAK,iBAAiB,EACxFyG,EAAOrF,EACXpB,EAAK,2BAA2ByD,EAAQ,KAAK,UAAW+C,EAAMC,CAAI,EAClE,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAuBI,qBAAqB6K,EAAYC,EAAS,CACtC,MAAMtE,EAAO7E,EAAkBkJ,EAAY7K,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFyG,EAAOrF,EACPa,EAAMjC,EAAK,4BAA4B,KAAK,UAAWwG,EAAMC,EAAM7F,EAAckK,CAAO,CAAC,EAC/F,OAAO3I,EAAWF,CAAG,CAC7B,CASI,YAAa,CAET,OADYjC,EAAK,kBAAkB,KAAK,SAAS,IAClC,CACvB,CAKI,uBAAwB,CAEpB,OADYA,EAAK,6BAA6B,KAAK,SAAS,IAC7C,CACvB,CAKI,sBAAuB,CAEnB,OADYA,EAAK,4BAA4B,KAAK,SAAS,IAC5C,CACvB,CAYI,cAAc+K,EAAa,CACvB,MAAM9I,EAAMjC,EAAK,qBAAqB,KAAK,UAAW+K,CAAW,EACjE,OAAO5I,EAAWF,CAAG,CAC7B,CAKI,IAAI,QAAS,CACT,MAAMA,EAAMjC,EAAK,cAAc,KAAK,SAAS,EAC7C,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CAKI,IAAI,UAAW,CACX,MAAMA,EAAMjC,EAAK,gBAAgB,KAAK,SAAS,EAC/C,OAAOuI,EAAS,OAAOtG,CAAG,CAClC,CAKI,IAAI,aAAc,CACd,GAAI,CACA,MAAMwB,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,mBAAmByD,EAAQ,KAAK,SAAS,EAC9C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAMI,OAAOgL,EAAW,CACd,GAAI,CACA,MAAMvH,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,cAAcyD,EAAQ,KAAK,UAAWuH,CAAS,EACpD,IAAItH,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOD,IAAO,EAAI,OAAYuH,EAAU,OAAOvH,CAAE,CAC7D,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,eAAgB,CAChB,MAAMiC,EAAMjC,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAOiC,IAAQ,EAAI,OAAYyH,EAAoB,OAAOzH,CAAG,CACrE,CAKI,IAAI,YAAa,CACb,MAAMA,EAAMjC,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOiC,IAAQ,EAAI,OAAYiJ,EAAiB,OAAOjJ,CAAG,CAClE,CAKI,IAAI,MAAO,CACP,MAAMA,EAAMjC,EAAK,YAAY,KAAK,SAAS,EAC3C,OAAOmC,EAAWF,CAAG,CAC7B,CAOI,IAAI,YAAa,CACb,MAAMA,EAAMjC,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,YAAa,CACb,MAAMA,EAAMjC,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOmL,GAAW,OAAOlJ,CAAG,CACpC,CAKI,IAAI,iBAAkB,CAElB,OADYjC,EAAK,uBAAuB,KAAK,SAAS,CAE9D,CAKI,kBAAmB,CAEf,OADYA,EAAK,wBAAwB,KAAK,SAAS,IACxC,CACvB,CAOI,eAAgB,CAEZ,OADYA,EAAK,qBAAqB,KAAK,SAAS,IACrC,CACvB,CAKI,WAAY,CAER,OADYA,EAAK,iBAAiB,KAAK,SAAS,IACjC,CACvB,CAMI,eAAgB,CACZ,MAAMiC,EAAMjC,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAO,OAAO,QAAQ,GAAIiC,CAAG,CACrC,CAQI,QAAS,CACL,MAAMA,EAAMjC,EAAK,cAAc,KAAK,SAAS,EAC7C,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,cAAe,CAEf,OADYjC,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CACA,CAEA,MAAMoL,GAAwB,OAAO,qBAAyB,IACxD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB5K,GAAOR,EAAK,oBAAoBQ,IAAQ,EAAG,CAAC,CAAC,EAOrE,MAAM+H,CAAS,CAElB,OAAO,OAAO/H,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO0H,EAAS,SAAS,EAC5C,OAAA1H,EAAI,UAAYL,EAChB4K,GAAqB,SAASvK,EAAKA,EAAI,UAAWA,CAAG,EAC9CA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB4K,GAAqB,WAAW,IAAI,EAC7B5K,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,oBAAoBQ,EAAK,CAAC,CACvC,CAKI,YAAY6K,EAAI,CACZ,MAAM7E,EAAO7E,EAAkB0J,EAAIrL,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5EyG,EAAOrF,EACPa,EAAMjC,EAAK,aAAawG,EAAMC,CAAI,EACxC,YAAK,UAAYxE,IAAQ,EACzBmJ,GAAqB,SAAS,KAAM,KAAK,UAAW,IAAI,EACjD,IACf,CAKI,UAAW,CACP,IAAIlD,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kBAAkByD,EAAQ,KAAK,SAAS,EAC7C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMmD,GAAyB,OAAO,qBAAyB,IACzD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9K,GAAOR,EAAK,qBAAqBQ,IAAQ,EAAG,CAAC,CAAC,EAQtE,MAAMyK,CAAU,CAEnB,OAAO,OAAOzK,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOoK,EAAU,SAAS,EAC7C,OAAApK,EAAI,UAAYL,EAChB8K,GAAsB,SAASzK,EAAKA,EAAI,UAAWA,CAAG,EAC/CA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8K,GAAsB,WAAW,IAAI,EAC9B9K,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,qBAAqBQ,EAAK,CAAC,CACxC,CAKI,IAAI,MAAO,CAEP,OADYR,EAAK,eAAe,KAAK,SAAS,CAEtD,CAKI,IAAI,YAAa,CACb,MAAMiC,EAAMjC,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAOiC,IAAQ,EAAI,OAAYyH,EAAoB,OAAOzH,CAAG,CACrE,CAKI,IAAI,SAAU,CACV,MAAMA,EAAMjC,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOiC,IAAQ,EAAI,OAAYiJ,EAAiB,OAAOjJ,CAAG,CAClE,CAKI,IAAI,SAAU,CACV,GAAI,CACA,MAAMwB,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kBAAkByD,EAAQ,KAAK,SAAS,EAC7C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,UAAW,CACP,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,mBAAmByD,EAAQ,KAAK,SAAS,EAC9C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMoD,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB/K,GAAOR,EAAK,8BAA8BQ,IAAQ,EAAG,CAAC,CAAC,EAI/E,MAAMgL,EAAmB,CAE5B,OAAO,OAAOhL,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO2K,GAAmB,SAAS,EACtD,OAAA3K,EAAI,UAAYL,EAChB+K,GAA+B,SAAS1K,EAAKA,EAAI,UAAWA,CAAG,EACxDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB+K,GAA+B,WAAW,IAAI,EACvC/K,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,8BAA8BQ,EAAK,CAAC,CACjD,CAOI,IAAI,MAAO,CAEP,OADYR,EAAK,wBAAwB,KAAK,SAAS,CAE/D,CAKI,UAAW,CACP,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,4BAA4ByD,EAAQ,KAAK,SAAS,EACvD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMsD,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjL,GAAOR,EAAK,uBAAuBQ,IAAQ,EAAG,CAAC,CAAC,EAMxE,MAAMkL,CAAY,CAErB,OAAO,OAAOlL,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO6K,EAAY,SAAS,EAC/C,OAAA7K,EAAI,UAAYL,EAChBiL,GAAwB,SAAS5K,EAAKA,EAAI,UAAWA,CAAG,EACjDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiL,GAAwB,WAAW,IAAI,EAChCjL,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,uBAAuBQ,EAAK,CAAC,CAC1C,CAKI,YAAY6K,EAAI,CACZ,GAAI,CACA,MAAM5H,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkB0J,EAAIrL,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5EyG,EAAOrF,EACbpB,EAAK,gBAAgByD,EAAQ+C,EAAMC,CAAI,EACvC,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxB+H,GAAwB,SAAS,KAAM,KAAK,UAAW,IAAI,EACpD,IACnB,QAAkB,CACNzL,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,WAAY,CACZ,MAAMiC,EAAMjC,EAAK,sBAAsB,KAAK,SAAS,EACrD,OAAOwL,GAAmB,OAAOvJ,CAAG,CAC5C,CAKI,IAAI,UAAW,CACX,MAAMA,EAAMjC,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAOuI,EAAS,OAAOtG,CAAG,CAClC,CAKI,UAAW,CACP,IAAIiG,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,qBAAqByD,EAAQ,KAAK,SAAS,EAChD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMwD,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBnL,GAAOR,EAAK,uBAAuBQ,IAAQ,EAAG,CAAC,CAAC,EAIxE,MAAMoL,EAAY,CAErB,oBAAqB,CACjB,MAAMpL,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBmL,GAAwB,WAAW,IAAI,EAChCnL,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,uBAAuBQ,EAAK,CAAC,CAC1C,CAWI,YAAYqL,EAASC,EAAM,CACvB,GAAI,CACA,MAAMrI,EAASzD,EAAK,gCAAgC,GAAG,EACvD,IAAIwG,EAAOxF,EAAW6K,CAAO,EAAI,EAAIvH,EAAwBuH,EAAS7L,EAAK,iBAAiB,EACxFyG,EAAOrF,EACPoG,EAAOxG,EAAW8K,CAAI,EAAI,EAAIxH,EAAwBwH,EAAM9L,EAAK,iBAAiB,EAClFyH,EAAOrG,EACXpB,EAAK,gBAAgByD,EAAQ+C,EAAMC,EAAMe,EAAMC,CAAI,EACnD,IAAI/D,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxBiI,GAAwB,SAAS,KAAM,KAAK,UAAW,IAAI,EACpD,IACnB,QAAkB,CACN3L,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,SAAU,CAEN,OADYA,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CAOI,IAAI,SAAU,CACV,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,oBAAoByD,EAAQ,KAAK,SAAS,EAC/C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDqD,EAAKpC,EAAyBhB,EAAIC,CAAE,EAAE,MAAO,EACjD,OAAA3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,EAC3BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAMI,IAAI,MAAO,CACP,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,iBAAiByD,EAAQ,KAAK,SAAS,EAC5C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDqD,EAAKpC,EAAyBhB,EAAIC,CAAE,EAAE,MAAO,EACjD,OAAA3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,EAC3BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CACA,CAEA,MAAM+L,GAAqB,OAAO,qBAAyB,IACrD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvL,GAAOR,EAAK,iBAAiBQ,IAAQ,EAAG,CAAC,CAAC,EAIlE,MAAMwL,EAAM,CAEf,oBAAqB,CACjB,MAAMxL,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuL,GAAkB,WAAW,IAAI,EAC1BvL,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,iBAAiBQ,EAAK,CAAC,CACpC,CAQI,aAAc,CACV,MAAMyB,EAAMjC,EAAK,UAAW,EAC5B,YAAK,UAAYiC,IAAQ,EACzB8J,GAAkB,SAAS,KAAM,KAAK,UAAW,IAAI,EAC9C,IACf,CAQI,YAAa,CACT,MAAM9J,EAAMjC,EAAK,iBAAiB,KAAK,SAAS,EAChD,OAAO0J,EAAoB,OAAOzH,CAAG,CAC7C,CAOI,0BAA0BgK,EAAiB,CACvC,GAAI,CACA,MAAMxI,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkBsK,EAAiBjM,EAAK,kBAAmBA,EAAK,kBAAkB,EACzFyG,EAAOrF,EACbpB,EAAK,gCAAgCyD,EAAQ,KAAK,UAAW+C,EAAMC,CAAI,EACvE,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOuI,GAAsB,OAAOxI,CAAE,CAClD,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAYI,2BAA2BmM,EAAYF,EAAiB,CACpD,GAAI,CACA,MAAMxI,EAASzD,EAAK,gCAAgC,GAAG,EACvDkE,EAAaiI,EAAYzC,CAAmB,EAC5C,MAAMlD,EAAO7E,EAAkBsK,EAAiBjM,EAAK,kBAAmBA,EAAK,kBAAkB,EACzFyG,EAAOrF,EACbpB,EAAK,iCAAiCyD,EAAQ,KAAK,UAAW0I,EAAW,UAAW3F,EAAMC,CAAI,EAC9F,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOyI,GAAuB,OAAO1I,CAAE,CACnD,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CACA,CAEA,MAAMqM,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB7L,GAAOR,EAAK,4BAA4BQ,IAAQ,EAAG,CAAC,CAAC,EAI7E,MAAM0K,CAAiB,CAE1B,OAAO,OAAO1K,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOqK,EAAiB,SAAS,EACpD,OAAArK,EAAI,UAAYL,EAChB6L,GAA6B,SAASxL,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB6L,GAA6B,WAAW,IAAI,EACrC7L,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,4BAA4BQ,EAAK,CAAC,CAC/C,CAKI,IAAI,QAAS,CAET,OADYR,EAAK,wBAAwB,KAAK,SAAS,IACxC,CACvB,CAMI,UAAW,CACP,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,0BAA0ByD,EAAQ,KAAK,SAAS,EACrD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMmE,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9L,GAAOR,EAAK,4BAA4BQ,IAAQ,EAAG,CAAC,CAAC,EAK7E,MAAM+L,CAAiB,CAE1B,OAAO,OAAO/L,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO0L,EAAiB,SAAS,EACpD,OAAA1L,EAAI,UAAYL,EAChB8L,GAA6B,SAASzL,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8L,GAA6B,WAAW,IAAI,EACrC9L,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,4BAA4BQ,EAAK,CAAC,CAC/C,CAMI,YAAYgM,EAAW,CACnB,GAAI,CACA,MAAM/I,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkB6K,EAAWxM,EAAK,kBAAmBA,EAAK,kBAAkB,EACnFyG,EAAOrF,EACbpB,EAAK,qBAAqByD,EAAQ+C,EAAMC,CAAI,EAC5C,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxB4I,GAA6B,SAAS,KAAM,KAAK,UAAW,IAAI,EACzD,IACnB,QAAkB,CACNtM,EAAK,gCAAgC,EAAE,CACnD,CACA,CAMI,UAAW,CACP,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,0BAA0ByD,EAAQ,KAAK,SAAS,EACrD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMsE,GAAqB,OAAO,qBAAyB,IACrD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjM,GAAOR,EAAK,iBAAiBQ,IAAQ,EAAG,CAAC,CAAC,EAUlE,MAAMkM,EAAM,CAEf,OAAO,OAAOlM,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO6L,GAAM,SAAS,EACzC,OAAA7L,EAAI,UAAYL,EAChBiM,GAAkB,SAAS5L,EAAKA,EAAI,UAAWA,CAAG,EAC3CA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiM,GAAkB,WAAW,IAAI,EAC1BjM,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,iBAAiBQ,EAAK,CAAC,CACpC,CAMI,IAAI,QAAS,CACT,MAAMyB,EAAMjC,EAAK,aAAa,KAAK,SAAS,EAC5C,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,aAAc,CACd,MAAMA,EAAMjC,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOmC,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAM0K,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBnM,GAAOR,EAAK,+BAA+BQ,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAMmG,CAAoB,CAE7B,OAAO,OAAOnG,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO8F,EAAoB,SAAS,EACvD,OAAA9F,EAAI,UAAYL,EAChBmM,GAAgC,SAAS9L,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBmM,GAAgC,WAAW,IAAI,EACxCnM,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,+BAA+BQ,EAAK,CAAC,CAClD,CAiBI,YAAYoM,EAAgBC,EAAuB,CAC/C,GAAI,CACA,MAAMpJ,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAOvC,GAAkB2I,EAAgB5M,EAAK,iBAAiB,EAC/DyG,EAAOrF,EACPoG,EAAO7F,EAAkBkL,EAAuB7M,EAAK,kBAAmBA,EAAK,kBAAkB,EAC/FyH,EAAOrG,EACbpB,EAAK,wBAAwByD,EAAQ+C,EAAMC,EAAMe,EAAMC,CAAI,EAC3D,IAAI/D,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxBiJ,GAAgC,SAAS,KAAM,KAAK,UAAW,IAAI,EAC5D,IACnB,QAAkB,CACN3M,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,IAAI,eAAgB,CAChB,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kCAAkCyD,EAAQ,KAAK,SAAS,EAC7D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDqD,EAAKzC,EAAoBX,EAAIC,CAAE,EAAE,MAAO,EAC5C,OAAA3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,EAC3BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CASI,IAAI,qBAAsB,CACtB,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,wCAAwCyD,EAAQ,KAAK,SAAS,EACnE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAMI,IAAI,oCAAqC,CAErC,OADYA,EAAK,uDAAuD,KAAK,SAAS,IACvE,CACvB,CACA,CAEA,MAAM8M,GAA8B,OAAO,qBAAyB,IAC9D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBtM,GAAOR,EAAK,0BAA0BQ,IAAQ,EAAG,CAAC,CAAC,EAI3E,MAAMuM,EAAe,CAExB,OAAO,OAAOvM,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOkM,GAAe,SAAS,EAClD,OAAAlM,EAAI,UAAYL,EAChBsM,GAA2B,SAASjM,EAAKA,EAAI,UAAWA,CAAG,EACpDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBsM,GAA2B,WAAW,IAAI,EACnCtM,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,0BAA0BQ,EAAK,CAAC,CAC7C,CAMI,IAAI,QAAS,CACT,MAAMyB,EAAMjC,EAAK,sBAAsB,KAAK,SAAS,EACrD,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CAOI,IAAI,cAAe,CACf,MAAMA,EAAMjC,EAAK,4BAA4B,KAAK,SAAS,EAC3D,OAAOiC,IAAQ,EAAI,OAAYsG,EAAS,OAAOtG,CAAG,CAC1D,CAMI,IAAI,qBAAsB,CACtB,MAAMA,EAAMjC,EAAK,mCAAmC,KAAK,SAAS,EAClE,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,IAAI,yBAA0B,CAC1B,MAAMA,EAAMjC,EAAK,uCAAuC,KAAK,SAAS,EACtE,OAAOmC,EAAWF,CAAG,CAC7B,CAgBI,YAAY4H,EAAQ,CAChB,MAAM5H,EAAMjC,EAAK,2BAA2B,KAAK,UAAW6J,CAAM,EAClE,OAAOC,GAAY,OAAO7H,CAAG,CACrC,CACA,CAEA,MAAM+K,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBxM,GAAOR,EAAK,8BAA8BQ,IAAQ,EAAG,CAAC,CAAC,EAO/E,MAAMyM,EAAmB,CAE5B,oBAAqB,CACjB,MAAMzM,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBwM,GAA+B,WAAW,IAAI,EACvCxM,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,8BAA8BQ,EAAK,CAAC,CACjD,CAKI,IAAI,WAAY,CAEZ,OADYR,EAAK,uCAAuC,KAAK,SAAS,CAE9E,CAKI,IAAI,UAAUgD,EAAM,CAChBhD,EAAK,uCAAuC,KAAK,UAAWgD,CAAI,CACxE,CAMI,IAAI,gBAAiB,CACjB,MAAMf,EAAMjC,EAAK,4CAA4C,KAAK,SAAS,EAC3E,OAAO,OAAO,QAAQ,GAAIiC,CAAG,CACrC,CAMI,IAAI,eAAee,EAAM,CACrBhD,EAAK,4CAA4C,KAAK,UAAWgD,CAAI,CAC7E,CAKI,IAAI,wBAAyB,CACzB,MAAMf,EAAMjC,EAAK,oDAAoD,KAAK,SAAS,EACnF,OAAO,OAAO,QAAQ,GAAIiC,CAAG,CACrC,CAKI,IAAI,uBAAuBe,EAAM,CAC7BhD,EAAK,oDAAoD,KAAK,UAAWgD,CAAI,CACrF,CAMI,IAAI,mBAAoB,CAEpB,OADYhD,EAAK,+CAA+C,KAAK,SAAS,CAEtF,CAMI,IAAI,kBAAkBgD,EAAM,CACxBhD,EAAK,+CAA+C,KAAK,UAAWgD,CAAI,CAChF,CAMI,IAAI,iBAAkB,CAClB,MAAMf,EAAMjC,EAAK,6CAA6C,KAAK,SAAS,EAC5E,OAAO6I,EAAgB,OAAO5G,CAAG,CACzC,CAMI,IAAI,gBAAgBe,EAAM,CACtBkB,EAAalB,EAAM6F,CAAe,EAClC,IAAIrC,EAAOxD,EAAK,mBAAoB,EACpChD,EAAK,6CAA6C,KAAK,UAAWwG,CAAI,CAC9E,CAII,aAAc,CACV,MAAMvE,EAAMjC,EAAK,uBAAwB,EACzC,YAAK,UAAYiC,IAAQ,EACzB+K,GAA+B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC3D,IACf,CACA,CAEA,MAAME,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB1M,GAAOR,EAAK,4BAA4BQ,IAAQ,EAAG,CAAC,CAAC,EAO7E,MAAM2M,CAAiB,CAE1B,OAAO,OAAO3M,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOsM,EAAiB,SAAS,EACpD,OAAAtM,EAAI,UAAYL,EAChB0M,GAA6B,SAASrM,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB0M,GAA6B,WAAW,IAAI,EACrC1M,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,4BAA4BQ,EAAK,CAAC,CAC/C,CAQI,YAAa,CACT,MAAMyB,EAAMjC,EAAK,4BAA4B,KAAK,SAAS,EAC3D,OAAO0J,EAAoB,OAAOzH,CAAG,CAC7C,CAMI,QAAQmL,EAAS,CACb,IAAIC,EACAC,EACJ,GAAI,CACA,MAAM7J,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkByL,EAASpN,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFyG,EAAOrF,EACbpB,EAAK,yBAAyByD,EAAQ,KAAK,UAAW+C,EAAMC,CAAI,EAChE,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAA4J,EAAc3J,EACd4J,EAAc3J,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBqN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,QAAQF,EAAS,CACb,IAAIG,EACAC,EACJ,GAAI,CACA,MAAM/J,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkByL,EAASpN,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFyG,EAAOrF,EACbpB,EAAK,yBAAyByD,EAAQ,KAAK,UAAW+C,EAAMC,CAAI,EAChE,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiE,EAAOhE,EACPiE,EAAOhE,EACX,GAAIkD,EACA,MAAAa,EAAO,EAAGC,EAAO,EACXxF,EAAWuE,CAAE,EAEvB,OAAA6G,EAAc7F,EACd8F,EAAc7F,EACPpH,EAAmBmH,EAAMC,CAAI,CAChD,QAAkB,CACN3H,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBuN,EAAaC,EAAa,CAAC,CAC5D,CACA,CASI,YAAa,CACT,MAAMvL,EAAMjC,EAAK,4BAA4B,KAAK,SAAS,EAC3D,OAAO2I,GAAU,OAAO1G,CAAG,CACnC,CACA,CAEA,MAAMwL,GAAuB,OAAO,qBAAyB,IACvD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjN,GAAOR,EAAK,mBAAmBQ,IAAQ,EAAG,CAAC,CAAC,EASpE,MAAMkN,EAAQ,CAEjB,oBAAqB,CACjB,MAAMlN,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiN,GAAoB,WAAW,IAAI,EAC5BjN,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,mBAAmBQ,EAAK,CAAC,CACtC,CAKI,YAAY6K,EAAI,CACZ,GAAI,CACA,MAAM5H,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkB0J,EAAIrL,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5EyG,EAAOrF,EACbpB,EAAK,YAAYyD,EAAQ+C,EAAMC,CAAI,EACnC,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxB+J,GAAoB,SAAS,KAAM,KAAK,UAAW,IAAI,EAChD,IACnB,QAAkB,CACNzN,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,WAAY,CACZ,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kBAAkByD,EAAQ,KAAK,SAAS,EAC7C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,YAAa,CACb,MAAMlG,EAAMjC,EAAK,mBAAmB,KAAK,SAAS,EAClD,OAAOiC,IAAQ,EAAI,OAAY0L,GAAW,OAAO1L,CAAG,CAC5D,CAKI,UAAW,CACP,IAAIiG,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,iBAAiByD,EAAQ,KAAK,SAAS,EAC5C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMyF,GAA4B,OAAO,qBAAyB,IAC5D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpN,GAAOR,EAAK,wBAAwBQ,IAAQ,EAAG,CAAC,CAAC,EAIzE,MAAMqN,EAAa,CAEtB,OAAO,OAAOrN,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOgN,GAAa,SAAS,EAChD,OAAAhN,EAAI,UAAYL,EAChBoN,GAAyB,SAAS/M,EAAKA,EAAI,UAAWA,CAAG,EAClDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoN,GAAyB,WAAW,IAAI,EACjCpN,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,wBAAwBQ,EAAK,CAAC,CAC3C,CAKI,IAAI,SAAU,CACV,MAAMyB,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOkL,EAAiB,OAAOjJ,CAAG,CAC1C,CAKI,IAAI,QAAQe,EAAM,CACdkB,EAAalB,EAAMkI,CAAgB,EACnC,IAAI1E,EAAOxD,EAAK,mBAAoB,EACpChD,EAAK,+BAA+B,KAAK,UAAWwG,CAAI,CAChE,CAKI,IAAI,YAAa,CACb,MAAMvE,EAAMjC,EAAK,kCAAkC,KAAK,SAAS,EACjE,OAAO0J,EAAoB,OAAOzH,CAAG,CAC7C,CAKI,IAAI,WAAWe,EAAM,CACjBkB,EAAalB,EAAM0G,CAAmB,EACtC,IAAIlD,EAAOxD,EAAK,mBAAoB,EACpChD,EAAK,kCAAkC,KAAK,UAAWwG,CAAI,CACnE,CACA,CAEA,MAAMsH,GAAqC,OAAO,qBAAyB,IACrE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBtN,GAAOR,EAAK,iCAAiCQ,IAAQ,EAAG,CAAC,CAAC,EAIlF,MAAM0L,EAAsB,CAE/B,OAAO,OAAO1L,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOqL,GAAsB,SAAS,EACzD,OAAArL,EAAI,UAAYL,EAChBsN,GAAkC,SAASjN,EAAKA,EAAI,UAAWA,CAAG,EAC3DA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBsN,GAAkC,WAAW,IAAI,EAC1CtN,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,iCAAiCQ,EAAK,CAAC,CACpD,CAKI,IAAI,SAAU,CACV,MAAMyB,EAAMjC,EAAK,wCAAwC,KAAK,SAAS,EACvE,OAAOmN,EAAiB,OAAOlL,CAAG,CAC1C,CAKI,IAAI,QAAQe,EAAM,CACdkB,EAAalB,EAAMmK,CAAgB,EACnC,IAAI3G,EAAOxD,EAAK,mBAAoB,EACpChD,EAAK,wCAAwC,KAAK,UAAWwG,CAAI,CACzE,CAKI,IAAI,SAAU,CACV,IAAI0B,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kCAAkCyD,EAAQ,KAAK,SAAS,EAC7D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,QAAQnF,EAAM,CACd,MAAMwD,EAAO7E,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,kCAAkC,KAAK,UAAWwG,EAAMC,CAAI,CACzE,CACA,CAEA,MAAMsH,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvN,GAAOR,EAAK,+BAA+BQ,IAAQ,EAAG,CAAC,CAAC,EAOhF,MAAMwN,EAAoB,CAE7B,OAAO,OAAOxN,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOmN,GAAoB,SAAS,EACvD,OAAAnN,EAAI,UAAYL,EAChBuN,GAAgC,SAASlN,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuN,GAAgC,WAAW,IAAI,EACxCvN,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,+BAA+BQ,EAAK,CAAC,CAClD,CAKI,IAAI,QAAS,CACT,MAAMyB,EAAMjC,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAOiO,EAAO,OAAOhM,CAAG,CAChC,CAMI,IAAI,WAAY,CACZ,MAAMA,EAAMjC,EAAK,8BAA8B,KAAK,SAAS,EAC7D,OAAO0J,EAAoB,OAAOzH,CAAG,CAC7C,CAKI,IAAI,WAAY,CACZ,IAAIiG,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,8BAA8ByD,EAAQ,KAAK,SAAS,EACzD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,iBAAkB,CAEd,OADYnI,EAAK,oCAAoC,KAAK,SAAS,IACpD,CACvB,CACA,CAEA,MAAMkO,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB1N,GAAOR,EAAK,6BAA6BQ,IAAQ,EAAG,CAAC,CAAC,EAO9E,MAAM2N,EAAkB,CAE3B,OAAO,OAAO3N,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOsN,GAAkB,SAAS,EACrD,OAAAtN,EAAI,UAAYL,EAChB0N,GAA8B,SAASrN,EAAKA,EAAI,UAAWA,CAAG,EACvDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB0N,GAA8B,WAAW,IAAI,EACtC1N,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,6BAA6BQ,EAAK,CAAC,CAChD,CAKI,IAAI,IAAK,CACL,MAAMyB,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOmC,EAAWF,CAAG,CAC7B,CAOI,IAAI,MAAO,CACP,MAAMA,EAAMjC,EAAK,iCAAiC,KAAK,SAAS,EAChE,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,SAAU,CACV,MAAMA,EAAMjC,EAAK,oCAAoC,KAAK,SAAS,EACnE,OAAOmC,EAAWF,CAAG,CAC7B,CAOI,YAAYoJ,EAAI+C,EAAMC,EAAS,CAC3B,MAAMpM,EAAMjC,EAAK,sBAAsBY,EAAcyK,CAAE,EAAGzK,EAAcwN,CAAI,EAAGxN,EAAcyN,CAAO,CAAC,EACrG,YAAK,UAAYpM,IAAQ,EACzBiM,GAA8B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC1D,IACf,CAKI,IAAI,MAAO,CAEP,OADYlO,EAAK,uBAAuB,KAAK,SAAS,CAE9D,CACA,CAEA,MAAMsO,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9N,GAAOR,EAAK,4BAA4BQ,IAAQ,EAAG,CAAC,CAAC,EAU7E,MAAM+N,EAAiB,CAE1B,OAAO,OAAO/N,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO0N,GAAiB,SAAS,EACpD,OAAA1N,EAAI,UAAYL,EAChB8N,GAA6B,SAASzN,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8N,GAA6B,WAAW,IAAI,EACrC9N,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,4BAA4BQ,EAAK,CAAC,CAC/C,CAKI,IAAI,IAAK,CACL,MAAMyB,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOmC,EAAWF,CAAG,CAC7B,CAQI,IAAI,MAAO,CACP,MAAMA,EAAMjC,EAAK,iCAAiC,KAAK,SAAS,EAChE,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,YAAYoJ,EAAI+C,EAAM,CAClB,MAAMnM,EAAMjC,EAAK,qBAAqBY,EAAcyK,CAAE,EAAGzK,EAAcwN,CAAI,CAAC,EAC5E,YAAK,UAAYnM,IAAQ,EACzBqM,GAA6B,SAAS,KAAM,KAAK,UAAW,IAAI,EACzD,IACf,CAKI,IAAI,MAAO,CAEP,OADYtO,EAAK,sBAAsB,KAAK,SAAS,CAE7D,CACA,CAEA,MAAMwO,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBhO,GAAOR,EAAK,4BAA4BQ,IAAQ,EAAG,CAAC,CAAC,EAS7E,MAAMiO,EAAiB,CAE1B,OAAO,OAAOjO,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO4N,GAAiB,SAAS,EACpD,OAAA5N,EAAI,UAAYL,EAChBgO,GAA6B,SAAS3N,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBgO,GAA6B,WAAW,IAAI,EACrChO,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,4BAA4BQ,EAAK,CAAC,CAC/C,CAKI,IAAI,IAAK,CACL,MAAMyB,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOmC,EAAWF,CAAG,CAC7B,CAQI,IAAI,MAAO,CACP,MAAMA,EAAMjC,EAAK,iCAAiC,KAAK,SAAS,EAChE,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,YAAYoJ,EAAI+C,EAAM,CAClB,MAAMnM,EAAMjC,EAAK,qBAAqBY,EAAcyK,CAAE,EAAGzK,EAAcwN,CAAI,CAAC,EAC5E,YAAK,UAAYnM,IAAQ,EACzBuM,GAA6B,SAAS,KAAM,KAAK,UAAW,IAAI,EACzD,IACf,CAKI,IAAI,MAAO,CAEP,OADYxO,EAAK,sBAAsB,KAAK,SAAS,CAE7D,CACA,CAEA,MAAM0O,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlO,GAAOR,EAAK,6BAA6BQ,IAAQ,EAAG,CAAC,CAAC,EAU9E,MAAMmO,EAAkB,CAE3B,OAAO,OAAOnO,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO8N,GAAkB,SAAS,EACrD,OAAA9N,EAAI,UAAYL,EAChBkO,GAA8B,SAAS7N,EAAKA,EAAI,UAAWA,CAAG,EACvDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkO,GAA8B,WAAW,IAAI,EACtClO,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,6BAA6BQ,EAAK,CAAC,CAChD,CAKI,IAAI,IAAK,CACL,MAAMyB,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOmC,EAAWF,CAAG,CAC7B,CAQI,IAAI,MAAO,CACP,MAAMA,EAAMjC,EAAK,iCAAiC,KAAK,SAAS,EAChE,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,YAAYoJ,EAAI+C,EAAM,CAClB,MAAMnM,EAAMjC,EAAK,qBAAqBY,EAAcyK,CAAE,EAAGzK,EAAcwN,CAAI,CAAC,EAC5E,YAAK,UAAYnM,IAAQ,EACzByM,GAA8B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC1D,IACf,CAKI,IAAI,MAAO,CAEP,OADY1O,EAAK,uBAAuB,KAAK,SAAS,CAE9D,CACA,CAEA,MAAM4O,GAA8B,OAAO,qBAAyB,IAC9D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpO,GAAOR,EAAK,0BAA0BQ,IAAQ,EAAG,CAAC,CAAC,EAK3E,MAAMqO,EAAe,CAExB,OAAO,OAAOrO,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOgO,GAAe,SAAS,EAClD,OAAAhO,EAAI,UAAYL,EAChBoO,GAA2B,SAAS/N,EAAKA,EAAI,UAAWA,CAAG,EACpDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoO,GAA2B,WAAW,IAAI,EACnCpO,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,0BAA0BQ,EAAK,CAAC,CAC7C,CAKI,SAAU,CAEN,OADYR,EAAK,uBAAuB,KAAK,SAAS,IACvC,CACvB,CAKI,WAAY,CAER,OADYA,EAAK,yBAAyB,KAAK,SAAS,IACzC,CACvB,CAKI,IAAI,WAAY,CACZ,MAAMiC,EAAMjC,EAAK,yBAAyB,KAAK,SAAS,EACxD,OAAOiC,IAAQ,EAAI,OAAY6M,GAAU,OAAO7M,CAAG,CAC3D,CAMI,IAAI,wBAAyB,CACzB,GAAI,CACA,MAAMwB,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,sCAAsCyD,EAAQ,KAAK,SAAS,EACjE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CACA,CAEA,MAAM+O,GAAqC,OAAO,qBAAyB,IACrE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvO,GAAOR,EAAK,iCAAiCQ,IAAQ,EAAG,CAAC,CAAC,EAIlF,MAAMwO,EAAsB,CAE/B,OAAO,OAAOxO,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOmO,GAAsB,SAAS,EACzD,OAAAnO,EAAI,UAAYL,EAChBuO,GAAkC,SAASlO,EAAKA,EAAI,UAAWA,CAAG,EAC3DA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuO,GAAkC,WAAW,IAAI,EAC1CvO,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,iCAAiCQ,EAAK,CAAC,CACpD,CAKI,IAAI,MAAO,CAEP,OADYR,EAAK,qCAAqC,KAAK,SAAS,CAE5E,CAKI,IAAI,aAAc,CACd,MAAMiC,EAAMjC,EAAK,oCAAoC,KAAK,SAAS,EACnE,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,gBAAiB,CACjB,MAAMA,EAAMjC,EAAK,+CAA+C,KAAK,SAAS,EAC9E,OAAOmC,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAMgN,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBzO,GAAOR,EAAK,6BAA6BQ,IAAQ,EAAG,CAAC,CAAC,EAI9E,MAAM0G,EAAkB,CAE3B,OAAO,OAAO1G,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOqG,GAAkB,SAAS,EACrD,OAAArG,EAAI,UAAYL,EAChByO,GAA8B,SAASpO,EAAKA,EAAI,UAAWA,CAAG,EACvDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjByO,GAA8B,WAAW,IAAI,EACtCzO,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,6BAA6BQ,EAAK,CAAC,CAChD,CAKI,IAAI,iBAAkB,CAClB,MAAMyB,EAAMjC,EAAK,kCAAkC,KAAK,SAAS,EACjE,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,WAAY,CACZ,MAAMA,EAAMjC,EAAK,4BAA4B,KAAK,SAAS,EAC3D,OAAOmC,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAMiN,GAAyB,OAAO,qBAAyB,IACzD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB1O,GAAOR,EAAK,qBAAqBQ,IAAQ,EAAG,CAAC,CAAC,EAOtE,MAAM2O,EAAU,CAEnB,oBAAqB,CACjB,MAAM3O,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB0O,GAAsB,WAAW,IAAI,EAC9B1O,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,qBAAqBQ,EAAK,CAAC,CACxC,CAsBI,OAAO,gBAAgB4O,EAAM/E,EAAYgF,EAAc,CACnDnL,EAAakL,EAAM/G,EAAiB,EACpCnE,EAAamL,EAAcC,CAAW,EACtC,MAAMrN,EAAMjC,EAAK,0BAA0BoP,EAAK,UAAWxO,EAAcyJ,CAAU,EAAGgF,EAAa,SAAS,EAC5G,OAAOlN,EAAWF,CAAG,CAC7B,CAyBI,OAAO,mBAAmBsN,EAAUlF,EAAYgF,EAAc,CAC1D,MAAM7I,EAAOlC,EAAwBiL,EAAUvP,EAAK,iBAAiB,EAC/DyG,EAAOrF,EACb8C,EAAamL,EAAcC,CAAW,EACtC,MAAMrN,EAAMjC,EAAK,6BAA6BwG,EAAMC,EAAM7F,EAAcyJ,CAAU,EAAGgF,EAAa,SAAS,EAC3G,OAAOlN,EAAWF,CAAG,CAC7B,CAyBI,OAAO,sBAAsBsN,EAAUlF,EAAYgF,EAAc,CAC7D,MAAM7I,EAAOlC,EAAwBiL,EAAUvP,EAAK,iBAAiB,EAC/DyG,EAAOrF,EACb8C,EAAamL,EAAcC,CAAW,EACtC,MAAMrN,EAAMjC,EAAK,gCAAgCwG,EAAMC,EAAM7F,EAAcyJ,CAAU,EAAGgF,EAAa,SAAS,EAC9G,OAAOlN,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAMuN,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBhP,GAAOR,EAAK,sBAAsBQ,IAAQ,EAAG,CAAC,CAAC,EAKvE,MAAMiP,EAAW,CAEpB,OAAO,OAAOjP,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO4O,GAAW,SAAS,EAC9C,OAAA5O,EAAI,UAAYL,EAChBgP,GAAuB,SAAS3O,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBgP,GAAuB,WAAW,IAAI,EAC/BhP,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,sBAAsBQ,EAAK,CAAC,CACzC,CAOI,aAAc,CACV,GAAI,CACA,MAAMiD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,eAAeyD,CAAM,EAC1B,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxB8L,GAAuB,SAAS,KAAM,KAAK,UAAW,IAAI,EACnD,IACnB,QAAkB,CACNxP,EAAK,gCAAgC,EAAE,CACnD,CACA,CA6BI,OAAO,WAAW0P,EAASlF,EAAWmF,EAAYC,EAAkB,CAChE1L,EAAawL,EAASpH,CAAM,EAC5BpE,EAAasG,EAAWjC,CAAQ,EAChC,IAAI/B,EAAOxF,EAAW2O,CAAU,EAAI,EAAIhO,EAAkBgO,EAAY3P,EAAK,kBAAmBA,EAAK,kBAAkB,EACjHyG,EAAOrF,EACPoG,EAAOxG,EAAW4O,CAAgB,EAAI,EAAIjO,EAAkBiO,EAAkB5P,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7HyH,EAAOrG,EACX,MAAMa,EAAMjC,EAAK,sBAAsB0P,EAAQ,UAAWlF,EAAU,UAAWhE,EAAMC,EAAMe,EAAMC,CAAI,EACrG,OAAOtF,EAAWF,CAAG,CAC7B,CAmBI,OAAO,cAAcyN,EAASlF,EAAW6E,EAAc,CACnDnL,EAAawL,EAASpH,CAAM,EAC5BpE,EAAasG,EAAWjC,CAAQ,EAChCrE,EAAamL,EAAcC,CAAW,EACtC,MAAMrN,EAAMjC,EAAK,yBAAyB0P,EAAQ,UAAWlF,EAAU,UAAW6E,EAAa,SAAS,EACxG,OAAOlN,EAAWF,CAAG,CAC7B,CAKI,IAAI,QAAS,CACT,MAAMA,EAAMjC,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CAKI,IAAI,UAAW,CACX,MAAMA,EAAMjC,EAAK,oBAAoB,KAAK,SAAS,EACnD,OAAOuI,EAAS,OAAOtG,CAAG,CAClC,CAWI,IAAI,sBAAuB,CAEvB,OADYjC,EAAK,gCAAgC,KAAK,SAAS,CAEvE,CAKI,IAAI,cAAe,CACf,MAAMiC,EAAMjC,EAAK,wBAAwB,KAAK,SAAS,EACvD,OAAO6N,GAAa,OAAO5L,CAAG,CACtC,CAKI,IAAI,aAAc,CACd,MAAMA,EAAMjC,EAAK,uBAAuB,KAAK,SAAS,EACtD,OAAOmC,EAAWF,CAAG,CAC7B,CASI,IAAI,wBAAyB,CAEzB,OADYjC,EAAK,kCAAkC,KAAK,SAAS,IAClD,CACvB,CAKI,IAAI,uBAAuB6P,EAAS,CAChC7P,EAAK,sCAAsC,KAAK,UAAW6P,CAAO,CAC1E,CASI,IAAI,0BAA2B,CAE3B,OADY7P,EAAK,oCAAoC,KAAK,SAAS,IACpD,CACvB,CAKI,IAAI,yBAAyB6P,EAAS,CAClC7P,EAAK,wCAAwC,KAAK,UAAW6P,CAAO,CAC5E,CAUI,cAAe,CACX,GAAI,CACA,MAAMpM,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,wBAAwByD,EAAQ,KAAK,SAAS,EACnD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAyBI,mBAAmB8P,EAAO,CACtB,MAAMtJ,EAAOlC,EAAwBwL,EAAO9P,EAAK,iBAAiB,EAC5DyG,EAAOrF,EACPa,EAAMjC,EAAK,8BAA8B,KAAK,UAAWwG,EAAMC,CAAI,EACzE,OAAOtE,EAAWF,CAAG,CAC7B,CAQI,4BAA6B,CACzB,MAAMA,EAAMjC,EAAK,sCAAsC,KAAK,SAAS,EACrE,OAAOmC,EAAWF,CAAG,CAC7B,CAiCI,mBAAmB8N,EAAkBC,EAAiBC,EAAsBC,EAAsB,CAC9F,GAAI,CACA,MAAMzM,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkBoO,EAAkB/P,EAAK,kBAAmBA,EAAK,kBAAkB,EAC1FyG,EAAOrF,EACb8C,EAAa8L,EAAiBpE,EAAW,EACzC5L,EAAK,8BAA8ByD,EAAQ,KAAK,UAAW+C,EAAMC,EAAMuJ,EAAgB,UAAWvL,GAAkBwL,CAAoB,EAAGjP,EAAWkP,CAAoB,EAAI,EAAItP,EAAcsP,CAAoB,CAAC,EACrN,IAAIxM,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,EACvCU,EAAK8D,GAAe,EAAI,MACpC,CACA,CAkBI,kBAAmB,CACf,MAAMvC,EAAMjC,EAAK,4BAA4B,KAAK,SAAS,EAC3D,OAAOmC,EAAWF,CAAG,CAC7B,CAkBI,kBAAkBkO,EAAYC,EAAcC,EAAU,CAClD,GAAI,CACA,MAAM5M,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkBwO,EAAYnQ,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFyG,EAAOrF,EACPoG,EAAO7F,EAAkB0O,EAAUrQ,EAAK,kBAAmBA,EAAK,kBAAkB,EAClFyH,EAAOrG,EACbpB,EAAK,6BAA6ByD,EAAQ,KAAK,UAAW+C,EAAMC,EAAM2J,EAAc5I,EAAMC,CAAI,EAC9F,IAAI/D,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CA0CI,iBAAiBsQ,EAASzF,EAAYC,EAAS,CAC3C,GAAI,CACA,MAAMrH,EAASzD,EAAK,gCAAgC,GAAG,EACvDkE,EAAaoM,EAASrC,CAAM,EAC5B,MAAMzH,EAAO7E,EAAkBkJ,EAAY7K,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFyG,EAAOrF,EACPoG,EAAO7F,EAAkBmJ,EAAS9K,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFyH,EAAOrG,EACbpB,EAAK,4BAA4ByD,EAAQ,KAAK,UAAW6M,EAAQ,UAAW9J,EAAMC,EAAMe,EAAMC,CAAI,EAClG,IAAI/D,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAkBI,iBAAiBuQ,EAAOD,EAASE,EAAqB,CAClD,GAAI,CACA,MAAM/M,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkB4O,EAAOvQ,EAAK,kBAAmBA,EAAK,kBAAkB,EAC/EyG,EAAOrF,EACb8C,EAAaoM,EAASrC,CAAM,EAC5B/J,EAAasM,EAAqBxG,EAAkB,EACpDhK,EAAK,4BAA4ByD,EAAQ,KAAK,UAAW+C,EAAMC,EAAM6J,EAAQ,UAAWE,EAAoB,SAAS,EACrH,IAAI9M,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAsBI,2BAA2BuQ,EAAOD,EAAS,CACvC,GAAI,CACA,MAAM7M,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkB4O,EAAOvQ,EAAK,kBAAmBA,EAAK,kBAAkB,EAC/EyG,EAAOrF,EACb8C,EAAaoM,EAASrC,CAAM,EAC5BjO,EAAK,sCAAsCyD,EAAQ,KAAK,UAAW+C,EAAMC,EAAM6J,EAAQ,SAAS,EAChG,IAAI5M,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,oBAAqB,CACjB,MAAMiC,EAAMjC,EAAK,8BAA8B,KAAK,SAAS,EAC7D,OAAOmC,EAAWF,CAAG,CAC7B,CAgBI,qBAAsB,CAClB,MAAMA,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOmC,EAAWF,CAAG,CAC7B,CAoBI,oBAAoBwO,EAAQ,CACxBvM,EAAauM,EAAQC,CAAa,EAClC,IAAIlK,EAAOiK,EAAO,mBAAoB,EACtC,MAAMxO,EAAMjC,EAAK,+BAA+B,KAAK,UAAWwG,CAAI,EACpE,OAAOrE,EAAWF,CAAG,CAC7B,CAWI,wBAAyB,CACrB,MAAMA,EAAMjC,EAAK,kCAAkC,KAAK,SAAS,EACjE,OAAOmC,EAAWF,CAAG,CAC7B,CAYI,uBAAuB0O,EAAYC,EAAkBC,EAAkB,CACnE,IAAIrK,EAAOxF,EAAW2P,CAAU,EAAI,EAAIhP,EAAkBgP,EAAY3Q,EAAK,kBAAmBA,EAAK,kBAAkB,EACjHyG,EAAOrF,EACPoG,EAAOxG,EAAW4P,CAAgB,EAAI,EAAIjP,EAAkBiP,EAAkB5Q,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7HyH,EAAOrG,EACPsG,EAAO1G,EAAW6P,CAAgB,EAAI,EAAIlP,EAAkBkP,EAAkB7Q,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7H2H,EAAOvG,EACX,MAAMa,EAAMjC,EAAK,kCAAkC,KAAK,UAAWwG,EAAMC,EAAMe,EAAMC,EAAMC,EAAMC,CAAI,EACrG,OAAOxF,EAAWF,CAAG,CAC7B,CAyBI,sBAAsB6O,EAAO,CACzB,MAAM7O,EAAMjC,EAAK,iCAAiC,KAAK,UAAW8Q,CAAK,EACvE,OAAO3O,EAAWF,CAAG,CAC7B,CASI,YAAYyN,EAAS,CACjBxL,EAAawL,EAASpH,CAAM,EAC5B,MAAMrG,EAAMjC,EAAK,uBAAuB,KAAK,UAAW0P,EAAQ,SAAS,EACzE,OAAOvN,EAAWF,CAAG,CAC7B,CAOI,KAAKmL,EAAS,CACV,MAAM5G,EAAO7E,EAAkByL,EAASpN,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFyG,EAAOrF,EACPa,EAAMjC,EAAK,gBAAgB,KAAK,UAAWwG,EAAMC,CAAI,EAC3D,OAAOtE,EAAWF,CAAG,CAC7B,CAUI,uBAAuBqO,EAAS,CAC5BpM,EAAaoM,EAASrC,CAAM,EAC5B,MAAMhM,EAAMjC,EAAK,kCAAkC,KAAK,UAAWsQ,EAAQ,SAAS,EACpF,OAAOnO,EAAWF,CAAG,CAC7B,CAoBI,aAAaqO,EAASR,EAAOiB,EAAqB,CAC9C7M,EAAaoM,EAASrC,CAAM,EAC5B,MAAMzH,EAAOlC,EAAwBwL,EAAO9P,EAAK,iBAAiB,EAC5DyG,EAAOrF,EACb8C,EAAa6M,EAAqB9D,EAAkB,EACpD,MAAMhL,EAAMjC,EAAK,wBAAwB,KAAK,UAAWsQ,EAAQ,UAAW9J,EAAMC,EAAMsK,EAAoB,SAAS,EACrH,OAAO5O,EAAWF,CAAG,CAC7B,CAeI,kBAAkB6N,EAAO,CACrB,GAAI,CACA,MAAMrM,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAOlC,EAAwBwL,EAAO9P,EAAK,iBAAiB,EAC5DyG,EAAOrF,EACbpB,EAAK,6BAA6ByD,EAAQ,KAAK,UAAW+C,EAAMC,CAAI,EACpE,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAO8K,GAAiB,OAAO/K,CAAE,CAC7C,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAiCI,mBAAmB8P,EAAO,CACtB,MAAMtJ,EAAOlC,EAAwBwL,EAAO9P,EAAK,iBAAiB,EAC5DyG,EAAOrF,EACPa,EAAMjC,EAAK,8BAA8B,KAAK,UAAWwG,EAAMC,CAAI,EACzE,OAAOtE,EAAWF,CAAG,CAC7B,CAsBI,eAAeyN,EAASsB,EAAc,CAClC9M,EAAawL,EAASpH,CAAM,EAC5B,MAAMrG,EAAMjC,EAAK,0BAA0B,KAAK,UAAW0P,EAAQ,UAAW,CAAC1O,EAAWgQ,CAAY,EAAGhQ,EAAWgQ,CAAY,EAAI,EAAIA,CAAY,EACpJ,OAAO7O,EAAWF,CAAG,CAC7B,CAyBI,UAAUyN,EAASlF,EAAWwG,EAAc,CACxC9M,EAAawL,EAASpH,CAAM,EAC5BpE,EAAasG,EAAWjC,CAAQ,EAChC,MAAMtG,EAAMjC,EAAK,qBAAqB,KAAK,UAAW0P,EAAQ,UAAWlF,EAAU,UAAW,CAACxJ,EAAWgQ,CAAY,EAAGhQ,EAAWgQ,CAAY,EAAI,EAAIA,CAAY,EACpK,OAAO7O,EAAWF,CAAG,CAC7B,CAaI,gBAAgByN,EAASuB,EAAS,CAC9B,GAAI,CACA,MAAMxN,EAASzD,EAAK,gCAAgC,GAAG,EACvDkE,EAAawL,EAASpH,CAAM,EAC5B,MAAM9B,EAAO7E,EAAkBsP,EAASjR,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFyG,EAAOrF,EACbpB,EAAK,2BAA2ByD,EAAQ,KAAK,UAAWiM,EAAQ,UAAWlJ,EAAMC,CAAI,EACrF,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAOI,uBAAuB0P,EAASuB,EAAS,CACrC/M,EAAawL,EAASpH,CAAM,EAC5B,MAAM9B,EAAO7E,EAAkBsP,EAASjR,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFyG,EAAOrF,EACPa,EAAMjC,EAAK,kCAAkC,KAAK,UAAW0P,EAAQ,UAAWlJ,EAAMC,CAAI,EAChG,OAAOxE,IAAQ,EAAI,OAAYiP,EAAoB,OAAOjP,CAAG,CACrE,CAMI,wBAAwByN,EAAS,CAC7BxL,EAAawL,EAASpH,CAAM,EAC5B,MAAMrG,EAAMjC,EAAK,mCAAmC,KAAK,UAAW0P,EAAQ,SAAS,EACrF,OAAOvN,EAAWF,CAAG,CAC7B,CAUI,yBAAyBsO,EAAOD,EAAS,CACrC,GAAI,CACA,MAAM7M,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkB4O,EAAOvQ,EAAK,kBAAmBA,EAAK,kBAAkB,EAC/EyG,EAAOrF,EACb8C,EAAaoM,EAASrC,CAAM,EAC5BjO,EAAK,oCAAoCyD,EAAQ,KAAK,UAAW+C,EAAMC,EAAM6J,EAAQ,SAAS,EAC9F,IAAI5M,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAcI,eAAemR,EAAW,CACtB,MAAMlP,EAAMjC,EAAK,0BAA0B,KAAK,UAAWY,EAAcuQ,CAAS,CAAC,EACnF,OAAOhP,EAAWF,CAAG,CAC7B,CAmBI,eAAemP,EAAoBC,EAAmB,CAClD,GAAI,CACA,MAAM5N,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkByP,EAAoBpR,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5FyG,EAAOrF,EACbpB,EAAK,0BAA0ByD,EAAQ,KAAK,UAAW+C,EAAMC,EAAM7F,EAAcyQ,CAAiB,CAAC,EACnG,IAAI3N,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAgBI,uBAAuBoR,EAAoBC,EAAmB,CAC1D,GAAI,CACA,MAAM5N,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkByP,EAAoBpR,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5FyG,EAAOrF,EACbpB,EAAK,kCAAkCyD,EAAQ,KAAK,UAAW+C,EAAMC,EAAM7F,EAAcyQ,CAAiB,CAAC,EAC3G,IAAI3N,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAyBI,uBAAuBsR,EAAqBD,EAAmBE,EAAgB,CAC3E,GAAI,CACA,MAAM9N,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkB4P,EAAgBvR,EAAK,kBAAmBA,EAAK,kBAAkB,EACxFyG,EAAOrF,EACbpB,EAAK,kCAAkCyD,EAAQ,KAAK,UAAWgB,GAAkB6M,CAAmB,EAAGtQ,EAAWqQ,CAAiB,EAAI,EAAIzQ,EAAcyQ,CAAiB,EAAG7K,EAAMC,CAAI,EACvL,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,EACvCU,EAAK8D,GAAe,EAAI,MACpC,CACA,CAYI,wBAAwBgN,EAAgBnD,EAAS,CAC7CnK,EAAasN,EAAgBxK,CAAmB,EAChD,MAAMR,EAAO7E,EAAkB0M,EAASrO,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFyG,EAAOrF,EACPa,EAAMjC,EAAK,mCAAmC,KAAK,UAAWwR,EAAe,UAAWhL,EAAMC,CAAI,EACxG,OAAOtE,EAAWF,CAAG,CAC7B,CAMI,eAAgB,CACZ,MAAMA,EAAMjC,EAAK,yBAAyB,KAAK,SAAS,EACxD,OAAOmC,EAAWF,CAAG,CAC7B,CAsBI,aAAawP,EAAa,CACtB,GAAI,CACA,MAAMhO,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,wBAAwByD,EAAQ,KAAK,UAAW7C,EAAc6Q,CAAW,CAAC,EAC/E,IAAI/N,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAeI,eAAe0R,EAAoBrD,EAAS,CACxC,GAAI,CACA,MAAM5K,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkB+P,EAAoB1R,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5FyG,EAAOrF,EACPoG,EAAO7F,EAAkB0M,EAASrO,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFyH,EAAOrG,EACbpB,EAAK,0BAA0ByD,EAAQ,KAAK,UAAW+C,EAAMC,EAAMe,EAAMC,CAAI,EAC7E,IAAI/D,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAUI,iBAAkB,CACd,MAAMiC,EAAMjC,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAOmC,EAAWF,CAAG,CAC7B,CAUI,eAAgB,CACZ,MAAMA,EAAMjC,EAAK,yBAAyB,KAAK,SAAS,EACxD,OAAOmC,EAAWF,CAAG,CAC7B,CAQI,gBAAiB,CACb,MAAMA,EAAMjC,EAAK,0BAA0B,KAAK,SAAS,EACzD,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,eAAgB,CACZ,MAAMA,EAAMjC,EAAK,yBAAyB,KAAK,SAAS,EACxD,OAAOmC,EAAWF,CAAG,CAC7B,CAiBI,OAAO,wBAAwBmP,EAAoBO,EAAYC,EAAQ,CACnE,IAAIC,EACAC,EACJ,GAAI,CACA,MAAMrO,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkByP,EAAoBpR,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5FyG,EAAOrF,EACPoG,EAAO7F,EAAkBgQ,EAAY3R,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFyH,GAAOrG,EACbpB,EAAK,mCAAmCyD,EAAQ+C,EAAMC,EAAMe,EAAMC,GAAMmK,CAAM,EAC9E,IAAIlO,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDsO,EAAOrO,EACPsO,EAAOrO,EACX,GAAIkD,EACA,MAAAkL,EAAO,EAAGC,EAAO,EACX7P,EAAWuE,CAAE,EAEvB,OAAAmL,EAAcE,EACdD,EAAcE,EACPzR,EAAmBwR,EAAMC,CAAI,CAChD,QAAkB,CACNhS,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgB6R,EAAaC,EAAa,CAAC,CAC5D,CACA,CAWI,OAAO,wBAAwBG,EAA8BN,EAAY,CACrE,IAAIE,EACAC,EACJ,GAAI,CACA,MAAMrO,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkBsQ,EAA8BjS,EAAK,kBAAmBA,EAAK,kBAAkB,EACtGyG,EAAOrF,EACPoG,EAAO7F,EAAkBgQ,EAAY3R,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFyH,EAAOrG,EACbpB,EAAK,mCAAmCyD,EAAQ+C,EAAMC,EAAMe,EAAMC,CAAI,EACtE,IAAI/D,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDsO,EAAOrO,EACPsO,EAAOrO,EACX,GAAIkD,EACA,MAAAkL,EAAO,EAAGC,EAAO,EACX7P,EAAWuE,CAAE,EAEvB,OAAAmL,EAAcE,EACdD,EAAcE,EACPzR,EAAmBwR,EAAMC,CAAI,CAChD,QAAkB,CACNhS,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgB6R,EAAaC,EAAa,CAAC,CAC5D,CACA,CAUI,+BAA+BI,EAAU,CACrC,MAAMjQ,EAAMjC,EAAK,0CAA0C,KAAK,UAAWY,EAAcsR,CAAQ,CAAC,EAClG,OAAO/P,EAAWF,CAAG,CAC7B,CAUI,iCAAiCiQ,EAAU,CACvC,MAAMjQ,EAAMjC,EAAK,4CAA4C,KAAK,UAAWY,EAAcsR,CAAQ,CAAC,EACpG,OAAO/P,EAAWF,CAAG,CAC7B,CAUI,oCAAoCiQ,EAAU,CAC1C,MAAMjQ,EAAMjC,EAAK,+CAA+C,KAAK,UAAWY,EAAcsR,CAAQ,CAAC,EACvG,OAAO/P,EAAWF,CAAG,CAC7B,CAUI,+BAA+BiQ,EAAU,CACrC,MAAMjQ,EAAMjC,EAAK,0CAA0C,KAAK,UAAWY,EAAcsR,CAAQ,CAAC,EAClG,OAAO/P,EAAWF,CAAG,CAC7B,CA4BI,8BAA8BiQ,EAAU,CACpC,MAAMjQ,EAAMjC,EAAK,yCAAyC,KAAK,UAAWY,EAAcsR,CAAQ,CAAC,EACjG,OAAO/P,EAAWF,CAAG,CAC7B,CAwBI,oBAAoBkQ,EAAa,CAC7B,MAAM3L,EAAO7E,EAAkBwQ,EAAanS,EAAK,kBAAmBA,EAAK,kBAAkB,EACrFyG,EAAOrF,EACPa,EAAMjC,EAAK,+BAA+B,KAAK,UAAWwG,EAAMC,CAAI,EAC1E,OAAOtE,EAAWF,CAAG,CAC7B,CAaI,uBAAuBkQ,EAAa,CAChC,MAAM3L,EAAO7E,EAAkBwQ,EAAanS,EAAK,kBAAmBA,EAAK,kBAAkB,EACrFyG,EAAOrF,EACPa,EAAMjC,EAAK,kCAAkC,KAAK,UAAWwG,EAAMC,CAAI,EAC7E,OAAOtE,EAAWF,CAAG,CAC7B,CAmBI,+BAAgC,CAC5B,MAAMA,EAAMjC,EAAK,yCAAyC,KAAK,SAAS,EACxE,OAAOmC,EAAWF,CAAG,CAC7B,CAaI,gBAAgBqO,EAAS,CACrBpM,EAAaoM,EAASrC,CAAM,EAC5B,MAAMhM,EAAMjC,EAAK,2BAA2B,KAAK,UAAWsQ,EAAQ,SAAS,EAC7E,OAAOnO,EAAWF,CAAG,CAC7B,CAeI,gBAAgBqO,EAAS8B,EAAe,CACpClO,EAAaoM,EAASrC,CAAM,EAC5B/J,EAAakO,EAAeC,EAAY,EACxC,MAAMpQ,EAAMjC,EAAK,2BAA2B,KAAK,UAAWsQ,EAAQ,UAAW8B,EAAc,SAAS,EACtG,OAAOjQ,EAAWF,CAAG,CAC7B,CAKI,mBAAoB,CAChB,MAAMA,EAAMjC,EAAK,6BAA6B,KAAK,SAAS,EAC5D,OAAOuK,GAAkB,OAAOtI,CAAG,CAC3C,CASI,OAAQ,CACJ,MAAMzB,EAAM,KAAK,mBAAoB,EACrCR,EAAK,iBAAiBQ,CAAG,CACjC,CACA,CAEA,MAAM8R,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9R,GAAOR,EAAK,6BAA6BQ,IAAQ,EAAG,CAAC,CAAC,EAW9E,MAAM+R,EAAkB,CAE3B,OAAO,OAAO/R,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO0R,GAAkB,SAAS,EACrD,OAAA1R,EAAI,UAAYL,EAChB8R,GAA8B,SAASzR,EAAKA,EAAI,UAAWA,CAAG,EACvDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8R,GAA8B,WAAW,IAAI,EACtC9R,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,6BAA6BQ,EAAK,CAAC,CAChD,CAKI,YAAa,CAET,OADYR,EAAK,6BAA6B,KAAK,SAAS,IAC7C,CACvB,CAcI,QAAS,CACL,MAAMiC,EAAMjC,EAAK,yBAAyB,KAAK,SAAS,EACxD,OAAOmC,EAAWF,CAAG,CAC7B,CASI,oBAAoBqO,EAASkC,EAAkB5H,EAAS,CACpD,GAAI,CACA,MAAMnH,EAASzD,EAAK,gCAAgC,GAAG,EACvDkE,EAAaoM,EAASrC,CAAM,EAC5B/J,EAAasO,EAAkB9E,EAAO,EACtC,IAAIlH,EAAOxF,EAAW4J,CAAO,EAAI,EAAItG,EAAwBsG,EAAS5K,EAAK,iBAAiB,EACxFyG,EAAOrF,EACXpB,EAAK,sCAAsCyD,EAAQ,KAAK,UAAW6M,EAAQ,UAAWkC,EAAiB,UAAWhM,EAAMC,CAAI,EAC5H,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOuN,EAAoB,OAAOxN,CAAE,CAChD,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAYI,2BAA2B4K,EAAS,CAChC,IAAI2C,EACAC,EACJ,GAAI,CACA,MAAM/J,EAASzD,EAAK,gCAAgC,GAAG,EACvD,IAAIwG,EAAOxF,EAAW4J,CAAO,EAAI,EAAItG,EAAwBsG,EAAS5K,EAAK,iBAAiB,EACxFyG,EAAOrF,EACXpB,EAAK,6CAA6CyD,EAAQ,KAAK,UAAW+C,EAAMC,CAAI,EACpF,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiE,EAAOhE,EACPiE,EAAOhE,EACX,GAAIkD,EACA,MAAAa,EAAO,EAAGC,EAAO,EACXxF,EAAWuE,CAAE,EAEvB,OAAA6G,EAAc7F,EACd8F,EAAc7F,EACPpH,EAAmBmH,EAAMC,CAAI,CAChD,QAAkB,CACN3H,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBuN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,WAAY,CACZ,IAAIH,EACAC,EACJ,GAAI,CACA,MAAM7J,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,4BAA4ByD,EAAQ,KAAK,SAAS,EACvD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvD+D,EAAO9D,EACP+D,EAAO9D,EACX,GAAIkD,EACA,MAAAW,EAAO,EAAGC,EAAO,EACXtF,EAAWuE,CAAE,EAEvB,OAAA2G,EAAc7F,EACd8F,EAAc7F,EACPlH,EAAmBiH,EAAMC,CAAI,CAChD,QAAkB,CACNzH,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBqN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,gBAAiB,CACjB,IAAID,EACAC,EACJ,GAAI,CACA,MAAM7J,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,iCAAiCyD,EAAQ,KAAK,SAAS,EAC5D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvD+D,EAAO9D,EACP+D,EAAO9D,EACX,GAAIkD,EACA,MAAAW,EAAO,EAAGC,EAAO,EACXtF,EAAWuE,CAAE,EAEvB,OAAA2G,EAAc7F,EACd8F,EAAc7F,EACPlH,EAAmBiH,EAAMC,CAAI,CAChD,QAAkB,CACNzH,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBqN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,qBAAsB,CAClB,MAAMrL,EAAMjC,EAAK,sCAAsC,KAAK,SAAS,EACrE,OAAOmC,EAAWF,CAAG,CAC7B,CAeI,2BAA4B,CAExB,OADYjC,EAAK,4CAA4C,KAAK,SAAS,IAC5D,CACvB,CAQI,uBAAwB,CAEpB,OADYA,EAAK,wCAAwC,KAAK,SAAS,IACxD,CACvB,CASI,sBAAuB,CACnB,MAAMiC,EAAMjC,EAAK,uCAAuC,KAAK,SAAS,EACtE,OAAOmC,EAAWF,CAAG,CAC7B,CAYI,0BAA2B,CAEvB,OADYjC,EAAK,2CAA2C,KAAK,SAAS,IAC3D,CACvB,CACA,CAEA,MAAMyS,GAAsC,OAAO,qBAAyB,IACtE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjS,GAAOR,EAAK,kCAAkCQ,IAAQ,EAAG,CAAC,CAAC,EAInF,MAAM4L,EAAuB,CAEhC,OAAO,OAAO5L,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOuL,GAAuB,SAAS,EAC1D,OAAAvL,EAAI,UAAYL,EAChBiS,GAAmC,SAAS5R,EAAKA,EAAI,UAAWA,CAAG,EAC5DA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiS,GAAmC,WAAW,IAAI,EAC3CjS,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,kCAAkCQ,EAAK,CAAC,CACrD,CAKI,IAAI,SAAU,CACV,MAAMyB,EAAMjC,EAAK,wCAAwC,KAAK,SAAS,EACvE,OAAOmN,EAAiB,OAAOlL,CAAG,CAC1C,CAKI,IAAI,QAAQe,EAAM,CACdkB,EAAalB,EAAMmK,CAAgB,EACnC,IAAI3G,EAAOxD,EAAK,mBAAoB,EACpChD,EAAK,wCAAwC,KAAK,UAAWwG,CAAI,CACzE,CAKI,IAAI,iBAAkB,CAClB,IAAI0B,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kCAAkCyD,EAAQ,KAAK,SAAS,EAC7D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,gBAAgBnF,EAAM,CACtB,MAAMwD,EAAO7E,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,kCAAkC,KAAK,UAAWwG,EAAMC,CAAI,CACzE,CACA,CAEA,MAAMiM,GAA+B,OAAO,qBAAyB,IAC/D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlS,GAAOR,EAAK,2BAA2BQ,IAAQ,EAAG,CAAC,CAAC,EAM5E,MAAMmS,EAAgB,CAEzB,OAAO,OAAOnS,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO8R,GAAgB,SAAS,EACnD,OAAA9R,EAAI,UAAYL,EAChBkS,GAA4B,SAAS7R,EAAKA,EAAI,UAAWA,CAAG,EACrDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkS,GAA4B,WAAW,IAAI,EACpClS,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,2BAA2BQ,EAAK,CAAC,CAC9C,CAKI,YAAa,CAET,OADYR,EAAK,2BAA2B,KAAK,SAAS,IAC3C,CACvB,CAUI,QAAS,CACL,MAAMiC,EAAMjC,EAAK,uBAAuB,KAAK,SAAS,EACtD,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,oBAAoB2I,EAAS,CACzB,GAAI,CACA,MAAMnH,EAASzD,EAAK,gCAAgC,GAAG,EACvD,IAAIwG,EAAOxF,EAAW4J,CAAO,EAAI,EAAItG,EAAwBsG,EAAS5K,EAAK,iBAAiB,EACxFyG,EAAOrF,EACXpB,EAAK,oCAAoCyD,EAAQ,KAAK,UAAW+C,EAAMC,CAAI,EAC3E,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAMI,oBAAqB,CACjB,MAAMiC,EAAMjC,EAAK,mCAAmC,KAAK,SAAS,EAClE,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,WAAY,CACZ,IAAIoL,EACAC,EACJ,GAAI,CACA,MAAM7J,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,0BAA0ByD,EAAQ,KAAK,SAAS,EACrD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvD+D,EAAO9D,EACP+D,EAAO9D,EACX,GAAIkD,EACA,MAAAW,EAAO,EAAGC,EAAO,EACXtF,EAAWuE,CAAE,EAEvB,OAAA2G,EAAc7F,EACd8F,EAAc7F,EACPlH,EAAmBiH,EAAMC,CAAI,CAChD,QAAkB,CACNzH,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBqN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,gBAAiB,CACjB,IAAID,EACAC,EACJ,GAAI,CACA,MAAM7J,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,+BAA+ByD,EAAQ,KAAK,SAAS,EAC1D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvD+D,EAAO9D,EACP+D,EAAO9D,EACX,GAAIkD,EACA,MAAAW,EAAO,EAAGC,EAAO,EACXtF,EAAWuE,CAAE,EAEvB,OAAA2G,EAAc7F,EACd8F,EAAc7F,EACPlH,EAAmBiH,EAAMC,CAAI,CAChD,QAAkB,CACNzH,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBqN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,gBAAiB,CACjB,IAAID,EACAC,EACJ,GAAI,CACA,MAAM7J,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,+BAA+ByD,EAAQ,KAAK,SAAS,EAC1D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvD+D,EAAO9D,EACP+D,EAAO9D,EACX,GAAIkD,EACA,MAAAW,EAAO,EAAGC,EAAO,EACXtF,EAAWuE,CAAE,EAEvB,OAAA2G,EAAc7F,EACd8F,EAAc7F,EACPlH,EAAmBiH,EAAMC,CAAI,CAChD,QAAkB,CACNzH,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBqN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAOI,uBAAwB,CAEpB,OADYtN,EAAK,sCAAsC,KAAK,SAAS,IACtD,CACvB,CASI,sBAAuB,CACnB,MAAMiC,EAAMjC,EAAK,qCAAqC,KAAK,SAAS,EACpE,OAAOmC,EAAWF,CAAG,CAC7B,CAYI,0BAA2B,CAEvB,OADYjC,EAAK,yCAAyC,KAAK,SAAS,IACzD,CACvB,CACA,CAEA,MAAM4S,GAA0C,OAAO,qBAAyB,IAC1E,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpS,GAAOR,EAAK,sCAAsCQ,IAAQ,EAAG,CAAC,CAAC,EAOvF,MAAMqS,EAA2B,CAEpC,OAAO,SAASC,EAAS,CACrB,OAAMA,aAAmBD,GAGlBC,EAAQ,mBAAoB,EAFxB,CAGnB,CAEI,oBAAqB,CACjB,MAAMtS,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoS,GAAuC,WAAW,IAAI,EAC/CpS,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,sCAAsCQ,EAAK,CAAC,CACzD,CAMI,IAAI,QAAS,CACT,IAAI0H,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kCAAkCyD,EAAQ,KAAK,SAAS,EAC7D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,OAAOnF,EAAM,CACb,MAAMwD,EAAO7E,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,kCAAkC,KAAK,UAAWwG,EAAMC,CAAI,CACzE,CAKI,IAAI,WAAY,CACZ,IAAIyB,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,6CAA6CyD,EAAQ,KAAK,SAAS,EACxE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,UAAUnF,EAAM,CAChB,MAAMwD,EAAO7E,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,6CAA6C,KAAK,UAAWwG,EAAMC,CAAI,CACpF,CAkBI,IAAI,kBAAmB,CACnB,GAAI,CACA,MAAMhD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,8CAA8CyD,EAAQ,KAAK,SAAS,EACzE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAkBI,IAAI,iBAAiBgD,EAAM,CACvB,IAAIwD,EAAOxF,EAAWgC,CAAI,EAAI,EAAIrB,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGyG,EAAOrF,EACXpB,EAAK,8CAA8C,KAAK,UAAWwG,EAAMC,CAAI,CACrF,CAQI,IAAI,QAAS,CACT,MAAMxE,EAAMjC,EAAK,4CAA4C,KAAK,SAAS,EAC3E,OAAOiC,IAAQ,EAAI,OAAYgM,EAAO,OAAOhM,CAAG,CACxD,CAQI,IAAI,OAAOe,EAAM,CACb,IAAIwD,EAAO,EACNxF,EAAWgC,CAAI,IAChBkB,EAAalB,EAAMiL,CAAM,EACzBzH,EAAOxD,EAAK,mBAAoB,GAEpChD,EAAK,4CAA4C,KAAK,UAAWwG,CAAI,CAC7E,CAMI,IAAI,UAAW,CAEX,OADYxG,EAAK,8CAA8C,KAAK,SAAS,IAC9D,CACvB,CAMI,IAAI,SAASgD,EAAM,CACfhD,EAAK,8CAA8C,KAAK,UAAWgD,CAAI,CAC/E,CAKI,IAAI,UAAW,CAEX,OADYhD,EAAK,8CAA8C,KAAK,SAAS,IAC9D,CACvB,CAKI,IAAI,SAASgD,EAAM,CACfhD,EAAK,8CAA8C,KAAK,UAAWgD,CAAI,CAC/E,CAII,aAAc,CACV,MAAMf,EAAMjC,EAAK,+BAAgC,EACjD,YAAK,UAAYiC,IAAQ,EACzB2Q,GAAuC,SAAS,KAAM,KAAK,UAAW,IAAI,EACnE,IACf,CACA,CAEA,MAAMG,GAA8B,OAAO,qBAAyB,IAC9D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvS,GAAOR,EAAK,0BAA0BQ,IAAQ,EAAG,CAAC,CAAC,EAQ3E,MAAMwS,EAAe,CAExB,OAAO,SAASF,EAAS,CACrB,OAAMA,aAAmBE,GAGlBF,EAAQ,mBAAoB,EAFxB,CAGnB,CAEI,oBAAqB,CACjB,MAAMtS,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuS,GAA2B,WAAW,IAAI,EACnCvS,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,0BAA0BQ,EAAK,CAAC,CAC7C,CAMI,IAAI,QAAS,CACT,IAAI0H,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kCAAkCyD,EAAQ,KAAK,SAAS,EAC7D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,OAAOnF,EAAM,CACb,MAAMwD,EAAO7E,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,kCAAkC,KAAK,UAAWwG,EAAMC,CAAI,CACzE,CAMI,IAAI,WAAY,CACZ,IAAIyB,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,6CAA6CyD,EAAQ,KAAK,SAAS,EACxE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,UAAUnF,EAAM,CAChB,MAAMwD,EAAO7E,EAAkBqB,EAAMhD,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,6CAA6C,KAAK,UAAWwG,EAAMC,CAAI,CACpF,CAKI,IAAI,yBAA0B,CAE1B,OADYzG,EAAK,iDAAiD,KAAK,SAAS,IACjE,CACvB,CAKI,IAAI,wBAAwBgD,EAAM,CAC9BhD,EAAK,iDAAiD,KAAK,UAAWgD,CAAI,CAClF,CAKI,IAAI,cAAe,CACf,MAAMf,EAAMjC,EAAK,sCAAsC,KAAK,SAAS,EACrE,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,aAAae,EAAM,CACnBhD,EAAK,sCAAsC,KAAK,UAAWY,EAAcoC,CAAI,CAAC,CACtF,CAKI,IAAI,aAAc,CACd,MAAMf,EAAMjC,EAAK,qCAAqC,KAAK,SAAS,EACpE,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,YAAYe,EAAM,CAClBhD,EAAK,qCAAqC,KAAK,UAAWY,EAAcoC,CAAI,CAAC,CACrF,CAII,aAAc,CACV,MAAMf,EAAMjC,EAAK,mBAAoB,EACrC,YAAK,UAAYiC,IAAQ,EACzB8Q,GAA2B,SAAS,KAAM,KAAK,UAAW,IAAI,EACvD,IACf,CACA,CAEA,MAAME,GAA0C,OAAO,qBAAyB,IAC1E,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBzS,GAAOR,EAAK,sCAAsCQ,IAAQ,EAAG,CAAC,CAAC,EAIvF,MAAM0S,EAA2B,CAEpC,OAAO,OAAO1S,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOqS,GAA2B,SAAS,EAC9D,OAAArS,EAAI,UAAYL,EAChByS,GAAuC,SAASpS,EAAKA,EAAI,UAAWA,CAAG,EAChEA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjByS,GAAuC,WAAW,IAAI,EAC/CzS,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,sCAAsCQ,EAAK,CAAC,CACzD,CAOI,IAAI,MAAO,CACP,MAAMyB,EAAMjC,EAAK,0CAA0C,KAAK,SAAS,EACzE,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,YAAYmM,EAAM,CACd,MAAMnM,EAAMjC,EAAK,+BAA+BY,EAAcwN,CAAI,CAAC,EACnE,YAAK,UAAYnM,IAAQ,EACzBgR,GAAuC,SAAS,KAAM,KAAK,UAAW,IAAI,EACnE,IACf,CACA,CAEA,MAAME,GAAkB,OAAO,qBAAyB,IAClD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB3S,GAAOR,EAAK,cAAcQ,IAAQ,EAAG,CAAC,CAAC,EAI/D,MAAM4S,EAAG,CAEZ,OAAO,OAAO5S,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOuS,GAAG,SAAS,EACtC,OAAAvS,EAAI,UAAYL,EAChB2S,GAAe,SAAStS,EAAKA,EAAI,UAAWA,CAAG,EACxCA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB2S,GAAe,WAAW,IAAI,EACvB3S,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,cAAcQ,EAAK,CAAC,CACjC,CAOI,OAAQ,CAEJ,OADYR,EAAK,SAAS,KAAK,SAAS,CAEhD,CASI,gBAAiB,CAEb,OADYA,EAAK,kBAAkB,KAAK,SAAS,IAClC,CACvB,CAKI,kBAAmB,CAEf,OADYA,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CAKI,IAAI,QAAS,CACT,MAAMiC,EAAMjC,EAAK,UAAU,KAAK,SAAS,EACzC,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CAMI,IAAI,aAAc,CACd,MAAMA,EAAMjC,EAAK,eAAe,KAAK,SAAS,EAC9C,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CAKI,IAAI,eAAgB,CAChB,MAAMA,EAAMjC,EAAK,iBAAiB,KAAK,SAAS,EAChD,OAAOuI,EAAS,OAAOtG,CAAG,CAClC,CAKI,WAAY,CAER,OADYjC,EAAK,aAAa,KAAK,SAAS,IAC7B,CACvB,CAMI,YAAa,CACT,MAAMiC,EAAMjC,EAAK,cAAc,KAAK,SAAS,EAC7C,OAAOiC,IAAQ,EAAI,OAAYwG,EAAW,OAAOxG,CAAG,CAC5D,CAKI,QAAS,CAEL,OADYjC,EAAK,UAAU,KAAK,SAAS,IAC1B,CACvB,CAKI,aAAc,CAEV,OADYA,EAAK,eAAe,KAAK,SAAS,IAC/B,CACvB,CAKI,oBAAqB,CAEjB,OADYA,EAAK,sBAAsB,KAAK,SAAS,IACtC,CACvB,CAMI,cAAe,CAEX,OADYA,EAAK,gBAAgB,KAAK,SAAS,IAChC,CACvB,CAMI,IAAI,QAAS,CACT,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,UAAUyD,EAAQ,KAAK,SAAS,EACrC,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,QAAS,CACT,MAAMlG,EAAMjC,EAAK,UAAU,KAAK,SAAS,EACzC,OAAOiC,IAAQ,EAAI,OAAYgM,EAAO,OAAOhM,CAAG,CACxD,CAcI,UAAW,CACP,GAAI,CACA,MAAMwB,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,YAAYyD,EAAQ,KAAK,SAAS,EACvC,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAO0P,GAAO,OAAO3P,CAAE,CACnC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CASI,SAAU,CACN,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,WAAWyD,EAAQ,KAAK,SAAS,EACtC,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CASI,aAAc,CACV,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,eAAeyD,EAAQ,KAAK,SAAS,EAC1C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,iBAAkB,CACd,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,mBAAmByD,EAAQ,KAAK,SAAS,EAC9C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,QAAS,CACL,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,UAAUyD,EAAQ,KAAK,SAAS,EACrC,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAWI,eAAegC,EAAM,CACjB,GAAI,CACA,MAAMyB,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkBK,EAAMhC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,kBAAkByD,EAAQ,KAAK,UAAW+C,EAAMC,CAAI,EACzD,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,wBAAwBkS,EAAU,CAC9BlS,EAAK,2BAA2B,KAAK,UAAWY,EAAcsR,CAAQ,CAAC,CAC/E,CACA,CAEA,MAAMoB,GAAsB,OAAO,qBAAyB,IACtD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9S,GAAOR,EAAK,kBAAkBQ,IAAQ,EAAG,CAAC,CAAC,EAInE,MAAM6S,EAAO,CAEhB,OAAO,OAAO7S,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOwS,GAAO,SAAS,EAC1C,OAAAxS,EAAI,UAAYL,EAChB8S,GAAmB,SAASzS,EAAKA,EAAI,UAAWA,CAAG,EAC5CA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8S,GAAmB,WAAW,IAAI,EAC3B9S,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,kBAAkBQ,EAAK,CAAC,CACrC,CAMI,kBAAmB,CACf,GAAI,CACA,MAAMiD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,wBAAwByD,EAAQ,KAAK,SAAS,EACnD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CACA,CAEA,MAAMuT,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB/S,GAAOR,EAAK,sBAAsBQ,IAAQ,EAAG,CAAC,CAAC,EAOvE,MAAMgT,CAAW,CAEpB,OAAO,OAAOhT,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO2S,EAAW,SAAS,EAC9C,OAAA3S,EAAI,UAAYL,EAChB+S,GAAuB,SAAS1S,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB+S,GAAuB,WAAW,IAAI,EAC/B/S,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,sBAAsBQ,EAAK,CAAC,CACzC,CAgBI,YAAY2L,EAAYsH,EAAgBC,EAAa,CACjD,GAAI,CACA,MAAMjQ,EAASzD,EAAK,gCAAgC,GAAG,EACvDkE,EAAaiI,EAAYzC,CAAmB,EAC5C,IAAIlD,EAAO2F,EAAW,mBAAoB,EAC1C,MAAM3E,EAAO7F,EAAkB8R,EAAgBzT,EAAK,kBAAmBA,EAAK,kBAAkB,EACxFyH,EAAOrG,EACb,IAAIsG,EAAO1G,EAAW0S,CAAW,EAAI,EAAI/R,EAAkB+R,EAAa1T,EAAK,kBAAmBA,EAAK,kBAAkB,EACnH2H,EAAOvG,EACXpB,EAAK,eAAeyD,EAAQ+C,EAAMgB,EAAMC,EAAMC,EAAMC,CAAI,EACxD,IAAIjE,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxB6P,GAAuB,SAAS,KAAM,KAAK,UAAW,IAAI,EACnD,IACnB,QAAkB,CACNvT,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,OAAO,UAAU2T,EAAO,CACpB,GAAI,CACA,MAAMlQ,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAOvC,GAAkB0P,EAAO3T,EAAK,iBAAiB,EACtDyG,EAAOrF,EACbpB,EAAK,qBAAqByD,EAAQ+C,EAAMC,CAAI,EAC5C,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAO6P,EAAW,OAAO9P,CAAE,CACvC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,SAAU,CACN,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,mBAAmByD,EAAQ,KAAK,SAAS,EAC9C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDqD,EAAKzC,EAAoBX,EAAIC,CAAE,EAAE,MAAO,EAC5C,OAAA3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,EAC3BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAOI,OAAO,WAAWoP,EAAM,CACpB,GAAI,CACA,MAAM3L,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkByN,EAAMpP,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,sBAAsByD,EAAQ+C,EAAMC,CAAI,EAC7C,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAO6P,EAAW,OAAO9P,CAAE,CACvC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CASI,UAAW,CACP,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,oBAAoByD,EAAQ,KAAK,SAAS,EAC/C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAUI,IAAI,WAAY,CACZ,MAAMlG,EAAMjC,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAO0J,EAAoB,OAAOzH,CAAG,CAC7C,CAMI,IAAI,eAAgB,CAChB,IAAIiG,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,yBAAyByD,EAAQ,KAAK,SAAS,EACpD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CASI,IAAI,YAAa,CACb,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,sBAAsByD,EAAQ,KAAK,SAAS,EACjD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,MAAO,CAEP,OADYA,EAAK,gBAAgB,KAAK,SAAS,CAEvD,CACA,CAEA,MAAM4T,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpT,GAAOR,EAAK,sBAAsBQ,IAAQ,EAAG,CAAC,CAAC,EAIvE,MAAMqT,CAAW,CAEpB,OAAO,OAAOrT,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOgT,EAAW,SAAS,EAC9C,OAAAhT,EAAI,UAAYL,EAChBoT,GAAuB,SAAS/S,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoT,GAAuB,WAAW,IAAI,EAC/BpT,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,sBAAsBQ,EAAK,CAAC,CACzC,CASI,OAAO,UAAUsT,EAAQ,CACrB,GAAI,CACA,MAAMrQ,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,qBAAqByD,EAAQgB,GAAkBqP,CAAM,CAAC,EAC3D,IAAIpQ,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOkQ,EAAW,OAAOnQ,CAAE,CACvC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,EACvCU,EAAK8D,GAAe,EAAI,MACpC,CACA,CACA,CAEA,MAAMuP,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvT,GAAOR,EAAK,4BAA4BQ,IAAQ,EAAG,CAAC,CAAC,EAO7E,MAAMwT,EAAiB,CAE1B,OAAO,OAAOxT,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOmT,GAAiB,SAAS,EACpD,OAAAnT,EAAI,UAAYL,EAChBuT,GAA6B,SAASlT,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuT,GAA6B,WAAW,IAAI,EACrCvT,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,4BAA4BQ,EAAK,CAAC,CAC/C,CAeI,cAAcuP,EAAkB,CAC5B,MAAMvJ,EAAO7E,EAAkBoO,EAAkB/P,EAAK,kBAAmBA,EAAK,kBAAkB,EAC1FyG,EAAOrF,EACPa,EAAMjC,EAAK,+BAA+B,KAAK,UAAWwG,EAAMC,CAAI,EAC1E,OAAOtE,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAMgS,GAAsB,OAAO,qBAAyB,IACtD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBzT,GAAOR,EAAK,kBAAkBQ,IAAQ,EAAG,CAAC,CAAC,EAMnE,MAAMyN,CAAO,CAEhB,OAAO,OAAOzN,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOoN,EAAO,SAAS,EAC1C,OAAApN,EAAI,UAAYL,EAChByT,GAAmB,SAASpT,EAAKA,EAAI,UAAWA,CAAG,EAC5CA,CACf,CAEI,OAAO,SAASiS,EAAS,CACrB,OAAMA,aAAmB7E,EAGlB6E,EAAQ,mBAAoB,EAFxB,CAGnB,CAEI,oBAAqB,CACjB,MAAMtS,EAAM,KAAK,UACjB,YAAK,UAAY,EACjByT,GAAmB,WAAW,IAAI,EAC3BzT,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,kBAAkBQ,EAAK,CAAC,CACrC,CAKI,YAAY6K,EAAI,CACZ,GAAI,CACA,MAAM5H,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkB0J,EAAIrL,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5EyG,EAAOrF,EACbpB,EAAK,WAAWyD,EAAQ+C,EAAMC,CAAI,EAClC,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxBuQ,GAAmB,SAAS,KAAM,KAAK,UAAW,IAAI,EAC/C,IACnB,QAAkB,CACNjU,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,UAAW,CACP,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kBAAkByD,EAAQ,KAAK,SAAS,EAC7C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAM+L,GAA6B,OAAO,qBAAyB,IAC7D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB1T,GAAOR,EAAK,yBAAyBQ,IAAQ,EAAG,CAAC,CAAC,EAI1E,MAAM2T,EAAc,CAEvB,OAAO,OAAO3T,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOsT,GAAc,SAAS,EACjD,OAAAtT,EAAI,UAAYL,EAChB0T,GAA0B,SAASrT,EAAKA,EAAI,UAAWA,CAAG,EACnDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB0T,GAA0B,WAAW,IAAI,EAClC1T,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,yBAAyBQ,EAAK,CAAC,CAC5C,CAKI,IAAI,OAAQ,CAER,OADYR,EAAK,8BAA8B,KAAK,SAAS,CAErE,CAKI,IAAI,MAAMgD,EAAM,CACZhD,EAAK,8BAA8B,KAAK,UAAWgD,CAAI,CAC/D,CAKI,IAAI,UAAW,CAEX,OADYhD,EAAK,iCAAiC,KAAK,SAAS,CAExE,CAKI,IAAI,SAASgD,EAAM,CACfhD,EAAK,iCAAiC,KAAK,UAAWgD,CAAI,CAClE,CACA,CAEA,MAAMoR,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB5T,GAAOR,EAAK,+BAA+BQ,IAAQ,EAAG,CAAC,CAAC,EAKhF,MAAM6T,EAAoB,CAE7B,OAAO,OAAO7T,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOwT,GAAoB,SAAS,EACvD,OAAAxT,EAAI,UAAYL,EAChB4T,GAAgC,SAASvT,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB4T,GAAgC,WAAW,IAAI,EACxC5T,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,+BAA+BQ,EAAK,CAAC,CAClD,CAKI,IAAI,eAAgB,CAEhB,OADYR,EAAK,4CAA4C,KAAK,SAAS,IAC5D,CACvB,CAKI,IAAI,YAAa,CAEb,OADYA,EAAK,yCAAyC,KAAK,SAAS,IACzD,CACvB,CASI,MAAO,CACH,MAAMiC,EAAMjC,EAAK,yBAAyB,KAAK,SAAS,EACxD,OAAOmC,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAMqS,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9T,GAAOR,EAAK,uBAAuBQ,IAAQ,EAAG,CAAC,CAAC,EAIxE,MAAM+T,EAAY,CAErB,OAAO,OAAO/T,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO0T,GAAY,SAAS,EAC/C,OAAA1T,EAAI,UAAYL,EAChB8T,GAAwB,SAASzT,EAAKA,EAAI,UAAWA,CAAG,EACjDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8T,GAAwB,WAAW,IAAI,EAChC9T,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,uBAAuBQ,EAAK,CAAC,CAC1C,CAMI,IAAI,WAAY,CAEZ,OADYR,EAAK,sBAAsB,KAAK,SAAS,CAE7D,CAKI,IAAI,QAAS,CACT,MAAMiC,EAAMjC,EAAK,mBAAmB,KAAK,SAAS,EAClD,OAAOiO,EAAO,OAAOhM,CAAG,CAChC,CAKI,IAAI,WAAY,CACZ,MAAMA,EAAMjC,EAAK,sBAAsB,KAAK,SAAS,EACrD,OAAO0J,EAAoB,OAAOzH,CAAG,CAC7C,CAKI,IAAI,WAAY,CACZ,IAAIiG,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,sBAAsByD,EAAQ,KAAK,SAAS,EACjD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMqM,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBhU,GAAOR,EAAK,+BAA+BQ,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAMiU,EAAoB,CAE7B,OAAO,OAAOjU,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO4T,GAAoB,SAAS,EACvD,OAAA5T,EAAI,UAAYL,EAChBgU,GAAgC,SAAS3T,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBgU,GAAgC,WAAW,IAAI,EACxChU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,+BAA+BQ,EAAK,CAAC,CAClD,CAKI,IAAI,QAAS,CACT,MAAMyB,EAAMjC,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CAKI,IAAI,WAAY,CAEZ,OADYjC,EAAK,8BAA8B,KAAK,SAAS,CAErE,CAMI,IAAI,cAAe,CACf,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,iCAAiCyD,EAAQ,KAAK,SAAS,EAC5D,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,QAAS,CACT,MAAMlG,EAAMjC,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAOiO,EAAO,OAAOhM,CAAG,CAChC,CAKI,IAAI,WAAY,CACZ,IAAIiG,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,8BAA8ByD,EAAQ,KAAK,SAAS,EACzD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMuM,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlU,GAAOR,EAAK,8BAA8BQ,IAAQ,EAAG,CAAC,CAAC,EAO/E,MAAMmU,EAAmB,CAE5B,OAAO,OAAOnU,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO8T,GAAmB,SAAS,EACtD,OAAA9T,EAAI,UAAYL,EAChBkU,GAA+B,SAAS7T,EAAKA,EAAI,UAAWA,CAAG,EACxDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkU,GAA+B,WAAW,IAAI,EACvClU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,8BAA8BQ,EAAK,CAAC,CACjD,CAKI,IAAI,IAAK,CACL,MAAMyB,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,SAAU,CACV,MAAMA,EAAMjC,EAAK,iCAAiC,KAAK,SAAS,EAChE,OAAOmC,EAAWF,CAAG,CAC7B,CASI,IAAI,QAAS,CACT,MAAMA,EAAMjC,EAAK,oCAAoC,KAAK,SAAS,EACnE,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,YAAa,CACb,MAAMA,EAAMjC,EAAK,0DAA0D,KAAK,SAAS,EACzF,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,MAAO,CACP,MAAMA,EAAMjC,EAAK,kCAAkC,KAAK,SAAS,EACjE,OAAOmC,EAAWF,CAAG,CAC7B,CASI,YAAYoJ,EAAIiF,EAASsE,EAAQ/J,EAAYC,EAAS,CAClD,MAAM7I,EAAMjC,EAAK,uBAAuBY,EAAcyK,CAAE,EAAGzK,EAAc0P,CAAO,EAAG1P,EAAcgU,CAAM,EAAGhU,EAAciK,CAAU,EAAGjK,EAAckK,CAAO,CAAC,EAC3J,YAAK,UAAY7I,IAAQ,EACzByS,GAA+B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC3D,IACf,CAKI,IAAI,MAAO,CAEP,OADY1U,EAAK,wBAAwB,KAAK,SAAS,CAE/D,CACA,CAEA,MAAM6U,GAA4B,OAAO,qBAAyB,IAC5D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBrU,GAAOR,EAAK,wBAAwBQ,IAAQ,EAAG,CAAC,CAAC,EAIzE,MAAM6R,EAAa,CAEtB,OAAO,OAAO7R,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOwR,GAAa,SAAS,EAChD,OAAAxR,EAAI,UAAYL,EAChBqU,GAAyB,SAAShU,EAAKA,EAAI,UAAWA,CAAG,EAClDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBqU,GAAyB,WAAW,IAAI,EACjCrU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,wBAAwBQ,EAAK,CAAC,CAC3C,CAOI,IAAI,WAAY,CAEZ,OADYR,EAAK,iCAAiC,KAAK,SAAS,CAExE,CAOI,IAAI,UAAUgD,EAAM,CAChBhD,EAAK,iCAAiC,KAAK,UAAWgD,CAAI,CAClE,CAMI,IAAI,yBAA0B,CAE1B,OADYhD,EAAK,+CAA+C,KAAK,SAAS,IAC/D,CACvB,CAMI,IAAI,wBAAwBgD,EAAM,CAC9BhD,EAAK,+CAA+C,KAAK,UAAWgD,CAAI,CAChF,CAMI,IAAI,yBAA0B,CAC1B,GAAI,CACA,MAAMS,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,+CAA+CyD,EAAQ,KAAK,SAAS,EAC1E,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,WAAWsC,EAAS,EAAI,EAAG,EAAI,EAC7D,OAAOC,IAAO,EAAI,OAAYgD,CAC1C,QAAkB,CACN1G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAMI,IAAI,wBAAwBgD,EAAM,CAC9BhD,EAAK,+CAA+C,KAAK,UAAW,CAACgB,EAAWgC,CAAI,EAAGhC,EAAWgC,CAAI,EAAI,EAAIA,CAAI,CAC1H,CAMI,IAAI,+BAAgC,CAChC,GAAI,CACA,MAAMS,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,qDAAqDyD,EAAQ,KAAK,SAAS,EAChF,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,WAAWsC,EAAS,EAAI,EAAG,EAAI,EAC7D,OAAOC,IAAO,EAAI,OAAYgD,CAC1C,QAAkB,CACN1G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAMI,IAAI,8BAA8BgD,EAAM,CACpChD,EAAK,qDAAqD,KAAK,UAAW,CAACgB,EAAWgC,CAAI,EAAGhC,EAAWgC,CAAI,EAAI,EAAIA,CAAI,CAChI,CAII,aAAc,CACV,MAAMf,EAAMjC,EAAK,iBAAkB,EACnC,YAAK,UAAYiC,IAAQ,EACzB4S,GAAyB,SAAS,KAAM,KAAK,UAAW,IAAI,EACrD,IACf,CACA,CAEA,MAAMC,GAAmB,OAAO,qBAAyB,IACnD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBtU,GAAOR,EAAK,eAAeQ,IAAQ,EAAG,CAAC,CAAC,EAIhE,MAAMuU,EAAI,CAEb,OAAO,OAAOvU,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOkU,GAAI,SAAS,EACvC,OAAAlU,EAAI,UAAYL,EAChBsU,GAAgB,SAASjU,EAAKA,EAAI,UAAWA,CAAG,EACzCA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBsU,GAAgB,WAAW,IAAI,EACxBtU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,eAAeQ,EAAK,CAAC,CAClC,CAKI,IAAI,QAAS,CACT,MAAMyB,EAAMjC,EAAK,WAAW,KAAK,SAAS,EAC1C,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CAKI,IAAI,UAAW,CACX,MAAMA,EAAMjC,EAAK,aAAa,KAAK,SAAS,EAC5C,OAAOuI,EAAS,OAAOtG,CAAG,CAClC,CAKI,IAAI,aAAc,CACd,MAAMA,EAAMjC,EAAK,gBAAgB,KAAK,SAAS,EAC/C,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CAKI,IAAI,eAAgB,CAChB,MAAMA,EAAMjC,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOuI,EAAS,OAAOtG,CAAG,CAClC,CAMI,IAAI,QAAS,CACT,IAAIiG,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,WAAWyD,EAAQ,KAAK,SAAS,EACtC,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,QAAS,CACT,MAAMlG,EAAMjC,EAAK,WAAW,KAAK,SAAS,EAC1C,OAAOiC,IAAQ,EAAI,OAAYgM,EAAO,OAAOhM,CAAG,CACxD,CAMI,eAAgB,CAEZ,OADYjC,EAAK,kBAAkB,KAAK,SAAS,IAClC,CACvB,CAKI,oBAAqB,CAEjB,OADYA,EAAK,uBAAuB,KAAK,SAAS,IACvC,CACvB,CAMI,oBAAqB,CAEjB,OADYA,EAAK,uBAAuB,KAAK,SAAS,IACvC,CACvB,CAKI,iBAAkB,CAEd,OADYA,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CAKI,iBAAkB,CAEd,OADYA,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CAMI,YAAa,CACT,MAAMiC,EAAMjC,EAAK,eAAe,KAAK,SAAS,EAC9C,OAAOiC,IAAQ,EAAI,OAAYwG,EAAW,OAAOxG,CAAG,CAC5D,CAMI,WAAY,CAER,OADYjC,EAAK,cAAc,KAAK,SAAS,IAC9B,CACvB,CASI,QAAS,CACL,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,WAAWyD,EAAQ,KAAK,SAAS,EACtC,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAYI,SAAU,CACN,MAAMiC,EAAMjC,EAAK,YAAY,KAAK,SAAS,EAC3C,OAAOmC,EAAWF,CAAG,CAC7B,CAQI,QAAS,CACL,GAAI,CACA,MAAMwB,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,WAAWyD,EAAQ,KAAK,SAAS,EACtC,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAWI,eAAegC,EAAM,CACjB,GAAI,CACA,MAAMyB,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkBK,EAAMhC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,mBAAmByD,EAAQ,KAAK,UAAW+C,EAAMC,CAAI,EAC1D,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,UAAW,CAEP,OADYA,EAAK,aAAa,KAAK,SAAS,IAC7B,CACvB,CAKI,gBAAiB,CAEb,OADYA,EAAK,mBAAmB,KAAK,SAAS,IACnC,CACvB,CAKI,QAAS,CAEL,OADYA,EAAK,WAAW,KAAK,SAAS,IAC3B,CACvB,CAKI,aAAc,CAEV,OADYA,EAAK,gBAAgB,KAAK,SAAS,IAChC,CACvB,CAQI,OAAQ,CACJ,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,UAAUyD,EAAQ,KAAK,SAAS,EACrC,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKpC,EAAyBhB,EAAIC,CAAE,EAAE,MAAO,EAC7C3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAWI,YAAa,CACT,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,eAAeyD,EAAQ,KAAK,SAAS,EAC1C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKzC,EAAoBX,EAAIC,CAAE,EAAE,MAAO,EACxC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CASI,UAAW,CACP,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,aAAayD,EAAQ,KAAK,SAAS,EACxC,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKhC,GAAqBpB,EAAIC,CAAE,EAAE,MAAO,EACzC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,wBAAwBkS,EAAU,CAC9BlS,EAAK,4BAA4B,KAAK,UAAWY,EAAcsR,CAAQ,CAAC,CAChF,CACA,CAEA,MAAM8C,GAA6B,OAAO,qBAAyB,IAC7D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBxU,GAAOR,EAAK,yBAAyBQ,IAAQ,EAAG,CAAC,CAAC,EAK1E,MAAMkQ,CAAc,CAEvB,OAAO,OAAOlQ,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO6P,EAAc,SAAS,EACjD,OAAA7P,EAAI,UAAYL,EAChBwU,GAA0B,SAASnU,EAAKA,EAAI,UAAWA,CAAG,EACnDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBwU,GAA0B,WAAW,IAAI,EAClCxU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,yBAAyBQ,EAAK,CAAC,CAC5C,CAKI,IAAI,WAAY,CACZ,IAAI0H,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,wBAAwByD,EAAQ,KAAK,SAAS,EACnD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,gBAAiB,CACjB,IAAID,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,6BAA6ByD,EAAQ,KAAK,SAAS,EACxD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,gBAAiB,CACjB,IAAID,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,6BAA6ByD,EAAQ,KAAK,SAAS,EACxD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,cAAe,CACf,MAAMlG,EAAMjC,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAOiC,IAAQ,EAAI,OAAYgG,GAAoB,OAAOhG,CAAG,CACrE,CAKI,SAAU,CACN,GAAI,CACA,MAAMwB,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,sBAAsByD,EAAQ,KAAK,SAAS,EACjD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAMI,OAAO,UAAUiV,EAAM,CACnB,GAAI,CACA,MAAMxR,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,wBAAwByD,EAAQ7C,EAAcqU,CAAI,CAAC,EACxD,IAAIvR,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAO+M,EAAc,OAAOhN,CAAE,CAC1C,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CACA,CAEA,MAAMkV,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB1U,GAAOR,EAAK,sBAAsBQ,IAAQ,EAAG,CAAC,CAAC,EASvE,MAAMmN,EAAW,CAEpB,OAAO,OAAOnN,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO8M,GAAW,SAAS,EAC9C,OAAA9M,EAAI,UAAYL,EAChB0U,GAAuB,SAASrU,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB0U,GAAuB,WAAW,IAAI,EAC/B1U,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,sBAAsBQ,EAAK,CAAC,CACzC,CAKI,YAAY+B,EAAM,CACd,GAAI,CACA,MAAMkB,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkBY,EAAMvC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EyG,EAAOrF,EACbpB,EAAK,eAAeyD,EAAQ+C,EAAMC,CAAI,EACtC,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxBwR,GAAuB,SAAS,KAAM,KAAK,UAAW,IAAI,EACnD,IACnB,QAAkB,CACNlV,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,IAAI,MAAO,CACP,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,gBAAgByD,EAAQ,KAAK,SAAS,EAC3C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,MAAO,CACP,MAAMlG,EAAMjC,EAAK,gBAAgB,KAAK,SAAS,EAC/C,OAAOiC,IAAQ,SAAW,OAAYA,CAC9C,CAMI,aAAc,CAEV,OADYjC,EAAK,uBAAuB,KAAK,SAAS,IACvC,CACvB,CACA,CAEA,MAAMmV,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB3U,GAAOR,EAAK,uBAAuBQ,IAAQ,EAAG,CAAC,CAAC,EAKxE,MAAMsJ,EAAY,CAErB,OAAO,OAAOtJ,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOiJ,GAAY,SAAS,EAC/C,OAAAjJ,EAAI,UAAYL,EAChB2U,GAAwB,SAAStU,EAAKA,EAAI,UAAWA,CAAG,EACjDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB2U,GAAwB,WAAW,IAAI,EAChC3U,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,uBAAuBQ,EAAK,CAAC,CAC1C,CAKI,IAAI,OAAQ,CAER,OADYR,EAAK,4BAA4B,KAAK,SAAS,CAEnE,CAKI,IAAI,MAAMgD,EAAM,CACZhD,EAAK,4BAA4B,KAAK,UAAWgD,CAAI,CAC7D,CAMI,IAAI,MAAO,CACP,MAAMf,EAAMjC,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAOiC,IAAQ,EAAI,OAAYA,CACvC,CAMI,IAAI,KAAKe,EAAM,CACXhD,EAAK,2BAA2B,KAAK,UAAWgB,EAAWgC,CAAI,EAAI,EAAIA,CAAI,CACnF,CAKI,IAAI,SAAU,CACV,GAAI,CACA,MAAMS,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,oBAAoByD,EAAQ,KAAK,SAAS,EAC/C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,IAAIqD,EACJ,OAAIpD,IAAO,IACPoD,EAAKvG,EAAmBmD,EAAIC,CAAE,EAAE,MAAO,EACvC3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CACA,CAEA,MAAMoV,GAAyB,OAAO,qBAAyB,IACzD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB5U,GAAOR,EAAK,qBAAqBQ,IAAQ,EAAG,CAAC,CAAC,EAKtE,MAAMsO,EAAU,CAEnB,OAAO,OAAOtO,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOiO,GAAU,SAAS,EAC7C,OAAAjO,EAAI,UAAYL,EAChB4U,GAAsB,SAASvU,EAAKA,EAAI,UAAWA,CAAG,EAC/CA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB4U,GAAsB,WAAW,IAAI,EAC9B5U,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,qBAAqBQ,EAAK,CAAC,CACxC,CAKI,IAAI,SAAU,CACV,MAAMyB,EAAMjC,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOiC,IAAQ,EAAI,OAAYsK,EAAiB,OAAOtK,CAAG,CAClE,CAKI,UAAW,CACP,IAAIiG,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,mBAAmByD,EAAQ,KAAK,SAAS,EAC9C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMkN,GAAsC,OAAO,qBAAyB,IACtE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB7U,GAAOR,EAAK,kCAAkCQ,IAAQ,EAAG,CAAC,CAAC,EASnF,MAAM4I,EAAuB,CAEhC,OAAO,OAAO5I,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOuI,GAAuB,SAAS,EAC1D,OAAAvI,EAAI,UAAYL,EAChB6U,GAAmC,SAASxU,EAAKA,EAAI,UAAWA,CAAG,EAC5DA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB6U,GAAmC,WAAW,IAAI,EAC3C7U,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,kCAAkCQ,EAAK,CAAC,CACrD,CAQI,IAAI,IAAK,CACL,MAAMyB,EAAMjC,EAAK,+CAA+C,KAAK,SAAS,EAC9E,OAAOmC,EAAWF,CAAG,CAC7B,CAOI,IAAI,MAAO,CACP,MAAMA,EAAMjC,EAAK,oCAAoC,KAAK,SAAS,EACnE,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,YAAYoJ,EAAIiK,EAAa,CACzB,MAAMrT,EAAMjC,EAAK,2BAA2BY,EAAcyK,CAAE,EAAGzK,EAAc0U,CAAW,CAAC,EACzF,YAAK,UAAYrT,IAAQ,EACzBoT,GAAmC,SAAS,KAAM,KAAK,UAAW,IAAI,EAC/D,IACf,CAKI,IAAI,MAAO,CAEP,OADYrV,EAAK,4BAA4B,KAAK,SAAS,CAEnE,CACA,CAEA,MAAMuV,GAAqC,OAAO,qBAAyB,IACrE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB/U,GAAOR,EAAK,iCAAiCQ,IAAQ,EAAG,CAAC,CAAC,EAIlF,MAAMgV,EAAsB,CAE/B,OAAO,OAAOhV,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAO2U,GAAsB,SAAS,EACzD,OAAA3U,EAAI,UAAYL,EAChB+U,GAAkC,SAAS1U,EAAKA,EAAI,UAAWA,CAAG,EAC3DA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB+U,GAAkC,WAAW,IAAI,EAC1C/U,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,iCAAiCQ,EAAK,CAAC,CACpD,CAMI,IAAI,aAAc,CAEd,OADYR,EAAK,kCAAkC,KAAK,SAAS,CAEzE,CAMI,IAAI,WAAY,CAEZ,OADYA,EAAK,gCAAgC,KAAK,SAAS,CAEvE,CAYI,SAAU,CAEN,OADYA,EAAK,8BAA8B,KAAK,SAAS,IAC9C,CACvB,CACA,CAEA,MAAMyV,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjV,GAAOR,EAAK,sBAAsBQ,IAAQ,EAAG,CAAC,CAAC,EAIvE,MAAM2K,EAAW,CAEpB,OAAO,OAAO3K,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOsK,GAAW,SAAS,EAC9C,OAAAtK,EAAI,UAAYL,EAChBiV,GAAuB,SAAS5U,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiV,GAAuB,WAAW,IAAI,EAC/BjV,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,sBAAsBQ,EAAK,CAAC,CACzC,CAII,aAAc,CACV,MAAMyB,EAAMjC,EAAK,eAAgB,EACjC,YAAK,UAAYiC,IAAQ,EACzBwT,GAAuB,SAAS,KAAM,KAAK,UAAW,IAAI,EACnD,IACf,CASI,aAAaC,EAAQC,EAAQnJ,EAAW,CACpCtI,EAAawR,EAAQpN,CAAM,EAC3BpE,EAAayR,EAAQjK,CAAW,EAChCxH,EAAasI,EAAWD,CAAgB,EACxC,MAAMtK,EAAMjC,EAAK,wBAAwB,KAAK,UAAW0V,EAAO,UAAWC,EAAO,UAAWnJ,EAAU,SAAS,EAChH,OAAOvK,IAAQ,EAAI,OAAY4M,GAAe,OAAO5M,CAAG,CAChE,CAQI,aAAayT,EAAQC,EAAQ,CACzBzR,EAAawR,EAAQpN,CAAM,EAC3BpE,EAAayR,EAAQjK,CAAW,EAChC,MAAMzJ,EAAMjC,EAAK,wBAAwB,KAAK,UAAW0V,EAAO,UAAWC,EAAO,SAAS,EAC3F,OAAO1T,IAAQ,EAAI,OAAYsK,EAAiB,OAAOtK,CAAG,CAClE,CAMI,IAAIyT,EAAQ,CACRxR,EAAawR,EAAQpN,CAAM,EAC3B,MAAMrG,EAAMjC,EAAK,eAAe,KAAK,UAAW0V,EAAO,SAAS,EAChE,OAAOvT,EAAWF,CAAG,CAC7B,CAII,OAAQ,CACJjC,EAAK,iBAAiB,KAAK,SAAS,CAC5C,CAMI,SAAU,CAEN,OADYA,EAAK,mBAAmB,KAAK,SAAS,IACnC,CACvB,CAKI,IAAI,OAAQ,CAER,OADYA,EAAK,iBAAiB,KAAK,SAAS,IACjC,CACvB,CAKI,QAAS,CACL,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kBAAkByD,EAAQ,KAAK,SAAS,EAC7C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CACA,CAEA,MAAM4V,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpV,GAAOR,EAAK,uBAAuBQ,IAAQ,EAAG,CAAC,CAAC,EAQxE,MAAM8O,CAAY,CAErB,OAAO,OAAO9O,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOyO,EAAY,SAAS,EAC/C,OAAAzO,EAAI,UAAYL,EAChBoV,GAAwB,SAAS/U,EAAKA,EAAI,UAAWA,CAAG,EACjDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoV,GAAwB,WAAW,IAAI,EAChCpV,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,uBAAuBQ,EAAK,CAAC,CAC1C,CAqBI,OAAO,KAAKmP,EAAYC,EAAkB,CACtC,IAAIpJ,EAAOxF,EAAW2O,CAAU,EAAI,EAAIhO,EAAkBgO,EAAY3P,EAAK,kBAAmBA,EAAK,kBAAkB,EACjHyG,EAAOrF,EACPoG,EAAOxG,EAAW4O,CAAgB,EAAI,EAAIjO,EAAkBiO,EAAkB5P,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7HyH,EAAOrG,EACX,MAAMa,EAAMjC,EAAK,iBAAiBwG,EAAMC,EAAMe,EAAMC,CAAI,EACxD,OAAOtF,EAAWF,CAAG,CAC7B,CAgBI,OAAO,YAAY0N,EAAYkG,EAAW,CACtC,MAAMrP,EAAO7E,EAAkBgO,EAAY3P,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFyG,EAAOrF,EACPoG,EAAOvD,GAAkB4R,EAAW7V,EAAK,iBAAiB,EAC1DyH,EAAOrG,EACPa,EAAMjC,EAAK,wBAAwBwG,EAAMC,EAAMe,EAAMC,CAAI,EAC/D,OAAOtF,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAM6T,GAA+B,OAAO,qBAAyB,IAC/D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBtV,GAAOR,EAAK,2BAA2BQ,IAAQ,EAAG,CAAC,CAAC,EAS5E,MAAMuV,EAAgB,CAEzB,OAAO,OAAOvV,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOkV,GAAgB,SAAS,EACnD,OAAAlV,EAAI,UAAYL,EAChBsV,GAA4B,SAASjV,EAAKA,EAAI,UAAWA,CAAG,EACrDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBsV,GAA4B,WAAW,IAAI,EACpCtV,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,2BAA2BQ,EAAK,CAAC,CAC9C,CAQI,IAAI,IAAK,CACL,MAAMyB,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,YAAa,CACb,MAAMA,EAAMjC,EAAK,iCAAiC,KAAK,SAAS,EAChE,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,IAAI,QAAS,CACT,MAAMA,EAAMjC,EAAK,oCAAoC,KAAK,SAAS,EACnE,OAAOmC,EAAWF,CAAG,CAC7B,CAOI,IAAI,MAAO,CACP,MAAMA,EAAMjC,EAAK,0DAA0D,KAAK,SAAS,EACzF,OAAOmC,EAAWF,CAAG,CAC7B,CAQI,YAAYoJ,EAAIR,EAAY+J,EAAQxG,EAAM,CACtC,MAAMnM,EAAMjC,EAAK,oBAAoBY,EAAcyK,CAAE,EAAGzK,EAAciK,CAAU,EAAGjK,EAAcgU,CAAM,EAAGhU,EAAcwN,CAAI,CAAC,EAC7H,YAAK,UAAYnM,IAAQ,EACzB6T,GAA4B,SAAS,KAAM,KAAK,UAAW,IAAI,EACxD,IACf,CAKI,IAAI,MAAO,CAEP,OADY9V,EAAK,qBAAqB,KAAK,SAAS,CAE5D,CACA,CAEA,MAAMgW,GAAuB,OAAO,qBAAyB,IACvD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBxV,GAAOR,EAAK,mBAAmBQ,IAAQ,EAAG,CAAC,CAAC,EAIpE,MAAMyV,EAAQ,CAEjB,oBAAqB,CACjB,MAAMzV,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBwV,GAAoB,WAAW,IAAI,EAC5BxV,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,mBAAmBQ,EAAK,CAAC,CACtC,CAOI,OAAO,aAAc,CAEjB,OADYR,EAAK,oBAAqB,IACvB,CACvB,CAKI,YAAYkW,EAAW,CACnB,GAAI,CACA,MAAMzS,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,YAAYyD,EAAQyS,CAAS,EAClC,IAAIxS,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxBsS,GAAoB,SAAS,KAAM,KAAK,UAAW,IAAI,EAChD,IACnB,QAAkB,CACNhW,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,SAASkW,EAAW,CACpB,GAAI,CACA,MAAMzS,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,qBAAqByD,EAAQ,KAAK,UAAWyS,CAAS,EAC3D,IAAIxS,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIE,EACA,MAAMxB,EAAWuB,CAAE,CAEnC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,QAAS,CACL,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,eAAeyD,EAAQ,KAAK,SAAS,EAC1C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIE,EACA,MAAMxB,EAAWuB,CAAE,CAEnC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAII,SAAU,CACN,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,gBAAgByD,EAAQ,KAAK,SAAS,EAC3C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIE,EACA,MAAMxB,EAAWuB,CAAE,CAEnC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CACA,CAEA,MAAMmW,GAAwC,OAAO,qBAAyB,IACxE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB3V,GAAOR,EAAK,oCAAoCQ,IAAQ,EAAG,CAAC,CAAC,EAOrF,MAAM2I,EAAyB,CAElC,OAAO,OAAO3I,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOsI,GAAyB,SAAS,EAC5D,OAAAtI,EAAI,UAAYL,EAChB2V,GAAqC,SAAStV,EAAKA,EAAI,UAAWA,CAAG,EAC9DA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB2V,GAAqC,WAAW,IAAI,EAC7C3V,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,oCAAoCQ,EAAK,CAAC,CACvD,CAQI,IAAI,MAAO,CACP,MAAMyB,EAAMjC,EAAK,0CAA0C,KAAK,SAAS,EACzE,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,YAAYmM,EAAM,CACd,MAAMnM,EAAMjC,EAAK,+BAA+BY,EAAcwN,CAAI,CAAC,EACnE,YAAK,UAAYnM,IAAQ,EACzBkU,GAAqC,SAAS,KAAM,KAAK,UAAW,IAAI,EACjE,IACf,CACA,CAEA,MAAMC,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB5V,GAAOR,EAAK,uBAAuBQ,IAAQ,EAAG,CAAC,CAAC,EAIxE,MAAM6V,EAAY,CAErB,OAAO,OAAO7V,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOwV,GAAY,SAAS,EAC/C,OAAAxV,EAAI,UAAYL,EAChB4V,GAAwB,SAASvV,EAAKA,EAAI,UAAWA,CAAG,EACjDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB4V,GAAwB,WAAW,IAAI,EAChC5V,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,uBAAuBQ,EAAK,CAAC,CAC1C,CAMI,IAAIgK,EAAW,CACXtG,EAAasG,EAAWjC,CAAQ,EAChC,MAAMtG,EAAMjC,EAAK,gBAAgB,KAAK,UAAWwK,EAAU,SAAS,EACpE,OAAOvI,IAAQ,EAAI,OAAY0I,EAAO,OAAO1I,CAAG,CACxD,CASI,eAAgB,CAEZ,OADYjC,EAAK,0BAA0B,KAAK,SAAS,IAC1C,CACvB,CAKI,MAAO,CACH,MAAMiC,EAAMjC,EAAK,iBAAiB,KAAK,SAAS,EAChD,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,SAAU,CACN,MAAMA,EAAMjC,EAAK,oBAAoB,KAAK,SAAS,EACnD,OAAOmC,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAMqU,GAAsB,OAAO,qBAAyB,IACtD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9V,GAAOR,EAAK,kBAAkBQ,IAAQ,EAAG,CAAC,CAAC,EAMnE,MAAM8H,CAAO,CAEhB,OAAO,OAAO9H,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOyH,EAAO,SAAS,EAC1C,OAAAzH,EAAI,UAAYL,EAChB8V,GAAmB,SAASzV,EAAKA,EAAI,UAAWA,CAAG,EAC5CA,CACf,CAEI,OAAO,SAASiS,EAAS,CACrB,OAAMA,aAAmBxK,EAGlBwK,EAAQ,mBAAoB,EAFxB,CAGnB,CAEI,oBAAqB,CACjB,MAAMtS,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8V,GAAmB,WAAW,IAAI,EAC3B9V,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,kBAAkBQ,EAAK,CAAC,CACrC,CAKI,YAAY6K,EAAI,CACZ,GAAI,CACA,MAAM5H,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAO7E,EAAkB0J,EAAIrL,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5EyG,EAAOrF,EACbpB,EAAK,WAAWyD,EAAQ+C,EAAMC,CAAI,EAClC,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,YAAK,UAAYD,IAAO,EACxB4S,GAAmB,SAAS,KAAM,KAAK,UAAW,IAAI,EAC/C,IACnB,QAAkB,CACNtW,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,WAAY,CACZ,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,iBAAiByD,EAAQ,KAAK,SAAS,EAC5C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,YAAa,CACb,MAAMlG,EAAMjC,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAO2N,GAAW,OAAO1L,CAAG,CACpC,CASI,cAAe,CAEX,OADYjC,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CAKI,UAAW,CACP,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,kBAAkByD,EAAQ,KAAK,SAAS,EAC7C,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAQI,OAAQ,CACJ,MAAMlG,EAAMjC,EAAK,aAAa,KAAK,SAAS,EAC5C,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CACA,CAEA,MAAMsU,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB/V,GAAOR,EAAK,+BAA+BQ,IAAQ,EAAG,CAAC,CAAC,EAWhF,MAAM0Q,CAAoB,CAE7B,OAAO,OAAO1Q,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOqQ,EAAoB,SAAS,EACvD,OAAArQ,EAAI,UAAYL,EAChB+V,GAAgC,SAAS1V,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB+V,GAAgC,WAAW,IAAI,EACxC/V,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,+BAA+BQ,EAAK,CAAC,CAClD,CAYI,OAAO,QAAQgW,EAAaC,EAAeC,EAAe9L,EAAS,CAC/D,IAAI2C,EACAC,EACJ,GAAI,CACA,MAAM/J,EAASzD,EAAK,gCAAgC,GAAG,EACvDkE,EAAasS,EAAalO,CAAM,EAChCpE,EAAauS,EAAelO,CAAQ,EACpCrE,EAAawS,EAAepO,CAAM,EAClC,IAAI9B,EAAOxF,EAAW4J,CAAO,EAAI,EAAItG,EAAwBsG,EAAS5K,EAAK,iBAAiB,EACxFyG,EAAOrF,EACXpB,EAAK,4BAA4ByD,EAAQ+S,EAAY,UAAWC,EAAc,UAAWC,EAAc,UAAWlQ,EAAMC,CAAI,EAC5H,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiE,EAAOhE,EACPiE,EAAOhE,EACX,GAAIkD,EACA,MAAAa,EAAO,EAAGC,EAAO,EACXxF,EAAWuE,CAAE,EAEvB,OAAA6G,EAAc7F,EACd8F,EAAc7F,EACPpH,EAAmBmH,EAAMC,CAAI,CAChD,QAAkB,CACN3H,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBuN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,WAAY,CACZ,MAAMvL,EAAMjC,EAAK,8BAA8B,KAAK,SAAS,EAC7D,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CAMI,IAAI,aAAc,CACd,MAAMA,EAAMjC,EAAK,gCAAgC,KAAK,SAAS,EAC/D,OAAOsI,EAAO,OAAOrG,CAAG,CAChC,CAMI,IAAI,eAAgB,CAChB,MAAMA,EAAMjC,EAAK,kCAAkC,KAAK,SAAS,EACjE,OAAOiC,IAAQ,EAAI,OAAYsG,EAAS,OAAOtG,CAAG,CAC1D,CAMI,IAAI,QAAS,CACT,MAAMA,EAAMjC,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAOiC,IAAQ,EAAI,OAAYgM,EAAO,OAAOhM,CAAG,CACxD,CAMI,IAAI,YAAa,CACb,MAAMA,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOiC,IAAQ,EAAI,OAAYwG,EAAW,OAAOxG,CAAG,CAC5D,CAKI,WAAY,CAER,OADYjC,EAAK,8BAA8B,KAAK,SAAS,IAC9C,CACvB,CAKI,SAAU,CAEN,OADYA,EAAK,4BAA4B,KAAK,SAAS,IAC5C,CACvB,CAKI,UAAW,CAEP,OADYA,EAAK,6BAA6B,KAAK,SAAS,IAC7C,CACvB,CAQI,qBAAsB,CAElB,OADYA,EAAK,wCAAwC,KAAK,SAAS,CAE/E,CAaI,IAAI,uBAAwB,CACxB,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,0CAA0CyD,EAAQ,KAAK,SAAS,EACrE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIoD,EACA,MAAM1E,EAAWuE,CAAE,EAEvB,IAAII,EACJ,OAAIpD,IAAO,IACPoD,EAAKpC,EAAyBhB,EAAIC,CAAE,EAAE,MAAO,EAC7C3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,IAAI,qBAAsB,CACtB,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,wCAAwCyD,EAAQ,KAAK,SAAS,EACnE,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDoD,EAAK1F,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIoD,EACA,MAAM1E,EAAWuE,CAAE,EAEvB,IAAII,EACJ,OAAIpD,IAAO,IACPoD,EAAKpC,EAAyBhB,EAAIC,CAAE,EAAE,MAAO,EAC7C3D,EAAK,gBAAgB0D,EAAIC,EAAK,EAAG,CAAC,GAE/BmD,CACnB,QAAkB,CACN9G,EAAK,gCAAgC,EAAE,CACnD,CACA,CAKI,IAAI,QAAS,CACT,IAAIkI,EACAC,EACJ,GAAI,CACA,MAAM1E,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,2BAA2ByD,EAAQ,KAAK,SAAS,EACtD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,OAAAyE,EAAcxE,EACdyE,EAAcxE,EACPpD,EAAmBmD,EAAIC,CAAE,CAC5C,QAAkB,CACN3D,EAAK,gCAAgC,EAAE,EACvCA,EAAK,gBAAgBkI,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,oBAAqB,CAEjB,OADYnI,EAAK,uCAAuC,KAAK,SAAS,IACvD,CACvB,CAKI,WAAY,CAER,OADYA,EAAK,8BAA8B,KAAK,SAAS,IAC9C,CACvB,CAMI,QAAS,CAEL,OADYA,EAAK,2BAA2B,KAAK,SAAS,IAC3C,CACvB,CAOI,OAAQ,CAEJ,OADYA,EAAK,0BAA0B,KAAK,SAAS,CAEjE,CASI,iBAAkB,CACd,MAAMiC,EAAMjC,EAAK,oCAAoC,KAAK,SAAS,EACnE,OAAOmC,EAAWF,CAAG,CAC7B,CAQI,wBAAwBiQ,EAAU,CAC9BlS,EAAK,4CAA4C,KAAK,UAAWY,EAAcsR,CAAQ,CAAC,CAChG,CAMI,aAAc,CAEV,OADYlS,EAAK,gCAAgC,KAAK,SAAS,IAChD,CACvB,CAaI,kBAAkB4K,EAAS,CACvB,GAAI,CACA,MAAMnH,EAASzD,EAAK,gCAAgC,GAAG,EACjDwG,EAAOlC,EAAwBsG,EAAS5K,EAAK,iBAAiB,EAC9DyG,EAAOrF,EACbpB,EAAK,sCAAsCyD,EAAQ,KAAK,UAAW+C,EAAMC,CAAI,EAC7E,IAAI/C,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAkBI,QAAS,CACL,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,2BAA2ByD,EAAQ,KAAK,SAAS,EACtD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAQI,QAAS,CACL,GAAI,CACA,MAAMyD,EAASzD,EAAK,gCAAgC,GAAG,EACvDA,EAAK,2BAA2ByD,EAAQ,KAAK,SAAS,EACtD,IAAIC,EAAKvC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDE,EAAKxC,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EACvDiD,EAAKvF,IAAqB,SAASsC,EAAS,EAAI,EAAG,EAAI,EAC3D,GAAIiD,EACA,MAAMvE,EAAWwB,CAAE,EAEvB,OAAOxB,EAAWuB,CAAE,CAChC,QAAkB,CACN1D,EAAK,gCAAgC,EAAE,CACnD,CACA,CAOI,UAAW,CACP,MAAMiC,EAAMjC,EAAK,6BAA6B,KAAK,SAAS,EAC5D,OAAOmC,EAAWF,CAAG,CAC7B,CAQI,gBAAiB,CACb,MAAMA,EAAMjC,EAAK,mCAAmC,KAAK,SAAS,EAClE,OAAOmC,EAAWF,CAAG,CAC7B,CAOI,WAAWmN,EAAM,CACblL,EAAakL,EAAMyE,CAAU,EAC7B,MAAM5R,EAAMjC,EAAK,+BAA+B,KAAK,UAAWoP,EAAK,SAAS,EAC9E,OAAOjN,EAAWF,CAAG,CAC7B,CACA,CAEA,MAAM0U,GAAwB,OAAO,qBAAyB,IACxD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBnW,GAAOR,EAAK,oBAAoBQ,IAAQ,EAAG,CAAC,CAAC,EAIrE,MAAMwE,EAAS,CAElB,OAAO,OAAOxE,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMK,EAAM,OAAO,OAAOmE,GAAS,SAAS,EAC5C,OAAAnE,EAAI,UAAYL,EAChBmW,GAAqB,SAAS9V,EAAKA,EAAI,UAAWA,CAAG,EAC9CA,CACf,CAEI,oBAAqB,CACjB,MAAML,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBmW,GAAqB,WAAW,IAAI,EAC7BnW,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCR,EAAK,oBAAoBQ,EAAK,CAAC,CACvC,CAKI,IAAI,WAAY,CACZ,MAAMyB,EAAMjC,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,mBAAoB,CACpB,MAAMA,EAAMjC,EAAK,iCAAiC,KAAK,SAAS,EAChE,OAAOmC,EAAWF,CAAG,CAC7B,CAKI,IAAI,SAAU,CACV,MAAMA,EAAMjC,EAAK,oCAAoC,KAAK,SAAS,EACnE,OAAOmC,EAAWF,CAAG,CAC7B,CAMI,IAAI,iBAAkB,CAClB,MAAMA,EAAMjC,EAAK,0DAA0D,KAAK,SAAS,EACzF,OAAOmC,EAAWF,CAAG,CAC7B,CACA,CAEO,SAAS2U,GAAqB5T,EAAMC,EAAM,CAC7C,MAAMhB,EAAM,IAAI,MAAM1B,EAAmByC,EAAMC,CAAI,CAAC,EACpD,OAAOrC,EAAcqB,CAAG,CAC5B,CAEO,SAAS4U,GAA8B7T,EAAM,CAEhD,OADYjC,EAAUiC,CAAI,EAAE,MAEhC,CAEO,SAAS8T,IAAkC,CAE9C,OAAOlW,EADK,OAAO,QACK,CAC5B,CAEO,SAASmW,GAA4B/T,EAAM,CAC9C,MAAMf,EAAM,MAAM,KAAKlB,EAAUiC,CAAI,CAAC,EACtC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS+U,GAA0BhU,EAAMC,EAAM,CAClD,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAE,GAAGC,CAAI,EACnC,OAAOrC,EAAcqB,CAAG,CAC5B,CAEO,SAASgV,GAAwBjU,EAAM,CAE1C,OADYjC,EAAUiC,CAAI,IAAM,MAEpC,CAEO,SAASkU,GAAclU,EAAMC,EAAM,CAEtC,OADYlC,EAAUiC,CAAI,IAAKjC,EAAUkC,CAAI,CAEjD,CAEO,SAASkU,GAAsBnU,EAAMC,EAAM,CAC9C,MAAMpC,EAAME,EAAUkC,CAAI,EACpBhB,EAAM,OAAOpB,GAAS,SAAWA,EAAM,OAC7CM,IAAqB,WAAW6B,EAAO,EAAI,EAAGhC,EAAWiB,CAAG,EAAI,EAAIA,EAAK,EAAI,EAC7Ed,EAAoB,EAAC,SAAS6B,EAAO,EAAI,EAAG,CAAChC,EAAWiB,CAAG,EAAG,EAAI,CACtE,CAEO,SAASmV,GAAuBpU,EAAM,CACzC,MAAMqU,EAAItW,EAAUiC,CAAI,EAExB,OADY,OAAOqU,GAAO,UAAaA,EAAI,EAAI,EAAK,CAExD,CAEO,SAASC,GAAsBtU,EAAMC,EAAM,CAC9C,MAAMpC,EAAME,EAAUkC,CAAI,EACpBhB,EAAM,OAAOpB,GAAS,SAAWA,EAAM,OAC7C,IAAI2G,EAAOxG,EAAWiB,CAAG,EAAI,EAAIN,EAAkBM,EAAKjC,EAAK,kBAAmBA,EAAK,kBAAkB,EACnGyH,EAAOrG,EACXD,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGyE,EAAM,EAAI,EACtDtG,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGwE,EAAM,EAAI,CAC1D,CAEO,SAAS+P,GAAqBvU,EAAM,CAEvC,OADY,OAAOjC,EAAUiC,CAAI,GAAO,QAE5C,CAEO,SAASwU,GAAqBxU,EAAM,CACvC,MAAM9C,EAAMa,EAAUiC,CAAI,EAE1B,OADY,OAAO9C,GAAS,UAAYA,IAAQ,IAEpD,CAEO,SAASuX,GAAsBzU,EAAM,CAExC,OAAOpC,EADKoC,CACY,CAC5B,CAEO,SAAS0U,GAA2B1U,EAAM,CAC7C,IAAI2B,EACR,GAAI,CAAEA,EAAS,CAAC5D,EAAUiC,CAAI,CAAG,OAAQmC,EAAG,CAAER,EAASQ,CAAC,CAExD,OAAOvE,EADK+D,CACY,CACxB,CAEO,SAASgT,GAAoB3U,EAAM,CAEtC,OADYsF,EAAO,SAASnG,EAAWa,CAAI,CAAC,CAEhD,CAEO,SAAS4U,GAA2B5U,EAAM,CAE7C,OAAOpC,EADKoC,CACY,CAC5B,CAEO,SAAS6U,GAA2B7U,EAAM,CAC7C,MAAMf,EAAM,OAAO,QAAQ,GAAIe,CAAI,EACnC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS6V,IAAoC,CAAE,OAAO5S,EAAY,SAAUlC,EAAMC,EAAM,CAC3F,MAAMhB,EAAM,WAAWlB,EAAUiC,CAAI,EAAGC,CAAI,EAC5C,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS8V,GAAmC/U,EAAM,CACrD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,YAC5B,OAAOhC,EAAWiB,CAAG,EAAI,EAAIrB,EAAcqB,CAAG,CAClD,CAEO,SAAS+V,IAAqC,CAAE,OAAO9S,EAAY,SAAUlC,EAAMC,EAAMO,EAAM6B,EAAM,CACxG,MAAMpD,EAAMlB,EAAUiC,CAAI,EAAE,YAAYzC,EAAmB0C,EAAMO,CAAI,EAAGzC,EAAUsE,CAAI,CAAC,EACvF,OAAOzE,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASgW,GAAwCjV,EAAM,CAC1D,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,iBAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASiW,IAA6B,CACzC,MAAMjW,EAAM,IAAI,OAChB,OAAOrB,EAAcqB,CAAG,CAC5B,CAEO,SAASkW,GAAiCnV,EAAMC,EAAM,CACzDlC,EAAUiC,CAAI,EAAE,OAASC,IAAS,CACtC,CAEO,SAASmV,GAAsBpV,EAAMC,EAAM,CAC9C,MAAMhB,EAAM1B,EAAmByC,EAAMC,CAAI,EACzC,OAAOrC,EAAcqB,CAAG,CAC5B,CAEO,SAASoW,IAA6B,CAAE,OAAOnT,EAAY,SAAUlC,EAAMC,EAAMO,EAAM,CAC1F,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,IAAIjC,EAAUkC,CAAI,EAAGlC,EAAUyC,CAAI,CAAC,EAChE,OAAO5C,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASqW,GAAqCtV,EAAMC,EAAM,CAC7D,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAEjC,EAAUkC,CAAI,CAAC,EAC3C,OAAOrC,EAAcqB,CAAG,CAC5B,CAEO,SAASsW,GAA2BvV,EAAMC,EAAMO,EAAM,CACzDzC,EAAUiC,CAAI,EAAEb,EAAWc,CAAI,CAAC,EAAId,EAAWqB,CAAI,CACvD,CAEO,SAASgV,GAA+BxV,EAAM,CAEjD,OADYjC,EAAUiC,CAAI,EAAE,OAEhC,CAEO,SAASyV,GAA6BzV,EAAM,CAC/CjC,EAAUiC,CAAI,EAAE,MAAO,CAC3B,CAEO,SAAS0V,GAA4B1V,EAAM,CAC9C,MAAMf,EAAMlB,EAAUiC,CAAI,EAC1B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS0W,GAAoB3V,EAAM,CAEtC,OADY,MAAM,QAAQjC,EAAUiC,CAAI,CAAC,CAE7C,CAEO,SAAS4V,IAA+B,CAAE,OAAO1T,EAAY,SAAUlC,EAAMC,EAAM,CACtF,MAAMhB,EAAM,KAAK,MAAM1B,EAAmByC,EAAMC,CAAI,CAAC,EACrD,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS4W,GAA2B7V,EAAM,CAC7C,MAAMf,EAAMkI,GAAiB,OAAOnH,CAAI,EACxC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS6W,GAA2B9V,EAAMC,EAAM,CACnD,GAAI,CACA,IAAI8V,EAAS,CAAC,EAAG/V,EAAM,EAAGC,CAAI,EAC1B+V,EAAM,CAAChW,EAAMC,IAAS,CACtB,MAAMK,EAAIyV,EAAO,EACjBA,EAAO,EAAI,EACX,GAAI,CACA,OAAO3T,GAAkB9B,EAAGyV,EAAO,EAAG/V,EAAMC,CAAI,CAChE,QAAsB,CACN8V,EAAO,EAAIzV,CAC3B,CACS,EACD,MAAMrB,EAAM,IAAI,QAAQ+W,CAAG,EAC3B,OAAOpY,EAAcqB,CAAG,CAChC,QAAc,CACN8W,EAAO,EAAIA,EAAO,EAAI,CAC9B,CACA,CAEO,SAASE,GAA2BjW,EAAM,CAC7C,MAAMf,EAAM,IAAI,IAAIlB,EAAUiC,CAAI,CAAC,EACnC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASiX,GAAuBlW,EAAM,CACzC,MAAMf,EAAMoQ,GAAa,OAAOrP,CAAI,EACpC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASkX,GAAqCnW,EAAM,CACvD,MAAMf,EAAMiR,GAA2B,OAAOlQ,CAAI,EAClD,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASmX,GAA4BpW,EAAM,CAE9C,OADYgQ,GAAe,SAAS7Q,EAAWa,CAAI,CAAC,CAExD,CAEO,SAASqW,GAA2BrW,EAAM,CAC7C,MAAMf,EAAM+R,GAAiB,OAAOhR,CAAI,EACxC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASqX,GAAwCtW,EAAM,CAE1D,OADY6P,GAA2B,SAAS1Q,EAAWa,CAAI,CAAC,CAEpE,CAEO,SAASuW,GAAwBvW,EAAM,CAC1C,MAAMf,EAAMyO,EAAc,OAAO1N,CAAI,EACrC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASuX,GAAmBxW,EAAM,CACrC,MAAMnC,EAAMsB,EAAWa,CAAI,EAAE,SAC7B,OAAInC,EAAI,OAAS,GACbA,EAAI,EAAI,EACD,IAEC,EAEhB,CAEO,SAAS4Y,GAAoCzW,EAAMC,EAAM,CAC5DlC,EAAUiC,CAAI,EAAE,UAAYjC,EAAUkC,CAAI,CAC9C,CAEO,SAASyW,GAAoC1W,EAAM,CACtD,MAAMf,EAAM,aAAaE,EAAWa,CAAI,CAAC,EACzC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS0X,GAA2B3W,EAAM,CAC7Cb,EAAWa,CAAI,CACnB,CAEO,SAAS4W,GAA0C5W,EAAMC,EAAM,CAClElC,EAAUiC,CAAI,EAAE,gBAAkBjC,EAAUkC,CAAI,CACpD,CAEO,SAAS4W,IAA6B,CACzC,MAAM5X,EAAM,IAAI,MAChB,OAAOrB,EAAcqB,CAAG,CAC5B,CAEO,SAAS6X,GAAsB9W,EAAM,CACxC,MAAMf,EAAMsS,GAAY,OAAOvR,CAAI,EACnC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS8X,GAA4B/W,EAAMC,EAAM,CAEpD,OADYlC,EAAUiC,CAAI,EAAE,KAAKjC,EAAUkC,CAAI,CAAC,CAEpD,CAEO,SAAS+W,GAA8BhX,EAAM,CAChD,MAAMf,EAAMoS,GAAoB,OAAOrR,CAAI,EAC3C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASgY,GAAiBjX,EAAM,CACnC,MAAMf,EAAMqG,EAAO,OAAOtF,CAAI,EAC9B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASiY,GAA6BlX,EAAM,CAC/C,MAAMf,EAAMuH,GAAmB,OAAOxG,CAAI,EAC1C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASkY,GAAoBnX,EAAMC,EAAM,CAE5C,OADYlC,EAAUiC,CAAI,IAAMjC,EAAUkC,CAAI,CAElD,CAEO,SAASmX,GAA8BpX,EAAMC,EAAM,CACtD,MAAMhB,EAAM,OAAOlB,EAAUkC,CAAI,CAAC,EAC5BuE,EAAO7F,EAAkBM,EAAKjC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EyH,EAAOrG,EACbD,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGyE,EAAM,EAAI,EACtDtG,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGwE,EAAM,EAAI,CAC1D,CAEO,SAAS6S,GAAsBrX,EAAM,CACxC,MAAMf,EAAMqN,EAAY,OAAOtM,CAAI,EACnC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASqY,GAAyBtX,EAAM,CAC3C,MAAMf,EAAM8K,GAAe,OAAO/J,CAAI,EACtC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASsY,GAAsBvX,EAAM,CACxC,MAAMf,EAAMoU,GAAY,OAAOrT,CAAI,EACnC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASuY,GAAwCxX,EAAM,CAC1D,MAAMf,EAAMiH,GAA8B,OAAOlG,CAAI,EACrD,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASwY,GAA0BzX,EAAM,CAC5C,MAAMf,EAAM0Q,GAAgB,OAAO3P,CAAI,EACvC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASyY,GAA4B1X,EAAM,CAC9C,MAAMf,EAAMsQ,GAAkB,OAAOvP,CAAI,EACzC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS0Y,GAAgC3X,EAAM,CAClD,MAAMf,EAAMuT,GAAsB,OAAOxS,CAAI,EAC7C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS2Y,GAA4B5X,EAAM,CAC9C,MAAMf,EAAMkM,GAAkB,OAAOnL,CAAI,EACzC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS4Y,GAA8B7X,EAAM,CAChD,MAAMf,EAAM+L,GAAoB,OAAOhL,CAAI,EAC3C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS6Y,GAAqB9X,EAAM,CACvC,MAAMf,EAAM8F,GAAW,OAAO/E,CAAI,EAClC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS8Y,GAAqB/X,EAAM,CACvC,MAAMf,EAAMkJ,GAAW,OAAOnI,CAAI,EAClC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS+Y,GAAwBhY,EAAM,CAC1C,MAAMf,EAAMkS,GAAc,OAAOnR,CAAI,EACrC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASgZ,GAAgCjY,EAAM,CAClD,MAAMf,EAAMqH,GAAsB,OAAOtG,CAAI,EAC7C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASiZ,GAA2BlY,EAAMC,EAAMO,EAAM,CACzDzC,EAAUiC,CAAI,EAAEC,IAAS,CAAC,EAAId,EAAWqB,CAAI,CACjD,CAEO,SAAS2X,IAA8B,CAAE,OAAOjW,EAAY,SAAUlC,EAAMC,EAAMO,EAAM6B,EAAM+V,EAAM,CACvG,MAAMnZ,EAAMlB,EAAUiC,CAAI,EAAE,KAAKjC,EAAUkC,CAAI,EAAGlC,EAAUyC,CAAI,EAAGzC,EAAUsE,CAAI,EAAGtE,EAAUqa,CAAI,CAAC,EACnG,OAAOxa,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASoZ,GAA6BrY,EAAM,CAC/C,MAAMf,EAAM2H,GAAmB,OAAO5G,CAAI,EAC1C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASqZ,GAAgCtY,EAAM,CAClD,MAAMf,EAAM+M,GAAsB,OAAOhM,CAAI,EAC7C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASsZ,GAA+BvY,EAAM,CAEjD,OADYjC,EAAUiC,CAAI,EAAE,QAAS,CAEzC,CAEO,SAASwY,GAA8BxY,EAAM,CAChD,MAAMf,EAAMwS,GAAoB,OAAOzR,CAAI,EAC3C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASwZ,GAA4BzY,EAAMC,EAAMO,EAAM,CAC1D,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,KAAKjC,EAAUkC,CAAI,EAAGlC,EAAUyC,CAAI,CAAC,EACjE,OAAO5C,EAAcqB,CAAG,CAC5B,CAEO,SAASyZ,GAA4B1Y,EAAM,CAC9C,MAAMf,EAAM0M,GAAkB,OAAO3L,CAAI,EACzC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS0Z,GAA2B3Y,EAAM,CAC7C,MAAMf,EAAMwM,GAAiB,OAAOzL,CAAI,EACxC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS2Z,GAAiB5Y,EAAM,CACnC,MAAMf,EAAM0I,EAAO,OAAO3H,CAAI,EAC9B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS4Z,IAA6B,CAEzC,OAAOjb,EADK,IAAI,GACQ,CAC5B,CAEO,SAASkb,GAAsB9Y,EAAM,CACxC,MAAMf,EAAMyJ,EAAY,OAAO1I,CAAI,EACnC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS8Z,GAAoB/Y,EAAM,CACtC,MAAMf,EAAMgJ,EAAU,OAAOjI,CAAI,EACjC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS+Z,GAA2BhZ,EAAMC,EAAMO,EAAM,CACzD,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,IAAIjC,EAAUkC,CAAI,EAAGlC,EAAUyC,CAAI,CAAC,EAChE,OAAO5C,EAAcqB,CAAG,CAC5B,CAEO,SAASga,GAAmBjZ,EAAM,CACrC,MAAMf,EAAMsG,EAAS,OAAOvF,CAAI,EAChC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASia,GAA2BlZ,EAAM,CAC7C,MAAMf,EAAM,IAAI,KAAKlB,EAAUiC,CAAI,CAAC,EACpC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASka,GAAqBnZ,EAAM,CACvC,MAAMf,EAAMwN,GAAW,OAAOzM,CAAI,EAClC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASma,GAA+BpZ,EAAM,CACjD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,QAAS,EACrC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASoa,GAA8BrZ,EAAM,CAChD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,OAAQ,EACpC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASqa,GAA2BtZ,EAAMC,EAAM,CACnD,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAEC,IAAS,CAAC,EACtC,OAAOrC,EAAcqB,CAAG,CAC5B,CAEO,SAASsa,GAAoBvZ,EAAM,CAEtC,OADYiL,EAAO,SAAS9L,EAAWa,CAAI,CAAC,CAEhD,CAEO,SAASwZ,GAAqBxZ,EAAM,CAEvC,OADY,OAAOjC,EAAUiC,CAAI,GAAO,QAE5C,CAEO,SAASyZ,GAAqCzZ,EAAMC,EAAM,CAC7D,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAEjC,EAAUkC,CAAI,CAAC,EAC3C,OAAOrC,EAAcqB,CAAG,CAC5B,CAEO,SAASya,GAA2B1Z,EAAM,CAC7C,MAAMf,EAAMsM,GAAiB,OAAOvL,CAAI,EACxC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS0a,GAA0B3Z,EAAM,CAC5C,MAAMf,EAAM8T,GAAgB,OAAO/S,CAAI,EACvC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS2a,GAAiC5Z,EAAM,CACnD,MAAMf,EAAMmH,GAAuB,OAAOpG,CAAI,EAC9C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS4a,GAA6B7Z,EAAM,CAC/C,MAAMf,EAAM0S,GAAmB,OAAO3R,CAAI,EAC1C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS6a,GAA2B9Z,EAAMC,EAAMO,EAAM,CACzDzC,EAAUiC,CAAI,EAAEb,EAAWc,CAAI,CAAC,EAAId,EAAWqB,CAAI,CACvD,CAEO,SAASuZ,GAAyB/Z,EAAM,CAC3C,MAAMf,EAAM4M,GAAe,OAAO7L,CAAI,EACtC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS+a,GAAcha,EAAM,CAChC,MAAMf,EAAM8S,GAAI,OAAO/R,CAAI,EAC3B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASgb,GAAgBja,EAAM,CAClC,MAAMf,EAAMyK,GAAM,OAAO1J,CAAI,EAC7B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASib,GAAala,EAAM,CAC/B,MAAMf,EAAMmR,GAAG,OAAOpQ,CAAI,EAC1B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASkb,GAAqCna,EAAM,CACvD,MAAMf,EAAM,IAAI,kBAAkBe,IAAS,CAAC,EAC5C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASmb,GAA8Bpa,EAAM,CAEhD,OADYjC,EAAUiC,CAAI,EAAE,MAEhC,CAEO,SAASqa,IAAoB,CAChC,MAAMpb,EAAMjC,EAAK,OACjB,OAAOY,EAAcqB,CAAG,CAC5B,CAEO,SAASqb,GAA8Bta,EAAM,CAChD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,OAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASsb,GAA2Bva,EAAM,CAC7C,MAAMf,EAAM,IAAI,kBAAkBlB,EAAUiC,CAAI,CAAC,EACjD,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASub,GAA2Bxa,EAAMC,EAAMO,EAAM,CACzDzC,EAAUiC,CAAI,EAAE,IAAIjC,EAAUkC,CAAI,EAAGO,IAAS,CAAC,CACnD,CAEO,SAASia,GAA8Bza,EAAM,CAChD,MAAMf,EAAMiP,EAAoB,OAAOlO,CAAI,EAC3C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASyb,IAA6B,CACzC,MAAMzb,EAAM,IAAI,MAChB,OAAOrB,EAAcqB,CAAG,CAC5B,CAEO,SAAS0b,GAA6B3a,EAAMC,EAAM,CACrD,MAAMhB,EAAMlB,EAAUkC,CAAI,EAAE,MACtBuE,EAAO7F,EAAkBM,EAAKjC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EyH,EAAOrG,EACbD,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGyE,EAAM,EAAI,EACtDtG,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGwE,EAAM,EAAI,CAC1D,CAEO,SAASoW,GAA6B5a,EAAMC,EAAM,CACrD,IAAI4a,EACAC,EACJ,GAAI,CACAD,EAAc7a,EACd8a,EAAc7a,EACd,QAAQ,MAAM1C,EAAmByC,EAAMC,CAAI,CAAC,CACpD,QAAc,CACNjD,EAAK,gBAAgB6d,EAAaC,EAAa,CAAC,CACxD,CACA,CAEO,SAASC,GAAgC/a,EAAMC,EAAMO,EAAM,CAC9D,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,SAASC,IAAS,EAAGO,IAAS,CAAC,EAC3D,OAAO5C,EAAcqB,CAAG,CAC5B,CAEO,SAAS+b,IAAyC,CAAE,OAAO9Y,EAAY,SAAUlC,EAAMC,EAAM,CAChGlC,EAAUiC,CAAI,EAAE,gBAAgBjC,EAAUkC,CAAI,CAAC,CACnD,EAAG,SAAS,CAAC,CAEN,SAASgb,GAAkDjb,EAAMC,EAAMO,EAAM,CAChF,MAAMvB,EAAM,IAAI,WAAWlB,EAAUiC,CAAI,EAAGC,IAAS,EAAGO,IAAS,CAAC,EAClE,OAAO5C,EAAcqB,CAAG,CAC5B,CAEO,SAASic,IAAwC,CAAE,OAAOhZ,EAAY,SAAUlC,EAAMC,EAAM,CAC/FlC,EAAUiC,CAAI,EAAE,eAAeb,EAAWc,CAAI,CAAC,CACnD,EAAG,SAAS,CAAC,CAEN,SAASkb,GAA8Bnb,EAAM,CAChD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,OAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASmc,GAA+Bpb,EAAM,CACjD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,QAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASoc,GAAgCrb,EAAM,CAClD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,SAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASqc,GAA4Btb,EAAM,CAC9C,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,KAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASsc,IAAiC,CAAE,OAAOrZ,EAAY,UAAY,CAC9E,MAAMjD,EAAM,OAAO,QACnB,OAAOrB,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASuc,GAAgCxb,EAAM,CAClD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,SAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASwc,GAAqCzb,EAAM,CACvD,MAAMf,EAAM,IAAI,WAAWe,IAAS,CAAC,EACrC,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASyc,IAA8B,CAAE,OAAOxZ,EAAY,SAAUlC,EAAMC,EAAMO,EAAM,CAC3F,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,KAAKzC,EAAmB0C,EAAMO,CAAI,CAAC,EAC/D,OAAO5C,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS0c,GAA8B3b,EAAM,CAChD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,OAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS2c,IAAmC,CAAE,OAAO1Z,EAAY,SAAUlC,EAAM,CACpF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,UAC5B,OAAOhC,EAAWiB,CAAG,EAAI,EAAIrB,EAAcqB,CAAG,CAClD,EAAG,SAAS,CAAC,CAEN,SAAS4c,GAAyC7b,EAAM,CAC3D,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,kBAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS6c,IAAmC,CAAE,OAAO5Z,EAAY,SAAUlC,EAAM,CACpF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,UAC5B,OAAOhC,EAAWiB,CAAG,EAAI,EAAIrB,EAAcqB,CAAG,CAClD,EAAG,SAAS,CAAC,CAEN,SAAS8c,GAA8B/b,EAAM,CAChD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,OAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS+c,IAAmC,CAAE,OAAO9Z,EAAY,SAAUlC,EAAM,CACpF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,UAC5B,OAAOhC,EAAWiB,CAAG,EAAI,EAAIrB,EAAcqB,CAAG,CAClD,EAAG,SAAS,CAAC,CAEN,SAASgd,IAA8B,CAAE,OAAO/Z,EAAY,SAAUlC,EAAMC,EAAMO,EAAM6B,EAAM,CACjG,MAAMpD,EAAMlB,EAAUiC,CAAI,EAAE,KAAKzC,EAAmB0C,EAAMO,CAAI,EAAG6B,IAAS,CAAC,EAC3E,OAAOzE,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASid,GAAqClc,EAAMC,EAAM,CAC7DlC,EAAUiC,CAAI,EAAE,WAAajC,EAAUkC,CAAI,CAC/C,CAEO,SAASkc,GAAkCnc,EAAMC,EAAM,CAC1DlC,EAAUiC,CAAI,EAAE,QAAUjC,EAAUkC,CAAI,CAC5C,CAEO,SAASmc,GAAkCpc,EAAMC,EAAM,CAC1DlC,EAAUiC,CAAI,EAAE,QAAUjC,EAAUkC,CAAI,CAC5C,CAEO,SAASoc,IAAqC,CAAE,OAAOna,EAAY,SAAUlC,EAAMC,EAAMO,EAAM6B,EAAM,CACxG,MAAMpD,EAAMlB,EAAUiC,CAAI,EAAE,YAAYzC,EAAmB0C,EAAMO,CAAI,EAAG,CAAC,WAAW,YAAY,gBAAgB,iBAAiB,SAAS,EAAG6B,CAAI,CAAC,EAClJ,OAAOzE,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASqd,IAA2C,CAAE,OAAOpa,EAAY,SAAUlC,EAAMC,EAAMO,EAAM,CACxG,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,kBAAkBzC,EAAmB0C,EAAMO,CAAI,CAAC,EAC5E,OAAO5C,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASsd,IAA+B,CAAE,OAAOra,EAAY,SAAUlC,EAAM,CAChF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,MAAO,EACnC,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASud,IAAqC,CAAE,OAAOta,EAAY,SAAUlC,EAAMC,EAAMO,EAAM6B,EAAM+V,EAAM,CAC9G,MAAMnZ,EAAMlB,EAAUiC,CAAI,EAAE,YAAYzC,EAAmB0C,EAAMO,CAAI,EAAGzC,EAAUsE,CAAI,EAAGtE,EAAUqa,CAAI,CAAC,EACxG,OAAOxa,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASwd,IAAwC,CAAE,OAAOva,EAAY,SAAUlC,EAAMC,EAAM,CAC/F,MAAMhB,EAAM,IAAI,aAAa1B,EAAmByC,EAAMC,CAAI,CAAC,EAC3D,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASyd,IAAqC,CAAE,OAAOxa,EAAY,SAAUlC,EAAMC,EAAMO,EAAM,CAClG,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,YAAYzC,EAAmB0C,EAAMO,CAAI,CAAC,EACtE,OAAO5C,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS0d,GAAkC3c,EAAM,CACpD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,WAC5B,MAAO,CAAC,QAAU,EAAE,KAAO,CAAG,EAACf,CAAG,GAAK,CAC3C,CAEO,SAAS2d,GAAmB5c,EAAM,CAErC,OADYjC,EAAUiC,CAAI,IAAM,IAEpC,CAEO,SAAS6c,GAA4B7c,EAAMC,EAAMO,EAAM,CAC1D,MAAMvB,EAAMlB,EAAUkC,CAAI,EAAE,KAAKO,IAAS,CAAC,EAC3C,IAAIgE,EAAOxG,EAAWiB,CAAG,EAAI,EAAIN,EAAkBM,EAAKjC,EAAK,kBAAmBA,EAAK,kBAAkB,EACnGyH,EAAOrG,EACXD,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGyE,EAAM,EAAI,EACtDtG,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGwE,EAAM,EAAI,CAC1D,CAEO,SAASsY,IAAoC,CAAE,OAAO5a,EAAY,SAAUlC,EAAM,CACrF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,WAAY,EACxC,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS8d,GAAuB/c,EAAM,CAEzC,OADY,OAAOjC,EAAUiC,CAAI,GAAO,UAE5C,CAEO,SAASgd,IAA8B,CAAE,OAAO9a,EAAY,SAAUlC,EAAMC,EAAM,CACrF,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAE,KAAKjC,EAAUkC,CAAI,CAAC,EAChD,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASge,IAA8B,CAAE,OAAO/a,EAAY,SAAUlC,EAAM,CAC/E,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,KAAM,EAClC,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASie,GAA4Bld,EAAM,CAE9C,OADYjC,EAAUiC,CAAI,EAAE,IAEhC,CAEO,SAASmd,GAA6Bnd,EAAM,CAC/C,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,MAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASme,IAA6B,CAAE,OAAOlb,EAAY,SAAUlC,EAAMC,EAAM,CACpF,MAAMhB,EAAM,QAAQ,IAAIlB,EAAUiC,CAAI,EAAGjC,EAAUkC,CAAI,CAAC,EACxD,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASoe,GAA4Brd,EAAM,CAC9C,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,KAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASqe,IAA8B,CAAE,OAAOpb,EAAY,UAAY,CAC3E,MAAMjD,EAAM,KAAK,KACjB,OAAOrB,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASse,IAAgC,CAAE,OAAOrb,EAAY,UAAY,CAC7E,MAAMjD,EAAM,OAAO,OACnB,OAAOrB,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASue,IAAoC,CAAE,OAAOtb,EAAY,UAAY,CACjF,MAAMjD,EAAM,WAAW,WACvB,OAAOrB,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASwe,IAAgC,CAAE,OAAOvb,EAAY,UAAY,CAC7E,MAAMjD,EAAM,OAAO,OACnB,OAAOrB,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASye,GAAiC1d,EAAMC,EAAM,CACzD,MAAMhB,EAAM,IAAI,SAAS1B,EAAmByC,EAAMC,CAAI,CAAC,EACvD,OAAOrC,EAAcqB,CAAG,CAC5B,CAEO,SAAS0e,GAA+B3d,EAAM,CAEjD,OADY,MAAM,QAAQjC,EAAUiC,CAAI,CAAC,CAE7C,CAEO,SAAS4d,GAA8C5d,EAAM,CAChE,IAAI2B,EACJ,GAAI,CACAA,EAAS5D,EAAUiC,CAAI,YAAa,WACvC,MAAW,CACR2B,EAAS,EACjB,CAEI,OADYA,CAEhB,CAEO,SAASkc,IAA8B,CAAE,OAAO3b,EAAY,SAAUlC,EAAMC,EAAMO,EAAM,CAC3F,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,KAAKjC,EAAUkC,CAAI,EAAGlC,EAAUyC,CAAI,CAAC,EACjE,OAAO5C,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS6e,IAA8B,CAAE,OAAO5b,EAAY,SAAUlC,EAAMC,EAAMO,EAAM6B,EAAM,CACjG,MAAMpD,EAAMlB,EAAUiC,CAAI,EAAE,KAAKjC,EAAUkC,CAAI,EAAGlC,EAAUyC,CAAI,EAAGzC,EAAUsE,CAAI,CAAC,EAClF,OAAOzE,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS8e,GAAsC/d,EAAM,CACxD,IAAI2B,EACJ,GAAI,CACAA,EAAS5D,EAAUiC,CAAI,YAAa,GACvC,MAAW,CACR2B,EAAS,EACjB,CAEI,OADYA,CAEhB,CAEO,SAASqc,GAAqChe,EAAM,CAEvD,OADY,OAAO,cAAcjC,EAAUiC,CAAI,CAAC,CAEpD,CAEO,SAASie,GAA+Bje,EAAM,CACjD,MAAMf,EAAM,OAAO,QAAQlB,EAAUiC,CAAI,CAAC,EAC1C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASif,GAA2Ble,EAAMC,EAAM,CACnD,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAE,IAAIjC,EAAUkC,CAAI,CAAC,EAC/C,OAAOrC,EAAcqB,CAAG,CAC5B,CAEO,SAASkf,IAAmC,CAAE,OAAOjc,EAAY,SAAUlC,EAAM,CACpF,MAAMf,EAAM,KAAK,UAAUlB,EAAUiC,CAAI,CAAC,EAC1C,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASmf,GAA0Cpe,EAAM,CAC5D,IAAI2B,EACJ,GAAI,CACAA,EAAS5D,EAAUiC,CAAI,YAAa,OACvC,MAAW,CACR2B,EAAS,EACjB,CAEI,OADYA,CAEhB,CAEO,SAAS0c,GAA2Bre,EAAM,CAC7C,MAAMf,EAAM,IAAI,WAAWlB,EAAUiC,CAAI,CAAC,EAC1C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAASqf,GAA2Bte,EAAMC,EAAMO,EAAM,CACzDzC,EAAUiC,CAAI,EAAE,IAAIjC,EAAUkC,CAAI,EAAGO,IAAS,CAAC,CACnD,CAEO,SAAS+d,GAA8Bve,EAAM,CAEhD,OADYjC,EAAUiC,CAAI,EAAE,MAEhC,CAEO,SAASwe,GAAkDxe,EAAMC,EAAMO,EAAM,CAChF,MAAMvB,EAAM,IAAI,kBAAkBlB,EAAUiC,CAAI,EAAGC,IAAS,EAAGO,IAAS,CAAC,EACzE,OAAO5C,EAAcqB,CAAG,CAC5B,CAEO,SAASwf,GAA6Cze,EAAM,CAC/D,IAAI2B,EACJ,GAAI,CACAA,EAAS5D,EAAUiC,CAAI,YAAa,UACvC,MAAW,CACR2B,EAAS,EACjB,CAEI,OADYA,CAEhB,CAEO,SAAS+c,GAA6B1e,EAAM,CAC/C,QAAQ,MAAMjC,EAAUiC,CAAI,CAAC,CACjC,CAEO,SAAS2e,GAA4B3e,EAAM,CAC9C,QAAQ,KAAKjC,EAAUiC,CAAI,CAAC,CAChC,CAEO,SAAS4e,GAA4B5e,EAAM,CAC9C,QAAQ,KAAKjC,EAAUiC,CAAI,CAAC,CAChC,CAEO,SAAS6e,GAA6B7e,EAAM,CAC/C,QAAQ,MAAMjC,EAAUiC,CAAI,CAAC,CACjC,CAEO,SAAS8e,GAA6B9e,EAAMC,EAAM,CACrDlC,EAAUiC,CAAI,EAAE,MAAMjC,EAAUkC,CAAI,CAAC,CACzC,CAEO,SAAS8e,GAA4B/e,EAAMC,EAAM,CACpDlC,EAAUiC,CAAI,EAAE,KAAKjC,EAAUkC,CAAI,CAAC,CACxC,CAEO,SAAS+e,GAA4Bhf,EAAMC,EAAM,CACpDlC,EAAUiC,CAAI,EAAE,KAAKjC,EAAUkC,CAAI,CAAC,CACxC,CAEO,SAASgf,GAA6Bjf,EAAMC,EAAM,CACrDlC,EAAUiC,CAAI,EAAE,MAAMjC,EAAUkC,CAAI,CAAC,CACzC,CAEO,SAASif,IAA6B,CAEzC,OADY,KAAK,IAAK,CAE1B,CAEO,SAASC,GAA8Bnf,EAAMC,EAAM,CACtD,MAAMhB,EAAM,OAAOlB,EAAUkC,CAAI,CAAC,EAC5BuE,EAAO7F,EAAkBM,EAAKjC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EyH,EAAOrG,EACbD,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGyE,EAAM,EAAI,EACtDtG,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGwE,EAAM,EAAI,CAC1D,CAEO,SAAS4a,IAA6B,CAAE,OAAOld,EAAY,SAAUlC,EAAM,CAC9E,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,IAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASogB,IAAqC,CAAE,OAAOnd,EAAY,SAAUlC,EAAMC,EAAMO,EAAM,CAClG,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,YAAYjC,EAAUkC,CAAI,EAAG,CAAC,WAAW,YAAY,gBAAgB,iBAAiB,SAAS,EAAGO,CAAI,CAAC,EACnI,OAAO5C,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASqgB,GAA4Btf,EAAMC,EAAM,CACpD,MAAMhB,EAAMlB,EAAUkC,CAAI,EAAE,KACtBuE,EAAO7F,EAAkBM,EAAKjC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EyH,EAAOrG,EACbD,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGyE,EAAM,EAAI,EACtDtG,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGwE,EAAM,EAAI,CAC1D,CAEO,SAAS+a,GAA+Bvf,EAAMC,EAAM,CACvD,MAAMhB,EAAMlB,EAAUkC,CAAI,EAAE,QACtBuE,EAAO7F,EAAkBM,EAAKjC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EyH,EAAOrG,EACbD,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGyE,EAAM,EAAI,EACtDtG,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGwE,EAAM,EAAI,CAC1D,CAEO,SAASgb,GAA4Bxf,EAAM,CAE9C,OADYjC,EAAUiC,CAAI,EAAE,IAEhC,CAEO,SAASyf,IAAoC,CAAE,OAAOvd,EAAY,SAAUlC,EAAM,CACrF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,WAAY,EACxC,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASygB,IAAgC,CAAE,OAAOxd,EAAY,SAAUlC,EAAMC,EAAM,CACvF,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAE,OAAOjC,EAAUkC,CAAI,CAAC,EAClD,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS0gB,IAAoC,CAAE,OAAOzd,EAAY,SAAUlC,EAAMC,EAAM,CAC3F,MAAMhB,EAAM,YAAY,WAAWlB,EAAUiC,CAAI,EAAGC,IAAS,CAAC,EAC9D,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS2gB,IAAoC,CAAE,OAAO1d,EAAY,SAAUlC,EAAMC,EAAM,CAC3F,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAE,WAAWjC,EAAUkC,CAAI,CAAC,EACtD,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS4gB,IAA+B,CAAE,OAAO3d,EAAY,SAAUlC,EAAMC,EAAMO,EAAM6B,EAAM,CAClG,MAAMpD,EAAM,YAAY,MAAMlB,EAAUiC,CAAI,EAAGjC,EAAUkC,CAAI,EAAGO,IAAS,EAAG6B,IAAS,CAAC,EACtF,OAAOzE,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS6gB,IAAgC,CAAE,OAAO5d,EAAY,SAAUlC,EAAMC,EAAMO,EAAM,CAC7F,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,OAAOjC,EAAUkC,CAAI,EAAGO,IAAS,CAAC,EAC9D,OAAO5C,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS8gB,IAA+B,CAAE,OAAO7d,EAAY,SAAUlC,EAAMC,EAAMO,EAAM,CAC5F,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,MAAMzC,EAAmB0C,EAAMO,CAAI,CAAC,EAChE,OAAO5C,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS+gB,IAA+B,CAAE,OAAO9d,EAAY,SAAUlC,EAAM,CAChF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,MAAO,EACnC,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASghB,IAAoC,CAAE,OAAO/d,EAAY,SAAUlC,EAAM,CACrF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,WAAY,EACxC,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASihB,IAAgC,CAAE,OAAOhe,EAAY,SAAUlC,EAAMC,EAAM,CACvF,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAE,OAAOjC,EAAUkC,CAAI,CAAC,EAClD,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASkhB,IAA6B,CAAE,OAAOje,EAAY,SAAUlC,EAAMC,EAAM,CACpF,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAE,IAAIjC,EAAUkC,CAAI,CAAC,EAC/C,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASmhB,IAAgC,CAAE,OAAOle,EAAY,SAAUlC,EAAM,CACjF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,OAAQ,EACpC,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASohB,GAAqBrgB,EAAM,CAEvC,MADY,CAACjC,EAAUiC,CAAI,CAE/B,CAEO,SAASsgB,GAA0BtgB,EAAMC,EAAM,CAElD,OADYlC,EAAUiC,CAAI,GAAKjC,EAAUkC,CAAI,CAEjD,CAEO,SAASsgB,GAAiBvgB,EAAMC,EAAM,CACzC,MAAM,IAAI,MAAM1C,EAAmByC,EAAMC,CAAI,CAAC,CAClD,CAEO,SAASugB,GAA6BxgB,EAAMC,EAAM,CACrD,MAAMoU,EAAItW,EAAUkC,CAAI,EAClBhB,EAAM,OAAOoV,GAAO,SAAWA,EAAI,OACzClW,EAAoB,EAAC,YAAY6B,EAAO,EAAI,EAAGhC,EAAWiB,CAAG,EAAI,OAAO,CAAC,EAAIA,EAAK,EAAI,EACtFd,EAAoB,EAAC,SAAS6B,EAAO,EAAI,EAAG,CAAChC,EAAWiB,CAAG,EAAG,EAAI,CACtE,CAEO,SAASwhB,GAAwBzgB,EAAMC,EAAM,CAChD,MAAMhB,EAAMG,GAAYrB,EAAUkC,CAAI,CAAC,EACjCuE,EAAO7F,EAAkBM,EAAKjC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EyH,EAAOrG,EACbD,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGyE,EAAM,EAAI,EACtDtG,EAAkB,EAAG,SAAS6B,EAAO,EAAI,EAAGwE,EAAM,EAAI,CAC1D,CAEO,SAASkc,GAA4B1gB,EAAMC,EAAM,CACpD,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAE,KAAKjC,EAAUkC,CAAI,CAAC,EAChD,OAAOrC,EAAcqB,CAAG,CAC5B,CAEO,SAAS0hB,GAAsC3gB,EAAM,CACxD,eAAejC,EAAUiC,CAAI,CAAC,CAClC,CAEO,SAAS4gB,GAAsC5gB,EAAM,CACxD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,eAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS4hB,GAA+B7gB,EAAM,CACjD,MAAMf,EAAM,QAAQ,QAAQlB,EAAUiC,CAAI,CAAC,EAC3C,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS6hB,GAA8B9gB,EAAM,CAChD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,OAC5B,OAAOhC,EAAWiB,CAAG,EAAI,EAAIrB,EAAcqB,CAAG,CAClD,CAEO,SAAS8hB,IAAkC,CAAE,OAAO7e,EAAY,SAAUlC,EAAM,CACnFjC,EAAUiC,CAAI,EAAE,SAAU,CAC9B,EAAG,SAAS,CAAC,CAEN,SAASghB,IAAgC,CAAE,OAAO9e,EAAY,SAAUlC,EAAM,CACjF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,OAAQ,EACpC,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASgiB,IAA+B,CAAE,OAAO/e,EAAY,SAAUlC,EAAM,CAChF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,MAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASiiB,IAA2C,CAAE,OAAOhf,EAAY,SAAUlC,EAAMC,EAAMO,EAAM,CACxGzC,EAAUiC,CAAI,EAAE,kBAAkBzC,EAAmB0C,EAAMO,CAAI,CAAC,CACpE,EAAG,SAAS,CAAC,CAEN,SAAS2gB,IAA+B,CAAE,OAAOjf,EAAY,SAAUlC,EAAMC,EAAM,CACtF,MAAMhB,EAAM,YAAY,MAAMlB,EAAUiC,CAAI,EAAGjC,EAAUkC,CAAI,CAAC,EAC9D,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASmiB,IAA+B,CAAE,OAAOlf,EAAY,SAAUlC,EAAM,CAChF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,MAAO,EACnC,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASoiB,IAAgC,CAAE,OAAOnf,EAAY,SAAUlC,EAAMC,EAAM,CACvF,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAE,OAAOjC,EAAUkC,CAAI,CAAC,EAClD,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASqiB,IAA6B,CAAE,OAAOpf,EAAY,SAAUlC,EAAMC,EAAM,CACpF,MAAMhB,EAAMlB,EAAUiC,CAAI,EAAE,IAAIjC,EAAUkC,CAAI,CAAC,EAC/C,OAAOrC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASsiB,IAA6B,CAAE,OAAOrf,EAAY,SAAUlC,EAAMC,EAAMO,EAAM,CAC1F,MAAMvB,EAAMlB,EAAUiC,CAAI,EAAE,IAAIjC,EAAUkC,CAAI,EAAGlC,EAAUyC,CAAI,CAAC,EAChE,OAAO5C,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASuiB,GAA0CxhB,EAAMC,EAAM,CAClElC,EAAUiC,CAAI,EAAE,gBAAkBjC,EAAUkC,CAAI,CACpD,CAEO,SAASwhB,IAAgC,CAAE,OAAOvf,EAAY,SAAUlC,EAAM,CACjF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,OAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,EAAG,SAAS,CAAC,CAEN,SAASyiB,IAA+B,CAAE,OAAOxf,EAAY,SAAUlC,EAAM,CAChF,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,MAC5B,OAAOhC,EAAWiB,CAAG,EAAI,EAAIrB,EAAcqB,CAAG,CAClD,EAAG,SAAS,CAAC,CAEN,SAAS0iB,GAAoC3hB,EAAMC,EAAM,CAC5DlC,EAAUiC,CAAI,EAAE,UAAYjC,EAAUkC,CAAI,CAC9C,CAEO,SAAS2hB,GAAkC5hB,EAAMC,EAAM,CAC1DlC,EAAUiC,CAAI,EAAE,QAAUjC,EAAUkC,CAAI,CAC5C,CAEO,SAAS4hB,GAAkC7hB,EAAM,CAEpD,OADYjC,EAAUiC,CAAI,EAAE,UAEhC,CAEO,SAAS8hB,GAA2B9hB,EAAM,CAE7C,OADYjC,EAAUiC,CAAI,EAAE,IAAK,CAErC,CAEO,SAAS+hB,GAAmC/hB,EAAM,CACrD,MAAMf,EAAMlB,EAAUiC,CAAI,EAAE,YAC5B,OAAOpC,EAAcqB,CAAG,CAC5B,CAEO,SAAS+iB,GAA+BhiB,EAAMC,EAAMO,EAAM,CAC7D,MAAMvB,EAAMc,GAAeC,EAAMC,EAAM,GAAIM,EAAgB,EAC3D,OAAO3C,EAAcqB,CAAG,CAC5B,CAEO,SAASgjB,GAA+BjiB,EAAMC,EAAMO,EAAM,CAC7D,MAAMvB,EAAMc,GAAeC,EAAMC,EAAM,IAAKW,EAAgB,EAC5D,OAAOhD,EAAcqB,CAAG,CAC5B,CAEO,SAASijB,GAA+BliB,EAAMC,EAAMO,EAAM,CAC7D,MAAMvB,EAAMc,GAAeC,EAAMC,EAAM,IAAKY,EAAgB,EAC5D,OAAOjD,EAAcqB,CAAG,CAC5B,CAEO,SAASkjB,GAA+BniB,EAAMC,EAAMO,EAAM,CAC7D,MAAMvB,EAAM6B,GAAYd,EAAMC,EAAM,IAAKc,EAAgB,EACzD,OAAOnD,EAAcqB,CAAG,CAC5B,CAEO,SAASmjB,GAA+BpiB,EAAMC,EAAMO,EAAM,CAC7D,MAAMvB,EAAM6B,GAAYd,EAAMC,EAAM,IAAKe,EAAgB,EACzD,OAAOpD,EAAcqB,CAAG,CAC5B,y8RChgWMojB,GAAY,IAAgE,IAAA,GAAA,IAAA,IAAA,0CAAA,YAAA,GAAA,EAAA,KAAA,YAAA,GAAA,EASlFC,GACI,IAAI,MACA,CAAE,EACF,CACI,KAAM,CACF,MAAM,IAAI,MACN,gGACH,CACJ,CACJ,CACJ,CACL,EAMA,IAAIC,GAAa,KAOjB,eAAeC,IAAkB,CAC7B,KAAM,CAAE,SAAArhB,CAAQ,EAAK,MAAM,YAAY,qBAAqB,MAAMkhB,EAAS,EAAG,CAE1E,iCAAkCI,EAC1C,CAAK,EAEDH,GAAwBnhB,EAAS,OAAO,EAExCA,EAAS,QAAQ,iBAAkB,CACvC,CASO,eAAeuhB,IAAY,CACzBH,KAAYA,GAAaC,GAAiB,GAC/C,MAAMD,EACV","x_google_ignoreList":[0,1]}