import{U as d,E as Je,a as L,C as de,R,H as x,D as M,K as je,b as He,c as Qe,S as Ye,d as ze,T as Ze,e as Xe,f as et,P as tt,g as le,Q as ye,V as I,h as st,i as F,j as B,B as P,k as it,L as pe,O as nt,l as rt,m as ot,n as at,o as fe,p as Be,q as me,r as ct,M as ut,s as C,t as we,u as O,v as Oe,w as qe,x as Te,y as ht,z as ue,A as gt,F as dt,G as se,I as lt}from"./matrix-sdk-crypto-wasm-3qVDcFvi.js";import{l as h,K as Z,L as Pe,d as E,D as X,E as v,H as G,e as f,h as yt,j as ae,k as ee,T as pt,m as ft,s as _,n as H,o as Ve,p as te,q as Ue,V as N,r as m,u as K,v as Ne,w as Ae,x as Le,y as A,z as y,M as $e,A as mt,B as wt,U as ie,F as ce,G as kt,I as W,S as ke,J as Se,N as St,O as ve,P as vt,Q as Rt,R as ne,W as Re,X as S,Y as k,Z as Q,$ as q,a0 as $,a1 as b,a2 as bt}from"./index-DdIOerG8.js";class Kt{constructor(e,t,s,i,n){this.olmMachine=e,this.keyClaimManager=t,this.outgoingRequestManager=s,this.room=i,this.encryptionSettings=n,this.lazyLoadedMembersResolved=!1,this.currentEncryptionPromise=Promise.resolve(),this.prefixedLogger=h.getChild(`[${i.roomId} encryption]`);const r=i.getJoinedMembers();this.olmMachine.updateTrackedUsers(r.map(o=>new d(o.userId))).catch(o=>this.prefixedLogger.error("Error initializing tracked users",o))}onCryptoEvent(e){if(JSON.stringify(this.encryptionSettings)!=JSON.stringify(e))throw new Error("Cannot reconfigure an active RoomEncryptor")}onRoomMembership(e){(e.membership==Z.Join||e.membership==Z.Invite&&this.room.shouldEncryptForInvitedMembers())&&this.olmMachine.updateTrackedUsers([new d(e.userId)]).catch(t=>{this.prefixedLogger.error("Unable to update tracked users",t)})}async prepareForEncryption(e,t){await this.encryptEvent(null,e,t)}encryptEvent(e,t,s){const i=new Pe(this.prefixedLogger,e?e.getTxnId()??"":"prepareForEncryption"),n=this.currentEncryptionPromise.catch(()=>{}).then(async()=>{await E(i,"ensureEncryptionSession",async()=>{await this.ensureEncryptionSession(i,t,s)}),e&&await E(i,"encryptEventInner",async()=>{await this.encryptEventInner(i,e)})});return this.currentEncryptionPromise=n,n}async ensureEncryptionSession(e,t,s){if(this.encryptionSettings.algorithm!=="m.megolm.v1.aes-sha2")throw new Error(`Cannot encrypt in ${this.room.roomId} for unsupported algorithm '${this.encryptionSettings.algorithm}'`);e.debug("Starting encryption");const i=await this.room.getEncryptionTargetMembers();this.lazyLoadedMembersResolved?(e.debug("Processing outgoing requests in background"),this.outgoingRequestManager.doProcessOutgoingRequests()):(await E(this.prefixedLogger,"loadMembersIfNeeded: updateTrackedUsers",async()=>{await this.olmMachine.updateTrackedUsers(i.map(o=>new d(o.userId)))}),e.debug("Updated tracked users"),this.lazyLoadedMembersResolved=!0,e.debug("Processing outgoing requests"),await E(this.prefixedLogger,"doProcessOutgoingRequests",async()=>{await this.outgoingRequestManager.doProcessOutgoingRequests()})),e.debug(`Encrypting for users (shouldEncryptForInvitedMembers: ${this.room.shouldEncryptForInvitedMembers()}):`,i.map(o=>`${o.userId} (${o.membership})`));const n=i.map(o=>new d(o.userId));await E(this.prefixedLogger,"ensureSessionsForUsers",async()=>{await this.keyClaimManager.ensureSessionsForUsers(e,n)});const r=new Je;switch(r.historyVisibility=Et(this.room.getHistoryVisibility()),r.algorithm=L.MegolmV1AesSha2,typeof this.encryptionSettings.rotation_period_ms=="number"&&(r.rotationPeriod=BigInt(this.encryptionSettings.rotation_period_ms*1e3)),typeof this.encryptionSettings.rotation_period_msgs=="number"&&(r.rotationPeriodMessages=BigInt(this.encryptionSettings.rotation_period_msgs)),s.kind){case X.AllDevicesIsolationMode:{const o=this.room.getBlacklistUnverifiedDevices()??t;r.sharingStrategy=de.deviceBasedStrategy(o,s.errorOnVerifiedUserProblems)}break;case X.OnlySignedDevicesIsolationMode:r.sharingStrategy=de.identityBasedStrategy();break}await E(this.prefixedLogger,"shareRoomKey",async()=>{const o=await this.olmMachine.shareRoomKey(new R(this.room.roomId),n,r);if(o)for(const c of o)await this.outgoingRequestManager.outgoingRequestProcessor.makeOutgoingRequest(c)})}async forceDiscardSession(){await this.olmMachine.invalidateGroupSession(new R(this.room.roomId))&&this.prefixedLogger.info("Discarded existing group session")}async encryptEventInner(e,t){e.debug("Encrypting actual message content");const s=await this.olmMachine.encryptRoomEvent(new R(this.room.roomId),t.getType(),JSON.stringify(t.getContent()));t.makeEncrypted(v.RoomMessageEncrypted,JSON.parse(s),this.olmMachine.identityKeys.curve25519.toBase64(),this.olmMachine.identityKeys.ed25519.toBase64()),e.debug("Encrypted event successfully")}}function Et(a){switch(a){case G.Invited:return x.Invited;case G.Joined:return x.Joined;case G.Shared:return x.Shared;case G.WorldReadable:return x.WorldReadable}}const Y="/_matrix/client/unstable/org.matrix.msc3814.v1",re="org.matrix.msc3814",Mt=7*24*60*60*1e3;class It{constructor(e,t,s,i,n){this.logger=e,this.olmMachine=t,this.http=s,this.outgoingRequestProcessor=i,this.secretStorage=n}async isSupported(){try{await this.http.authedRequest(f.Get,"/dehydrated_device",void 0,void 0,{prefix:Y})}catch(e){const t=e;if(t.errcode==="M_UNRECOGNIZED")return!1;if(t.errcode==="M_NOT_FOUND")return!0;throw e}return!0}async start(e){this.stop();try{await this.rehydrateDeviceIfAvailable()}catch(t){this.logger.info("dehydration: Error rehydrating device:",t)}e&&await this.resetKey(),await this.scheduleDeviceDehydration()}async isKeyStored(){return!!await this.secretStorage.isStored(re)}async resetKey(){const e=new Uint8Array(32);globalThis.crypto.getRandomValues(e),await this.secretStorage.store(re,yt(e)),this.key=e}async getKey(e){if(this.key===void 0){const t=await this.secretStorage.get(re);if(t===void 0){if(!e)return null;await this.resetKey()}else this.key=ae(t)}return this.key}async rehydrateDeviceIfAvailable(){const e=await this.getKey(!1);if(!e)return!1;let t;try{t=await this.http.authedRequest(f.Get,"/dehydrated_device",void 0,void 0,{prefix:Y})}catch(c){const u=c;if(u.errcode==="M_NOT_FOUND"||u.errcode==="M_UNRECOGNIZED")return this.logger.info("dehydration: No dehydrated device"),!1;throw u}this.logger.info("dehydration: dehydrated device found");const s=await this.olmMachine.dehydratedDevices().rehydrate(e,new M(t.device_id),JSON.stringify(t.device_data));this.logger.info("dehydration: device rehydrated");let i,n=0,r=0;const o=ee("/dehydrated_device/$device_id/events",{$device_id:t.device_id});for(;;){const c=await this.http.authedRequest(f.Post,o,void 0,i?{next_batch:i}:{},{prefix:Y});if(c.events.length===0)break;n+=c.events.length,i=c.next_batch;const u=await s.receiveEvents(JSON.stringify(c.events));r+=u.length}return this.logger.info(`dehydration: received ${r} room keys from ${n} to-device events`),!0}async createAndUploadDehydratedDevice(){const e=await this.getKey(!0),s=await(await this.olmMachine.dehydratedDevices().create()).keysForUpload("Dehydrated device",e);await this.outgoingRequestProcessor.makeOutgoingRequest(s),this.logger.info("dehydration: uploaded device")}async scheduleDeviceDehydration(){this.stop(),await this.createAndUploadDehydratedDevice(),this.intervalId=setInterval(()=>{this.createAndUploadDehydratedDevice().catch(e=>{this.logger.error("Error creating dehydrated device:",e)})},Mt)}stop(){this.intervalId&&(clearInterval(this.intervalId),this.intervalId=void 0)}}class Ct{constructor(e,t){this.olmMachine=e,this.http=t}async makeOutgoingRequest(e,t){let s;if(e instanceof je)s=await this.requestWithRetry(f.Post,"/_matrix/client/v3/keys/upload",{},e.body);else if(e instanceof He)s=await this.requestWithRetry(f.Post,"/_matrix/client/v3/keys/query",{},e.body);else if(e instanceof Qe)s=await this.requestWithRetry(f.Post,"/_matrix/client/v3/keys/claim",{},e.body);else if(e instanceof Ye)s=await this.requestWithRetry(f.Post,"/_matrix/client/v3/keys/signatures/upload",{},e.body);else if(e instanceof ze)s=await this.requestWithRetry(f.Put,"/_matrix/client/v3/room_keys/keys",{version:e.version},e.body);else if(e instanceof Ze)s=await this.sendToDeviceRequest(e);else if(e instanceof Xe){const i=`/_matrix/client/v3/rooms/${encodeURIComponent(e.room_id)}/send/${encodeURIComponent(e.event_type)}/${encodeURIComponent(e.txn_id)}`;s=await this.requestWithRetry(f.Put,i,{},e.body)}else if(e instanceof et){await this.makeRequestWithUIA(f.Post,"/_matrix/client/v3/keys/device_signing/upload",{},e.body,t);return}else if(e instanceof tt){const i=Y+"/dehydrated_device";await this.rawJsonRequest(f.Put,i,{},e.body);return}else h.warn("Unsupported outgoing message",Object.getPrototypeOf(e)),s="";if(e.id)try{await E(h,`Mark Request as sent ${e.type}`,async()=>{await this.olmMachine.markRequestAsSent(e.id,e.type,s)})}catch(i){if(i instanceof Error&&(i.message==="Attempt to use a moved value"||i.message==="null pointer passed to rust"))h.log(`Ignoring error '${i.message}': client is likely shutting down`);else throw i}else h.trace(`Outgoing request type:${e.type} does not have an ID`)}async sendToDeviceRequest(e){const t=JSON.parse(e.body),s=[];for(const[n,r]of Object.entries(t.messages))for(const[o,c]of Object.entries(r))s.push(`${n}/${o} (msgid ${c[pt]})`);h.info(`Sending batch of to-device messages. type=${e.event_type} txnid=${e.txn_id}`,s);const i=`/_matrix/client/v3/sendToDevice/${encodeURIComponent(e.event_type)}/`+encodeURIComponent(e.txn_id);return await this.requestWithRetry(f.Put,i,{},e.body)}async makeRequestWithUIA(e,t,s,i,n){if(!n)return await this.requestWithRetry(e,t,s,i);const r=JSON.parse(i),c=await n(async u=>{const g={...r};u!==null&&(g.auth=u);const l=await this.requestWithRetry(e,t,s,JSON.stringify(g));return JSON.parse(l)});return JSON.stringify(c)}async requestWithRetry(e,t,s,i){let n=0;for(;;)try{return await this.rawJsonRequest(e,t,s,i)}catch(r){n++;const o=ft(r,n,!0);if(o<0)throw r;await _(o)}}async rawJsonRequest(e,t,s,i){const n={json:!1,headers:{"Content-Type":"application/json",Accept:"application/json"},prefix:""};return await this.http.authedRequest(e,t,s,i,n)}}class _t{constructor(e,t){this.olmMachine=e,this.outgoingRequestProcessor=t,this.stopped=!1,this.currentClaimPromise=Promise.resolve()}stop(){this.stopped=!0}ensureSessionsForUsers(e,t){const s=this.currentClaimPromise.catch(()=>{}).then(()=>this.ensureSessionsForUsersInner(e,t));return this.currentClaimPromise=s,s}async ensureSessionsForUsersInner(e,t){if(this.stopped)throw new Error("Cannot ensure Olm sessions: shutting down");e.info("Checking for missing Olm sessions");const s=await this.olmMachine.getMissingSessions(t.map(i=>i.clone()));s&&(e.info("Making /keys/claim request"),await this.outgoingRequestProcessor.makeOutgoingRequest(s)),e.info("Olm sessions prepared")}}function Dt(a,e){const t=new Map;for(const[c,u]of a.keys.entries())t.set(c.toString(),u.toBase64());let s=H.Unverified;a.isBlacklisted()?s=H.Blocked:a.isVerified()&&(s=H.Verified);const i=new Map,n=a.signatures.get(e);if(n){const c=new Map;for(const[u,g]of n.entries())g.isValid()&&g.signature&&c.set(u,g.signature.toBase64());i.set(e.toString(),c)}const r=a.algorithms,o=new Set;return r.forEach(c=>{switch(c){case L.MegolmV1AesSha2:o.add("m.megolm.v1.aes-sha2");break;case L.OlmV1Curve25519AesSha2:default:o.add("m.olm.v1.curve25519-aes-sha2");break}}),new Ve({deviceId:a.deviceId.toString(),userId:e.toString(),keys:t,algorithms:Array.from(o),verified:s,signatures:i,displayName:a.displayName,dehydrated:a.isDehydrated})}function Bt(a){return new Map(Object.entries(a).map(([e,t])=>[e,Ot(t)]))}function Ot(a){var i;const e=new Map(Object.entries(a.keys)),t=(i=a.unsigned)==null?void 0:i.device_display_name,s=new Map;if(a.signatures)for(const n in a.signatures)s.set(n,new Map(Object.entries(a.signatures[n])));return new Ve({deviceId:a.device_id,userId:a.user_id,keys:e,algorithms:a.algorithms,verified:H.Unverified,signatures:s,displayName:t})}class qt{constructor(e,t,s){this.olmMachine=e,this.outgoingRequestProcessor=t,this.secretStorage=s}async bootstrapCrossSigning(e){if(e.setupNewCrossSigning){await this.resetCrossSigning(e.authUploadDeviceSigningKeys);return}const t=await this.olmMachine.crossSigningStatus(),s=await this.secretStorage.get("m.cross_signing.master"),i=await this.secretStorage.get("m.cross_signing.self_signing"),n=await this.secretStorage.get("m.cross_signing.user_signing"),r=!!(s&&i&&n),o=t.hasMaster&&t.hasUserSigning&&t.hasSelfSigning;if(h.log("bootstrapCrossSigning: starting",{setupNewCrossSigning:e.setupNewCrossSigning,olmDeviceHasMaster:t.hasMaster,olmDeviceHasUserSigning:t.hasUserSigning,olmDeviceHasSelfSigning:t.hasSelfSigning,privateKeysInSecretStorage:r}),o)await this.secretStorage.hasKey()?r?h.log("bootstrapCrossSigning: Olm device has private keys and they are saved in secret storage; doing nothing"):(h.log("bootstrapCrossSigning: Olm device has private keys: exporting to secret storage"),await this.exportCrossSigningKeysToStorage()):h.warn("bootstrapCrossSigning: Olm device has private keys, but secret storage is not yet set up; doing nothing for now.");else if(r){h.log("bootstrapCrossSigning: Cross-signing private keys not found locally, but they are available in secret storage, reading storage and caching locally");const c=await this.olmMachine.importCrossSigningKeys(s,i,n);if(!c.hasMaster||!c.hasSelfSigning||!c.hasUserSigning)throw new Error("importCrossSigningKeys failed to import the keys");const u=await this.olmMachine.getDevice(this.olmMachine.userId,this.olmMachine.deviceId);try{const g=await u.verify();await this.outgoingRequestProcessor.makeOutgoingRequest(g)}finally{u.free()}}else h.log("bootstrapCrossSigning: Cross-signing private keys not found locally or in secret storage, creating new keys"),await this.resetCrossSigning(e.authUploadDeviceSigningKeys);h.log("bootstrapCrossSigning: complete")}async resetCrossSigning(e){const t=await this.olmMachine.bootstrapCrossSigning(!0);await this.secretStorage.hasKey()?(h.log("resetCrossSigning: exporting private keys to secret storage"),await this.exportCrossSigningKeysToStorage()):h.warn("resetCrossSigning: Secret storage is not yet set up; not exporting keys to secret storage yet."),h.log("resetCrossSigning: publishing public keys to server");for(const s of[t.uploadKeysRequest,t.uploadSigningKeysRequest,t.uploadSignaturesRequest])s&&await this.outgoingRequestProcessor.makeOutgoingRequest(s,e)}async exportCrossSigningKeysToStorage(){const e=await this.olmMachine.exportCrossSigningKeys();e!=null&&e.masterKey?await this.secretStorage.store("m.cross_signing.master",e.masterKey):h.error("Cannot export MSK to secret storage, private key unknown"),e!=null&&e.self_signing_key?await this.secretStorage.store("m.cross_signing.self_signing",e.self_signing_key):h.error("Cannot export SSK to secret storage, private key unknown"),e!=null&&e.userSigningKey?await this.secretStorage.store("m.cross_signing.user_signing",e.userSigningKey):h.error("Cannot export USK to secret storage, private key unknown")}}async function be(a){return xe(a,["m.cross_signing.master","m.cross_signing.user_signing","m.cross_signing.self_signing"])}async function xe(a,e){const t=await a.getDefaultKeyId();if(!t)return!1;for(const s of e){const i=await a.isStored(s)||{};if(!(t in i))return!1}return!0}class T extends te{constructor(e,t,s,i){super(),this.olmMachine=e,this.inner=t,this.outgoingRequestProcessor=s,this.supportedVerificationMethods=i,this._accepting=!1,this._cancelling=!1,this.reEmitter=new Ue(this);const n=new WeakRef(this);t.registerChangesCallback(async()=>{var r;return(r=n.deref())==null?void 0:r.onChange()})}onChange(){const e=this.inner.getVerification();e instanceof le?this._verifier===void 0||this._verifier instanceof Ke?this.setVerifier(new Ee(e,this,this.outgoingRequestProcessor)):this._verifier instanceof Ee&&this._verifier.replaceInner(e):e instanceof ye&&this._verifier===void 0&&this.setVerifier(new Ke(e,this.outgoingRequestProcessor)),this.emit(N.Change)}setVerifier(e){this._verifier&&this.reEmitter.stopReEmitting(this._verifier,[N.Change]),this._verifier=e,this.reEmitter.reEmit(this._verifier,[N.Change])}get transactionId(){return this.inner.flowId}get roomId(){var e;return(e=this.inner.roomId)==null?void 0:e.toString()}get initiatedByMe(){return this.inner.weStarted()}get otherUserId(){return this.inner.otherUserId.toString()}get otherDeviceId(){var e;return(e=this.inner.otherDeviceId)==null?void 0:e.toString()}async getOtherDevice(){const e=this.inner.otherDeviceId;if(e)return await this.olmMachine.getDevice(this.inner.otherUserId,e,5)}get isSelfVerification(){return this.inner.isSelfVerification()}get phase(){const e=this.inner.phase();switch(e){case I.Created:case I.Requested:return m.Requested;case I.Ready:return this._accepting?m.Requested:m.Ready;case I.Transitioned:if(!this._verifier)throw new Error("VerificationRequest: inner phase == Transitioned but no verifier!");return this._verifier.verificationPhase;case I.Done:return m.Done;case I.Cancelled:return m.Cancelled}throw new Error(`Unknown verification phase ${e}`)}get pending(){if(this.inner.isPassive())return!1;const e=this.phase;return e!==m.Done&&e!==m.Cancelled}get accepting(){return this._accepting}get declining(){return this._cancelling}get timeout(){return this.inner.timeRemainingMillis()}get methods(){throw new Error("not implemented")}get chosenMethod(){if(this.phase!==m.Started)return null;const e=this.inner.getVerification();return e instanceof le?K.Sas:e instanceof ye?K.Reciprocate:null}otherPartySupportsMethod(e){const t=this.inner.theirSupportedMethods;if(t===void 0)return!1;const s=Ge[e];return t.some(i=>i===s)}async accept(){if(this.inner.phase()!==I.Requested||this._accepting)throw new Error(`Cannot accept a verification request in phase ${this.phase}`);this._accepting=!0;try{const e=this.inner.acceptWithMethods(this.supportedVerificationMethods.map(z));e&&await this.outgoingRequestProcessor.makeOutgoingRequest(e)}finally{this._accepting=!1}this.emit(N.Change)}async cancel(e){if(!this._cancelling){this._cancelling=!0;try{const t=this.inner.cancel();t&&await this.outgoingRequestProcessor.makeOutgoingRequest(t)}finally{this._cancelling=!1}}}beginKeyVerification(e,t){throw new Error("not implemented")}async startVerification(e){if(e!==K.Sas)throw new Error(`Unsupported verification method ${e}`);if(!await this.getOtherDevice())throw new Error("startVerification(): other device is unknown");const t=await this.inner.startSas();if(t){const[,s]=t;await this.outgoingRequestProcessor.makeOutgoingRequest(s)}if(!this._verifier)throw new Error("Still no verifier after startSas() call");return this._verifier}async scanQRCode(e){const t=st.fromBytes(e),s=await this.inner.scanQrCode(t);if(!this._verifier)throw new Error("Still no verifier after scanQrCode() call");const i=s.reciprocate();return i&&await this.outgoingRequestProcessor.makeOutgoingRequest(i),this._verifier}get verifier(){return this.phase===m.Started?this._verifier:void 0}getQRCodeBytes(){throw new Error("getQRCodeBytes() unsupported in Rust Crypto; use generateQRCode() instead.")}async generateQRCode(){if(!await this.getOtherDevice())throw new Error("generateQRCode(): other device is unknown");const e=await this.inner.generateQrCode();if(e)return e.toBytes()}get cancellationCode(){var e;return((e=this.inner.cancelInfo)==null?void 0:e.cancelCode())??null}get cancellingUserId(){const e=this.inner.cancelInfo;if(e)return e.cancelledbyUs()?this.olmMachine.userId.toString():this.inner.otherUserId.toString()}}class Fe extends te{constructor(e,t){super(),this.inner=e,this.outgoingRequestProcessor=t,this.completionDeferred=Le();const s=new WeakRef(this);e.registerChangesCallback(async()=>{var i;return(i=s.deref())==null?void 0:i.onChange()}),this.completionDeferred.promise.catch(()=>null)}onChange(){if(this.inner.isDone())this.completionDeferred.resolve(void 0);else if(this.inner.isCancelled()){const e=this.inner.cancelInfo();this.completionDeferred.reject(new Error(`Verification cancelled by ${e.cancelledbyUs()?"us":"them"} with code ${e.cancelCode()}: ${e.reason()}`))}this.emit(N.Change)}get hasBeenCancelled(){return this.inner.isCancelled()}get userId(){return this.inner.otherUserId.toString()}cancel(e){const t=this.inner.cancel();t&&this.outgoingRequestProcessor.makeOutgoingRequest(t)}getShowSasCallbacks(){return null}getReciprocateQrCodeCallbacks(){return null}}class Ke extends Fe{constructor(e,t){super(e,t),this.callbacks=null}onChange(){this.callbacks===null&&this.inner.hasBeenScanned()&&(this.callbacks={confirm:()=>{this.confirmScanning()},cancel:()=>this.cancel()}),super.onChange()}async verify(){this.callbacks!==null&&this.emit(Ae.ShowReciprocateQr,this.callbacks),await this.completionDeferred.promise}get verificationPhase(){switch(this.inner.state()){case B.Created:return m.Ready;case B.Scanned:return m.Started;case B.Confirmed:return m.Started;case B.Reciprocated:return m.Started;case B.Done:return m.Done;case B.Cancelled:return m.Cancelled;default:throw new Error(`Unknown qr code state ${this.inner.state()}`)}}getReciprocateQrCodeCallbacks(){return this.callbacks}async confirmScanning(){const e=this.inner.confirmScanning();e&&await this.outgoingRequestProcessor.makeOutgoingRequest(e)}}class Ee extends Fe{constructor(e,t,s){super(e,s),this.callbacks=null}async verify(){await this.sendAccept(),await this.completionDeferred.promise}async sendAccept(){const e=this.inner.accept();e&&await this.outgoingRequestProcessor.makeOutgoingRequest(e)}onChange(){if(super.onChange(),this.callbacks===null){const e=this.inner.emoji(),t=this.inner.decimals();if(e===void 0&&t===void 0)return;const s={};e&&(s.emoji=e.map(i=>[i.symbol,i.description])),t&&(s.decimal=[t[0],t[1],t[2]]),this.callbacks={sas:s,confirm:async()=>{const i=await this.inner.confirm();for(const n of i)await this.outgoingRequestProcessor.makeOutgoingRequest(n)},mismatch:()=>{const i=this.inner.cancelWithCode("m.mismatched_sas");i&&this.outgoingRequestProcessor.makeOutgoingRequest(i)},cancel:()=>{const i=this.inner.cancelWithCode("m.user");i&&this.outgoingRequestProcessor.makeOutgoingRequest(i)}},this.emit(Ae.ShowSas,this.callbacks)}}get verificationPhase(){return m.Started}getShowSasCallbacks(){return this.callbacks}replaceInner(e){if(this.inner!=e){this.inner=e;const t=new WeakRef(this);e.registerChangesCallback(async()=>{var s;return(s=t.deref())==null?void 0:s.onChange()}),this.sendAccept(),this.onChange()}}}const Ge={[K.Sas]:F.SasV1,[K.ScanQrCode]:F.QrCodeScanV1,[K.ShowQrCode]:F.QrCodeShowV1,[K.Reciprocate]:F.ReciprocateV1};function z(a){const e=Ge[a];if(e===void 0)throw new Error(`Unknown verification method ${a}`);return e}function Tt(a){switch(a.getType()){case v.KeyVerificationCancel:case v.KeyVerificationDone:case v.KeyVerificationMac:case v.KeyVerificationStart:case v.KeyVerificationKey:case v.KeyVerificationReady:case v.KeyVerificationAccept:return!0;case v.RoomMessage:return a.getContent().msgtype===Ne.KeyVerificationRequest;default:return!1}}class Pt extends te{constructor(e,t,s){super(),this.olmMachine=e,this.http=t,this.outgoingRequestProcessor=s,this.checkedForBackup=!1,this.serverBackupInfo=void 0,this.activeBackupVersion=null,this.stopped=!1,this.backupKeysLoopRunning=!1,this.keyBackupCheckInProgress=null}stop(){this.stopped=!0}async getActiveBackupVersion(){return await this.olmMachine.isBackupEnabled()?this.activeBackupVersion:null}async getServerBackupInfo(){return await this.checkKeyBackupAndEnable(!1),this.serverBackupInfo}async isKeyBackupTrusted(e){const t=await this.olmMachine.verifyBackup(e),s=await this.olmMachine.getBackupKeys(),i=s==null?void 0:s.decryptionKey;return{matchesDecryptionKey:!!i&&Me(e,i),trusted:t.trusted()}}checkKeyBackupAndEnable(e){return!e&&this.checkedForBackup?Promise.resolve(null):(this.keyBackupCheckInProgress||(this.keyBackupCheckInProgress=this.doCheckKeyBackup().finally(()=>{this.keyBackupCheckInProgress=null})),this.keyBackupCheckInProgress)}async handleBackupSecretReceived(e){var s;const t=await this.checkKeyBackupAndEnable(!0);if(!((s=t==null?void 0:t.backupInfo)!=null&&s.version)||!t.trustInfo.trusted)return h.warn("handleBackupSecretReceived: Received a backup decryption key, but there is no trusted server-side key backup"),!1;try{const i=P.fromBase64(e);return Me(t.backupInfo,i)?(h.info("handleBackupSecretReceived: A valid backup decryption key has been received and stored in cache."),await this.saveBackupDecryptionKey(i,t.backupInfo.version),!0):(h.warn("handleBackupSecretReceived: Private decryption key does not match the public key of the current remote backup."),!1)}catch(i){h.warn("handleBackupSecretReceived: Invalid backup decryption key",i)}return!1}async saveBackupDecryptionKey(e,t){await this.olmMachine.saveBackupDecryptionKey(e,t),this.emit(y.KeyBackupDecryptionKeyCached,t)}async importRoomKeys(e,t){await this.importRoomKeysAsJson(JSON.stringify(e),t)}async importRoomKeysAsJson(e,t){await this.olmMachine.importExportedRoomKeys(e,(s,i)=>{var r;const n={total:Number(i),successes:Number(s),stage:"load_keys",failures:0};(r=t==null?void 0:t.progressCallback)==null||r.call(t,n)})}async importBackedUpRoomKeys(e,t,s){const i=new Map;for(const n of e){const r=new R(n.room_id);i.has(r)||i.set(r,new Map),i.get(r).set(n.session_id,n)}await this.olmMachine.importBackedUpRoomKeys(i,(n,r,o)=>{var u;const c={total:Number(r),successes:Number(n),stage:"load_keys",failures:Number(o)};(u=s==null?void 0:s.progressCallback)==null||u.call(s,c)},t)}async doCheckKeyBackup(){h.log("Checking key backup status...");let e;try{e=await this.requestKeyBackupVersion()}catch(i){return h.warn("Error checking for active key backup",i),this.serverBackupInfo=void 0,null}this.checkedForBackup=!0,e&&!e.version&&(h.warn("active backup lacks a useful 'version'; ignoring it"),e=void 0),this.serverBackupInfo=e;const t=await this.getActiveBackupVersion();if(!e)return t!==null?(h.log("No key backup present on server: disabling key backup"),await this.disableKeyBackup()):h.log("No key backup present on server: not enabling key backup"),null;const s=await this.isKeyBackupTrusted(e);return s.trusted?t===null?(h.log(`Found usable key backup v${e.version}: enabling key backups`),await this.enableKeyBackup(e)):t!==e.version?(h.log(`On backup version ${t} but found version ${e.version}: switching.`),await this.disableKeyBackup(),await this.enableKeyBackup(e)):h.log(`Backup version ${e.version} still current`):t!==null?(h.log("Key backup present on server but not trusted: disabling key backup"),await this.disableKeyBackup()):h.log("Key backup present on server but not trusted: not enabling key backup"),{backupInfo:e,trustInfo:s}}async enableKeyBackup(e){await this.olmMachine.enableBackupV1(e.auth_data.public_key,e.version),this.activeBackupVersion=e.version,this.emit(y.KeyBackupStatus,!0),this.backupKeysLoop()}async maybeUploadKey(){this.activeBackupVersion!=null&&this.backupKeysLoop()}async disableKeyBackup(){await this.olmMachine.disableBackup(),this.activeBackupVersion=null,this.emit(y.KeyBackupStatus,!1)}async backupKeysLoop(e=1e4){if(this.backupKeysLoopRunning){h.log("Backup loop already running");return}this.backupKeysLoopRunning=!0,h.log(`Backup: Starting keys upload loop for backup version:${this.activeBackupVersion}.`);const t=Math.random()*e;await _(t);try{let s=0,i=null,n=!0;for(;!this.stopped;){let r=null;try{r=await E(h,"BackupRoomKeys: Get keys to backup from rust crypto-sdk",async()=>await this.olmMachine.backupRoomKeys())}catch(o){h.error("Backup: Failed to get keys to backup from rust crypto-sdk",o)}if(!r||this.stopped||!this.activeBackupVersion){h.log(`Backup: Ending loop for version ${this.activeBackupVersion}.`),r||this.emit(y.KeyBackupSessionsRemaining,0);return}try{if(await this.outgoingRequestProcessor.makeOutgoingRequest(r),s=0,this.stopped)break;if(!n&&i===null)try{const o=await this.olmMachine.roomKeyCounts();i=o.total-o.backedUp}catch(o){h.error("Backup: Failed to get key counts from rust crypto-sdk",o)}if(i!==null){this.emit(y.KeyBackupSessionsRemaining,i);const o=this.keysCountInBatch(r);i=Math.max(i-o,0)}}catch(o){if(s++,h.error("Backup: Error processing backup request for rust crypto-sdk",o),o instanceof $e){const c=o.data.errcode;if(c=="M_NOT_FOUND"||c=="M_WRONG_ROOM_KEYS_VERSION"){h.log(`Backup: Failed to upload keys to current vesion: ${c}.`);try{await this.disableKeyBackup()}catch(u){h.error("Backup: An error occurred while disabling key backup:",u)}this.emit(y.KeyBackupFailed,o.data.errcode),this.backupKeysLoopRunning=!1,this.checkKeyBackupAndEnable(!0);return}else if(o.isRateLimitError())try{const u=o.getRetryAfterMs();if(u&&u>0){await _(u);continue}}catch(u){h.warn("Backup: An error occurred while retrieving a rate-limit retry delay",u)}}await _(1e3*Math.pow(2,Math.min(s-1,4)))}n=!1}}finally{this.backupKeysLoopRunning=!1}}keysCountInBatch(e){const t=JSON.parse(e.body);return Ie(t)}async requestKeyBackupVersion(e){return await We(this.http,e)}async setupKeyBackup(e){await this.deleteAllKeyBackupVersions();const t=P.createRandomKey(),s=t.megolmV1PublicKey,i={public_key:s.publicKeyBase64};await e(i);const n=await this.http.authedRequest(f.Post,"/room_keys/version",void 0,{algorithm:s.algorithm,auth_data:i},{prefix:A.V3});return await this.saveBackupDecryptionKey(t,n.version),{version:n.version,algorithm:s.algorithm,authData:i,decryptionKey:t}}async deleteAllKeyBackupVersions(){var t,s;let e=((t=await this.requestKeyBackupVersion())==null?void 0:t.version)??null;for(;e!=null;)await this.deleteKeyBackupVersion(e),e=((s=await this.requestKeyBackupVersion())==null?void 0:s.version)??null}async deleteKeyBackupVersion(e){h.debug(`deleteKeyBackupVersion v:${e}`);const t=ee("/room_keys/version/$version",{$version:e});await this.http.authedRequest(f.Delete,t,void 0,void 0,{prefix:A.V3}),this.activeBackupVersion===e&&(this.serverBackupInfo=null,await this.disableKeyBackup())}createBackupDecryptor(e){return new Vt(e)}async restoreKeyBackup(e,t,s){var n;const i=await this.downloadKeyBackup(e);return(n=s==null?void 0:s.progressCallback)==null||n.call(s,{stage:"load_keys"}),this.importKeyBackup(i,e,t,s)}downloadKeyBackup(e){return this.http.authedRequest(f.Get,"/room_keys/keys",{version:e},void 0,{prefix:A.V3})}async importKeyBackup(e,t,s,i){const r=Ie(e);let o=0,c=0;const u=async p=>{var V;const w=[];for(const D of p.keys())(await s.decryptSessions(p.get(D))).forEach(ge=>{ge.room_id=D,w.push(ge)});try{await this.importBackedUpRoomKeys(w,t),o+=w.length}catch(D){c+=w.length,h.error("Error importing keys from backup",D)}(V=i==null?void 0:i.progressCallback)==null||V.call(i,{total:r,successes:o,stage:"load_keys",failures:c})};let g=0,l=new Map;for(const[p,w]of Object.entries(e.rooms))if(w.sessions){l.set(p,{});for(const[V,D]of Object.entries(w.sessions)){const he=l.get(p);he[V]=D,g+=1,g>=200&&(await u(l),l=new Map,l.set(p,{}),g=0)}}return g>0&&await u(l),{total:r,imported:o}}}function Me(a,e){var t;return a.algorithm!=="m.megolm_backup.v1.curve25519-aes-sha2"?(h.warn("backupMatchesPrivateKey: Unsupported backup algorithm",a.algorithm),!1):((t=a.auth_data)==null?void 0:t.public_key)===e.megolmV1PublicKey.publicKeyBase64}class Vt{constructor(e){this.decryptionKey=e,this.sourceTrusted=!1}async decryptSessions(e){const t=[];for(const[s,i]of Object.entries(e))try{const n=JSON.parse(this.decryptionKey.decryptV1(i.session_data.ephemeral,i.session_data.mac,i.session_data.ciphertext));n.session_id=s,t.push(n)}catch(n){h.log("Failed to decrypt megolm session from backup",n,i)}return t}free(){this.decryptionKey.free()}}async function We(a,e){try{const t=e?ee("/room_keys/version/$version",{$version:e}):"/room_keys/version";return await a.authedRequest(f.Get,t,void 0,void 0,{prefix:A.V3})}catch(t){if(t.errcode==="M_NOT_FOUND")return null;throw t}}function oe(a,e){return e.auth_data.public_key===a.megolmV1PublicKey.publicKeyBase64}function Ie(a){let e=0;for(const{sessions:t}of Object.values(a.rooms))e+=Object.keys(t).length;return e}class Ut{constructor(e,t,s){this.logger=e,this.olmMachine=t,this.outgoingRequestProcessor=s,this.stopped=!1,this.outgoingRequestLoopRunning=!1}stop(){this.stopped=!0}doProcessOutgoingRequests(){this.nextLoopDeferred||(this.nextLoopDeferred=Le());const e=this.nextLoopDeferred.promise;return this.outgoingRequestLoopRunning||this.outgoingRequestLoop().catch(t=>{this.logger.error("Uncaught error in outgoing request loop",t)}),e}async outgoingRequestLoop(){if(this.outgoingRequestLoopRunning)throw new Error("Cannot run two outgoing request loops");this.outgoingRequestLoopRunning=!0;try{for(;!this.stopped&&this.nextLoopDeferred;){const e=this.nextLoopDeferred;this.nextLoopDeferred=void 0,await this.processOutgoingRequests().then(e.resolve,e.reject)}}finally{this.outgoingRequestLoopRunning=!1}this.nextLoopDeferred&&this.nextLoopDeferred.reject(new Error("OutgoingRequestsManager was stopped"))}async processOutgoingRequests(){if(this.stopped)return;const e=await this.olmMachine.outgoingRequests();for(const t of e){if(this.stopped)return;try{await E(this.logger,`Make outgoing request ${t.type}`,async()=>{await this.outgoingRequestProcessor.makeOutgoingRequest(t)})}catch(s){this.logger.error(`Failed to process outgoing request ${t.type}: ${s}`)}}}}const J=5e3;class U extends Error{constructor(e){super(`Failed to get key from backup: ${e}`),this.code=e,this.name="KeyDownloadError"}}class Ce extends Error{constructor(e){super("Failed to get key from backup: rate limited"),this.retryMillis=e,this.name="KeyDownloadRateLimitError"}}class Nt{constructor(e,t,s,i){this.olmMachine=t,this.http=s,this.backupManager=i,this.stopped=!1,this.configuration=null,this.sessionLastCheckAttemptedTime=new Map,this.downloadLoopRunning=!1,this.queuedRequests=[],this.hasConfigurationProblem=!1,this.currentBackupVersionCheck=null,this.onBackupStatusChanged=()=>{this.hasConfigurationProblem=!1,this.configuration=null,this.getOrCreateBackupConfiguration().then(n=>{n&&this.downloadKeysLoop()})},this.logger=e.getChild("[PerSessionKeyBackupDownloader]"),i.on(y.KeyBackupStatus,this.onBackupStatusChanged),i.on(y.KeyBackupFailed,this.onBackupStatusChanged),i.on(y.KeyBackupDecryptionKeyCached,this.onBackupStatusChanged)}isKeyBackupDownloadConfigured(){return this.configuration!==null}async getServerBackupInfo(){return await this.backupManager.getServerBackupInfo()}onDecryptionKeyMissingError(e,t){if(this.isAlreadyInQueue(e,t)){this.logger.trace(`Not checking key backup for session ${t} as it is already queued`);return}if(this.wasRequestedRecently(t)){this.logger.trace(`Not checking key backup for session ${t} as it was already requested recently`);return}this.queuedRequests.push({roomId:e,megolmSessionId:t}),this.downloadKeysLoop()}stop(){this.stopped=!0,this.backupManager.off(y.KeyBackupStatus,this.onBackupStatusChanged),this.backupManager.off(y.KeyBackupFailed,this.onBackupStatusChanged),this.backupManager.off(y.KeyBackupDecryptionKeyCached,this.onBackupStatusChanged)}isAlreadyInQueue(e,t){return this.queuedRequests.some(s=>s.roomId==e&&s.megolmSessionId==t)}markAsNotFoundInBackup(e){const t=Date.now();this.sessionLastCheckAttemptedTime.set(e,t),this.sessionLastCheckAttemptedTime.size>100&&(this.sessionLastCheckAttemptedTime=new Map(Array.from(this.sessionLastCheckAttemptedTime).filter((s,i)=>Math.max(t-i,0)<J)))}wasRequestedRecently(e){const t=this.sessionLastCheckAttemptedTime.get(e);return t?Math.max(Date.now()-t,0)<J:!1}async getBackupDecryptionKey(){try{return await this.olmMachine.getBackupKeys()}catch{return null}}async requestRoomKeyFromBackup(e,t,s){const i=ee("/room_keys/keys/$roomId/$sessionId",{$roomId:t,$sessionId:s});return await this.http.authedRequest(f.Get,i,{version:e},void 0,{prefix:A.V3})}async downloadKeysLoop(){if(!this.downloadLoopRunning&&!this.hasConfigurationProblem){this.downloadLoopRunning=!0;try{for(;this.queuedRequests.length>0;){const e=this.queuedRequests[0];try{const t=await this.getOrCreateBackupConfiguration();if(!t){this.downloadLoopRunning=!1;return}const s=await this.queryKeyBackup(e.roomId,e.megolmSessionId,t);if(this.stopped)return;try{await this.decryptAndImport(e,s,t)}catch(i){this.logger.error(`Error while decrypting and importing key backup for session ${e.megolmSessionId}`,i)}this.queuedRequests.shift()}catch(t){if(t instanceof U)switch(t.code){case"MISSING_DECRYPTION_KEY":this.markAsNotFoundInBackup(e.megolmSessionId),this.queuedRequests.shift();break;case"NETWORK_ERROR":await _(J);break;case"STOPPED":this.downloadLoopRunning=!1;return}else t instanceof Ce&&await _(t.retryMillis)}}}finally{this.downloadLoopRunning=!1}}}async queryKeyBackup(e,t,s){if(this.logger.debug(`Checking key backup for session ${t}`),this.stopped)throw new U("STOPPED");try{const i=await this.requestRoomKeyFromBackup(s.backupVersion,e,t);return this.logger.debug(`Got key from backup for sessionId:${t}`),i}catch(i){if(this.stopped)throw new U("STOPPED");if(this.logger.info(`No luck requesting key backup for session ${t}: ${i}`),i instanceof $e){if(i.data.errcode=="M_NOT_FOUND")throw new U("MISSING_DECRYPTION_KEY");if(i.isRateLimitError()){let r;try{r=i.getRetryAfterMs()??void 0}catch(o){this.logger.warn("Error while retrieving a rate-limit retry delay",o)}throw r&&r>0&&this.logger.info(`Rate limited by server, waiting ${r}ms`),new Ce(r??J)}}throw new U("NETWORK_ERROR")}}async decryptAndImport(e,t,s){const i={[e.megolmSessionId]:t},n=await s.decryptor.decryptSessions(i);for(const r of n)r.room_id=e.roomId;await this.backupManager.importBackedUpRoomKeys(n,s.backupVersion)}async getOrCreateBackupConfiguration(){if(this.configuration)return this.configuration;if(this.hasConfigurationProblem)return null;if(this.currentBackupVersionCheck!=null)return this.logger.debug("Already checking server version, use current promise"),await this.currentBackupVersionCheck;this.currentBackupVersionCheck=this.internalCheckFromServer();try{return await this.currentBackupVersionCheck}finally{this.currentBackupVersionCheck=null}}async internalCheckFromServer(){let e=null;try{e=await this.backupManager.getServerBackupInfo()}catch(r){return this.logger.debug(`Backup: error while checking server version: ${r}`),this.hasConfigurationProblem=!0,null}if(this.logger.debug(`Got current backup version from server: ${e==null?void 0:e.version}`),(e==null?void 0:e.algorithm)!="m.megolm_backup.v1.curve25519-aes-sha2")return this.logger.info(`Unsupported algorithm ${e==null?void 0:e.algorithm}`),this.hasConfigurationProblem=!0,null;if(!(e!=null&&e.version))return this.logger.info("No current key backup"),this.hasConfigurationProblem=!0,null;const t=await this.backupManager.getActiveBackupVersion();if(t==null||e.version!=t)return this.logger.info(`The current backup version on the server (${e.version}) is not trusted. Version we are currently backing up to: ${t}`),this.hasConfigurationProblem=!0,null;const s=await this.getBackupDecryptionKey();if(!(s!=null&&s.decryptionKey))return this.logger.debug("Not checking key backup for session (no decryption key)"),this.hasConfigurationProblem=!0,null;if(t!=s.backupVersion)return this.logger.debug(`Version for which we have a decryption key (${s.backupVersion}) doesn't match the version we are backing up to (${t})`),this.hasConfigurationProblem=!0,null;if(e.auth_data.public_key!=s.decryptionKey.megolmV1PublicKey.publicKeyBase64)return this.logger.debug("Key backup on server does not match our decryption key"),this.hasConfigurationProblem=!0,null;const n=this.backupManager.createBackupDecryptor(s.decryptionKey);return this.hasConfigurationProblem=!1,this.configuration={decryptor:n,backupVersion:t},this.configuration}}const _e=[K.Sas,K.ScanQrCode,K.ShowQrCode,K.Reciprocate];class At extends te{constructor(e,t,s,i,n,r,o){super(),this.logger=e,this.olmMachine=t,this.http=s,this.userId=i,this.secretStorage=r,this.cryptoCallbacks=o,this.RECOVERY_KEY_DERIVATION_ITERATIONS=5e5,this._trustCrossSignedDevices=!0,this.deviceIsolationMode=new mt(!1),this.stopped=!1,this.roomEncryptors={},this.reemitter=new Ue(this),this.globalBlacklistUnverifiedDevices=!1,this._supportedVerificationMethods=_e,this.outgoingRequestProcessor=new Ct(t,s),this.outgoingRequestsManager=new Ut(this.logger,t,this.outgoingRequestProcessor),this.keyClaimManager=new _t(t,this.outgoingRequestProcessor),this.backupManager=new Pt(t,s,this.outgoingRequestProcessor),this.perSessionBackupDownloader=new Nt(this.logger,this.olmMachine,this.http,this.backupManager),this.dehydratedDeviceManager=new It(this.logger,t,s,this.outgoingRequestProcessor,r),this.eventDecryptor=new Lt(this.logger,t,this.perSessionBackupDownloader),this.reemitter.reEmit(this.backupManager,[y.KeyBackupStatus,y.KeyBackupSessionsRemaining,y.KeyBackupFailed,y.KeyBackupDecryptionKeyCached]),this.crossSigningIdentity=new qt(t,this.outgoingRequestProcessor,r),this.checkKeyBackupAndEnable()}getOlmMachineOrThrow(){if(this.stopped)throw new wt;return this.olmMachine}set globalErrorOnUnknownDevices(e){}get globalErrorOnUnknownDevices(){return!1}stop(){this.stopped||(this.stopped=!0,this.keyClaimManager.stop(),this.backupManager.stop(),this.outgoingRequestsManager.stop(),this.perSessionBackupDownloader.stop(),this.dehydratedDeviceManager.stop(),this.olmMachine.close())}async encryptEvent(e,t){const s=e.getRoomId(),i=this.roomEncryptors[s];if(!i)throw new Error(`Cannot encrypt event in unconfigured room ${s}`);await i.encryptEvent(e,this.globalBlacklistUnverifiedDevices,this.deviceIsolationMode)}async decryptEvent(e){if(!e.getRoomId())throw new Error("to-device event was not decrypted in preprocessToDeviceMessages");return await this.eventDecryptor.attemptEventDecryption(e,this.deviceIsolationMode)}getEventEncryptionInfo(e){const t={};return t.senderKey=e.getSenderKey()??void 0,t.algorithm=e.getWireContent().algorithm,!t.senderKey||!t.algorithm?(t.encrypted=!1,t):(t.encrypted=!0,t.authenticated=!0,t.mismatchedSender=!0,t)}checkUserTrust(e){return new ie(!1,!1,!1)}getStoredCrossSigningForUser(e){return null}async checkOwnCrossSigningTrust(){}async getBackupDecryptor(e,t){if(!(t instanceof Uint8Array))throw new Error("getBackupDecryptor: expects Uint8Array");if(e.algorithm!="m.megolm_backup.v1.curve25519-aes-sha2")throw new Error(`getBackupDecryptor: Unsupported algorithm ${e.algorithm}`);const s=P.fromBase64(ce(t));if(!oe(s,e))throw new Error("getBackupDecryptor: key backup on server does not match the decryption key");return this.backupManager.createBackupDecryptor(s)}async importBackedUpRoomKeys(e,t,s){return await this.backupManager.importBackedUpRoomKeys(e,t,s)}getVersion(){const e=it();return`Rust SDK ${e.matrix_sdk_crypto} (${e.git_sha}), Vodozemac ${e.vodozemac}`}setDeviceIsolationMode(e){this.deviceIsolationMode=e}async isEncryptionEnabledInRoom(e){const t=await this.olmMachine.getRoomSettings(new R(e));return!!(t!=null&&t.algorithm)}async getOwnDeviceKeys(){const e=this.olmMachine.identityKeys;return{ed25519:e.ed25519.toBase64(),curve25519:e.curve25519.toBase64()}}prepareToEncrypt(e){const t=this.roomEncryptors[e.roomId];t&&t.prepareForEncryption(this.globalBlacklistUnverifiedDevices,this.deviceIsolationMode)}forceDiscardSession(e){var t;return(t=this.roomEncryptors[e])==null?void 0:t.forceDiscardSession()}async exportRoomKeys(){const e=await this.olmMachine.exportRoomKeys(()=>!0);return JSON.parse(e)}async exportRoomKeysAsJson(){return await this.olmMachine.exportRoomKeys(()=>!0)}async importRoomKeys(e,t){return await this.backupManager.importRoomKeys(e,t)}async importRoomKeysAsJson(e,t){return await this.backupManager.importRoomKeysAsJson(e,t)}async userHasCrossSigningKeys(e=this.userId,t=!1){var n;const s=await this.olmMachine.trackedUsers();let i;for(const r of s)if(e===r.toString()){i=r;break}if(i!==void 0){if(e===this.userId){const o=this.olmMachine.queryKeysForUsers([i.clone()]);await this.outgoingRequestProcessor.makeOutgoingRequest(o)}const r=await this.olmMachine.getIdentity(i);return r==null||r.free(),r!==void 0}else if(t){const o=(n=(await this.downloadDeviceList(new Set([e]))).master_keys)==null?void 0:n[e];return o?!!Object.values(o.keys)[0]:!1}else return!1}async getUserDeviceInfo(e,t=!1){const s=new Map,i=await this.getOlmMachineOrThrow().trackedUsers(),n=new Set;i.forEach(o=>n.add(o.toString()));const r=new Set;for(const o of e)n.has(o)?s.set(o,await this.getUserDevices(o)):r.add(o);if(t&&r.size>=1){const o=await this.downloadDeviceList(r);Object.entries(o.device_keys).forEach(([c,u])=>s.set(c,Bt(u)))}return s}async getUserDevices(e){const t=new d(e),s=await this.olmMachine.getUserDevices(t,1);try{const i=s.devices();try{return new Map(i.map(n=>[n.deviceId.toString(),Dt(n,t)]))}finally{i.forEach(n=>n.free())}}finally{s.free()}}async downloadDeviceList(e){const t={device_keys:{}};return e.forEach(s=>t.device_keys[s]=[]),await this.http.authedRequest(f.Post,"/_matrix/client/v3/keys/query",void 0,t,{prefix:""})}getTrustCrossSignedDevices(){return this._trustCrossSignedDevices}setTrustCrossSignedDevices(e){this._trustCrossSignedDevices=e}async setDeviceVerified(e,t,s=!0){const i=await this.olmMachine.getDevice(new d(e),new M(t));if(!i)throw new Error(`Unknown device ${e}|${t}`);try{await i.setLocalTrust(s?pe.Verified:pe.Unset)}finally{i.free()}}async crossSignDevice(e){const t=await this.olmMachine.getDevice(new d(this.userId),new M(e));if(!t)throw new Error(`Unknown device ${e}`);try{const s=await t.verify();await this.outgoingRequestProcessor.makeOutgoingRequest(s)}finally{t.free()}}async getDeviceVerificationStatus(e,t){const s=await this.olmMachine.getDevice(new d(e),new M(t));if(!s)return null;try{return new kt({signedByOwner:s.isCrossSignedByOwner(),crossSigningVerified:s.isCrossSigningTrusted(),localVerified:s.isLocallyTrusted(),trustCrossSignedDevices:this._trustCrossSignedDevices})}finally{s.free()}}async getUserVerificationStatus(e){const t=await this.getOlmMachineOrThrow().getIdentity(new d(e));if(t===void 0)return new ie(!1,!1,!1);const s=t.isVerified(),i=t.wasPreviouslyVerified(),n=t instanceof nt?t.identityNeedsUserApproval():!1;return t.free(),new ie(s,i,!1,n)}async pinCurrentUserIdentity(e){const t=await this.getOlmMachineOrThrow().getIdentity(new d(e));if(t===void 0)throw new Error("Cannot pin identity of unknown user");if(t instanceof rt)throw new Error("Cannot pin identity of own user");await t.pinCurrentMasterKey()}async isCrossSigningReady(){const{privateKeysInSecretStorage:e,privateKeysCachedLocally:t}=await this.getCrossSigningStatus(),s=!!t.masterKey&&!!t.selfSigningKey&&!!t.userSigningKey,i=await this.getOwnIdentity();return!!(i!=null&&i.isVerified())&&(s||e)}async getCrossSigningKeyId(e=W.Master){const t=await this.olmMachine.getIdentity(new d(this.userId));if(!t)return null;try{const s=await this.olmMachine.crossSigningStatus();if(!(s.hasMaster&&s.hasUserSigning&&s.hasSelfSigning)||!t.isVerified())return null;let n;switch(e){case W.Master:n=t.masterKey;break;case W.SelfSigning:n=t.selfSigningKey;break;case W.UserSigning:n=t.userSigningKey;break;default:return null}const r=JSON.parse(n);return Object.values(r.keys)[0]}finally{t.free()}}async bootstrapCrossSigning(e){await this.crossSigningIdentity.bootstrapCrossSigning(e)}async isSecretStorageReady(){const e=["m.cross_signing.master","m.cross_signing.user_signing","m.cross_signing.self_signing"];return await this.backupManager.getActiveBackupVersion()!=null&&e.push("m.megolm_backup.v1"),xe(this.secretStorage,e)}async bootstrapSecretStorage({createSecretStorageKey:e,setupNewSecretStorage:t,setupNewKeyBackup:s}={}){const i=t||!await this.secretStorageHasAESKey();if(i){if(!e)throw new Error("unable to create a new secret storage key, createSecretStorageKey is not set");this.logger.info("bootstrapSecretStorage: creating new secret storage key");const o=await e();if(!o)throw new Error("createSecretStorageKey() callback did not return a secret storage key");await this.addSecretStorageKeyToSecretStorage(o)}const n=await this.olmMachine.crossSigningStatus();if(n.hasMaster&&n.hasSelfSigning&&n.hasUserSigning&&(i||!await be(this.secretStorage))){this.logger.info("bootstrapSecretStorage: cross-signing keys not yet exported; doing so now.");const o=await this.olmMachine.exportCrossSigningKeys();if(!o.masterKey)throw new Error("missing master key in cross signing private keys");if(!o.userSigningKey)throw new Error("missing user signing key in cross signing private keys");if(!o.self_signing_key)throw new Error("missing self signing key in cross signing private keys");await this.secretStorage.store("m.cross_signing.master",o.masterKey),await this.secretStorage.store("m.cross_signing.user_signing",o.userSigningKey),await this.secretStorage.store("m.cross_signing.self_signing",o.self_signing_key)}s?await this.resetKeyBackup():await this.saveBackupKeyToStorage()}async saveBackupKeyToStorage(){const e=await this.backupManager.getServerBackupInfo();if(!e||!e.version){h.info("Not saving backup key to secret storage: no backup info");return}const t=await this.olmMachine.getBackupKeys();if(!t.decryptionKey){h.info("Not saving backup key to secret storage: no backup key");return}if(!oe(t.decryptionKey,e)){h.info("Not saving backup key to secret storage: decryption key does not match backup info");return}const s=t.decryptionKey.toBase64();await this.secretStorage.store("m.megolm_backup.v1",s)}async addSecretStorageKeyToSecretStorage(e){var s,i,n,r;const t=await this.secretStorage.addKey(ke,{passphrase:(s=e.keyInfo)==null?void 0:s.passphrase,name:(i=e.keyInfo)==null?void 0:i.name,key:e.privateKey});await this.secretStorage.setDefaultKeyId(t.keyId),(r=(n=this.cryptoCallbacks).cacheSecretStorageKey)==null||r.call(n,t.keyId,t.keyInfo,e.privateKey)}async secretStorageHasAESKey(){const e=await this.secretStorage.getKey();if(!e)return!1;const[,t]=e;return t.algorithm===ke}async getCrossSigningStatus(){const e=await this.getOlmMachineOrThrow().getIdentity(new d(this.userId)),t=!!(e!=null&&e.masterKey)&&!!(e!=null&&e.selfSigningKey)&&!!(e!=null&&e.userSigningKey);e==null||e.free();const s=await be(this.secretStorage),i=await this.getOlmMachineOrThrow().crossSigningStatus();return{publicKeysOnDevice:t,privateKeysInSecretStorage:s,privateKeysCachedLocally:{masterKey:!!(i!=null&&i.hasMaster),userSigningKey:!!(i!=null&&i.hasUserSigning),selfSigningKey:!!(i!=null&&i.hasSelfSigning)}}}async createRecoveryKeyFromPassphrase(e){if(e){const t=Se(32),s=await St(e,t,this.RECOVERY_KEY_DERIVATION_ITERATIONS);return{keyInfo:{passphrase:{algorithm:"m.pbkdf2",iterations:this.RECOVERY_KEY_DERIVATION_ITERATIONS,salt:t}},privateKey:s,encodedPrivateKey:ve(s)}}else{const t=new Uint8Array(32);return globalThis.crypto.getRandomValues(t),{privateKey:t,encodedPrivateKey:ve(t)}}}async getEncryptionInfoForEvent(e){return this.eventDecryptor.getEncryptionInfoForEvent(e)}getVerificationRequestsToDeviceInProgress(e){return this.olmMachine.getVerificationRequests(new d(e)).filter(s=>s.roomId===void 0).map(s=>new T(this.olmMachine,s,this.outgoingRequestProcessor,this._supportedVerificationMethods))}findVerificationRequestDMInProgress(e,t){if(!t)throw new Error("missing userId");const i=this.olmMachine.getVerificationRequests(new d(t)).find(n=>{var r;return((r=n.roomId)==null?void 0:r.toString())===e});if(i)return new T(this.olmMachine,i,this.outgoingRequestProcessor,this._supportedVerificationMethods)}async requestVerificationDM(e,t){const s=await this.olmMachine.getIdentity(new d(e));if(!s)throw new Error(`unknown userId ${e}`);try{const i=this._supportedVerificationMethods.map(c=>z(c)),n=await s.verificationRequestContent(i),r=await this.sendVerificationRequestContent(t,n),o=await s.requestVerification(new R(t),new ot(r),i);return new T(this.olmMachine,o,this.outgoingRequestProcessor,this._supportedVerificationMethods)}finally{s.free()}}async sendVerificationRequestContent(e,t){const s=Se(32),{event_id:i}=await this.http.authedRequest(f.Put,`/_matrix/client/v3/rooms/${encodeURIComponent(e)}/send/m.room.message/${encodeURIComponent(s)}`,void 0,t,{prefix:""});return i}setSupportedVerificationMethods(e){this._supportedVerificationMethods=e??_e}async requestOwnUserVerification(){const e=await this.olmMachine.getIdentity(new d(this.userId));if(e===void 0)throw new Error("cannot request verification for this device when there is no existing cross-signing key");try{const[t,s]=await e.requestVerification(this._supportedVerificationMethods.map(z));return await this.outgoingRequestProcessor.makeOutgoingRequest(s),new T(this.olmMachine,t,this.outgoingRequestProcessor,this._supportedVerificationMethods)}finally{e.free()}}async requestDeviceVerification(e,t){const s=await this.olmMachine.getDevice(new d(e),new M(t));if(!s)throw new Error("Not a known device");try{const[i,n]=s.requestVerification(this._supportedVerificationMethods.map(z));return await this.outgoingRequestProcessor.makeOutgoingRequest(n),new T(this.olmMachine,i,this.outgoingRequestProcessor,this._supportedVerificationMethods)}finally{s.free()}}async getSessionBackupPrivateKey(){const e=await this.olmMachine.getBackupKeys();return e.decryptionKey?ae(e.decryptionKey.toBase64()):null}async storeSessionBackupPrivateKey(e,t){const s=ce(e);if(!t)throw new Error("storeSessionBackupPrivateKey: version is required");await this.backupManager.saveBackupDecryptionKey(P.fromBase64(s),t)}async loadSessionBackupPrivateKeyFromSecretStorage(){const e=await this.secretStorage.get("m.megolm_backup.v1");if(!e)throw new Error("loadSessionBackupPrivateKeyFromSecretStorage: missing decryption key in secret storage");const t=await this.backupManager.getServerBackupInfo();if(!t||!t.version)throw new Error("loadSessionBackupPrivateKeyFromSecretStorage: unable to get backup version");const s=P.fromBase64(e);if(!oe(s,t))throw new Error("loadSessionBackupPrivateKeyFromSecretStorage: decryption key does not match backup info");await this.backupManager.saveBackupDecryptionKey(s,t.version)}async getActiveSessionBackupVersion(){return await this.backupManager.getActiveBackupVersion()}async getKeyBackupInfo(){return await this.backupManager.getServerBackupInfo()||null}async isKeyBackupTrusted(e){return await this.backupManager.isKeyBackupTrusted(e)}async checkKeyBackupAndEnable(){return await this.backupManager.checkKeyBackupAndEnable(!0)}async deleteKeyBackupVersion(e){await this.backupManager.deleteKeyBackupVersion(e)}async resetKeyBackup(){const e=await this.backupManager.setupKeyBackup(t=>this.signObject(t));await this.secretStorageHasAESKey()&&await this.secretStorage.store("m.megolm_backup.v1",e.decryptionKey.toBase64()),this.checkKeyBackupAndEnable()}async signObject(e){const t=new Map(Object.entries(e.signatures||{})),s=e.unsigned;delete e.signatures,delete e.unsigned;const i=t.get(this.userId)||{},n=vt.stringify(e),r=await this.olmMachine.sign(n),o=JSON.parse(r.asJSON());t.set(this.userId,{...i,...o[this.userId]}),s!==void 0&&(e.unsigned=s),e.signatures=Object.fromEntries(t.entries())}async restoreKeyBackupWithPassphrase(e,t){const s=await this.backupManager.getServerBackupInfo();if(!(s!=null&&s.version))throw new Error("No backup info available");const i=await Rt(s.auth_data,e);return await this.storeSessionBackupPrivateKey(i,s.version),this.restoreKeyBackup(t)}async restoreKeyBackup(e){var c;const t=await this.olmMachine.getBackupKeys(),{decryptionKey:s,backupVersion:i}=t;if(!s||!i)throw new Error("No decryption key found in crypto store");const n=ae(s.toBase64()),r=await this.backupManager.requestKeyBackupVersion(i);if(!r)throw new Error(`Backup version to restore ${i} not found on server`);const o=await this.getBackupDecryptor(r,n);try{return(c=e==null?void 0:e.progressCallback)==null||c.call(e,{stage:"fetch"}),await this.backupManager.restoreKeyBackup(i,o,e)}finally{o.free()}}async isDehydrationSupported(){return await this.dehydratedDeviceManager.isSupported()}async startDehydration(e){if(!await this.isCrossSigningReady()||!await this.isSecretStorageReady())throw new Error("Device dehydration requires cross-signing and secret storage to be set up");return await this.dehydratedDeviceManager.start(e)}async importSecretsBundle(e){const t=at.from_json(e);await this.getOlmMachineOrThrow().importSecretsBundle(t)}async exportSecretsBundle(){const e=await this.getOlmMachineOrThrow().exportSecretsBundle(),t=e.to_json();return e.free(),t}async encryptToDeviceMessages(e,t,s){const i=new Pe(this.logger,"encryptToDeviceMessages"),n=new Set(t.map(({userId:o})=>o));await this.keyClaimManager.ensureSessionsForUsers(i,Array.from(n).map(o=>new d(o)));const r={batch:[],eventType:v.RoomMessageEncrypted};return await Promise.all(t.map(async({userId:o,deviceId:c})=>{const u=await this.olmMachine.getDevice(new d(o),new M(c));if(u){const g=JSON.parse(await u.encryptToDeviceEvent(e,s));r.batch.push({deviceId:c,userId:o,payload:g})}else this.logger.warn(`encryptToDeviceMessages: unknown device ${o}:${c}`)})),r}async receiveSyncChanges({events:e,oneTimeKeysCounts:t=new Map,unusedFallbackKeys:s,devices:i=new fe}){const n=await E(h,"receiveSyncChanges",async()=>await this.olmMachine.receiveSyncChanges(e?JSON.stringify(e):"[]",i,t,s));return JSON.parse(n)}async preprocessToDeviceMessages(e){const t=await this.receiveSyncChanges({events:e});for(const s of t)if(s.type===v.KeyVerificationRequest){const i=s.sender,n=s.content.transaction_id;n&&i&&this.onIncomingKeyVerificationRequest(i,n)}return t}async processKeyCounts(e,t){const s=e&&new Map(Object.entries(e)),i=t&&new Set(t);(s!==void 0||i!==void 0)&&await this.receiveSyncChanges({oneTimeKeysCounts:s,unusedFallbackKeys:i})}async processDeviceLists(e){var s,i;const t=new fe((s=e.changed)==null?void 0:s.map(n=>new d(n)),(i=e.left)==null?void 0:i.map(n=>new d(n)));await this.receiveSyncChanges({devices:t})}async onCryptoEvent(e,t){const s=t.getContent(),i=new Be;if(s.algorithm==="m.megolm.v1.aes-sha2")i.algorithm=L.MegolmV1AesSha2;else{this.logger.warn(`Room ${e.roomId}: ignoring crypto event with invalid algorithm ${s.algorithm}`);return}try{i.sessionRotationPeriodMs=s.rotation_period_ms,i.sessionRotationPeriodMessages=s.rotation_period_msgs,await this.olmMachine.setRoomSettings(new R(e.roomId),i)}catch(r){this.logger.warn(`Room ${e.roomId}: ignoring crypto event which caused error: ${r}`);return}const n=this.roomEncryptors[e.roomId];n?n.onCryptoEvent(s):this.roomEncryptors[e.roomId]=new Kt(this.olmMachine,this.keyClaimManager,this.outgoingRequestsManager,e,s)}onSyncCompleted(e){this.outgoingRequestsManager.doProcessOutgoingRequests().catch(t=>{this.logger.warn("onSyncCompleted: Error processing outgoing requests",t)})}onIncomingKeyVerificationRequest(e,t){const s=this.olmMachine.getVerificationRequest(new d(e),t);s?this.emit(y.VerificationRequestReceived,new T(this.olmMachine,s,this.outgoingRequestProcessor,this._supportedVerificationMethods)):this.logger.info(`Ignoring just-received verification request ${t} which did not start a rust-side verification`)}onRoomMembership(e,t,s){const i=this.roomEncryptors[e.getRoomId()];i&&i.onRoomMembership(t)}async onRoomKeysUpdated(e){for(const t of e)this.onRoomKeyUpdated(t);this.backupManager.maybeUploadKey()}onRoomKeyUpdated(e){if(this.stopped)return;this.logger.debug(`Got update for session ${e.sessionId} from sender ${e.senderKey.toBase64()} in ${e.roomId.toString()}`);const t=this.eventDecryptor.getEventsPendingRoomKey(e.roomId.toString(),e.sessionId);if(t.length!==0){this.logger.debug("Retrying decryption on events:",t.map(s=>`${s.getId()}`));for(const s of t)s.attemptDecryption(this,{isRetry:!0}).catch(i=>{this.logger.info(`Still unable to decrypt event ${s.getId()} after receiving key`)})}}async onRoomKeysWithheld(e){for(const t of e){this.logger.debug(`Got withheld message for session ${t.sessionId} in ${t.roomId.toString()}`);const s=this.eventDecryptor.getEventsPendingRoomKey(t.roomId.toString(),t.sessionId);if(s.length===0)return;this.logger.debug("Retrying decryption on events:",s.map(i=>`${i.getId()}`));for(const i of s)i.attemptDecryption(this,{isRetry:!0}).catch(n=>{})}}async onUserIdentityUpdated(e){const t=await this.getUserVerificationStatus(e.toString());this.emit(y.UserTrustStatusChanged,e.toString(),t),e.toString()===this.userId&&(this.emit(y.KeysChanged,{}),await this.checkKeyBackupAndEnable())}async onDevicesUpdated(e){this.emit(y.WillUpdateDevices,e,!1),this.emit(y.DevicesUpdated,e,!1)}async handleSecretReceived(e,t){return this.logger.debug(`onReceiveSecret: Received secret ${e}`),e==="m.megolm_backup.v1"?await this.backupManager.handleBackupSecretReceived(t):!1}async checkSecrets(e){const t=await this.olmMachine.getSecretsFromInbox(e);for(const s of t)if(await this.handleSecretReceived(e,s))break;await this.olmMachine.deleteSecretsFromInbox(e)}async onLiveEventFromSync(e){if(e.isState()||e.getUnsigned().transaction_id)return;const t=async s=>{Tt(e)&&await this.onKeyVerificationEvent(s)};if(e.isDecryptionFailure()||e.isEncrypted()){const i=setTimeout(()=>e.off(ne.Decrypted,n),3e5),n=(r,o)=>{o||(clearTimeout(i),e.off(ne.Decrypted,n),t(r))};e.on(ne.Decrypted,n)}else await t(e)}async onKeyVerificationEvent(e){const t=e.getRoomId();if(!t)throw new Error("missing roomId in the event");this.logger.debug(`Incoming verification event ${e.getId()} type ${e.getType()} from ${e.getSender()}`),await this.olmMachine.receiveVerificationEvent(JSON.stringify({event_id:e.getId(),type:e.getType(),sender:e.getSender(),state_key:e.getStateKey(),content:e.getContent(),origin_server_ts:e.getTs()}),new R(t)),e.getType()===v.RoomMessage&&e.getContent().msgtype===Ne.KeyVerificationRequest&&this.onIncomingKeyVerificationRequest(e.getSender(),e.getId()),this.outgoingRequestsManager.doProcessOutgoingRequests().catch(s=>{this.logger.warn("onKeyVerificationRequest: Error processing outgoing requests",s)})}async getOwnIdentity(){return await this.olmMachine.getIdentity(new d(this.userId))}}class Lt{constructor(e,t,s){this.logger=e,this.olmMachine=t,this.perSessionBackupDownloader=s,this.eventsPendingKey=new Re(()=>new Re(()=>new Set))}async attemptEventDecryption(e,t){this.addEventToPendingList(e);let s;switch(t.kind){case X.AllDevicesIsolationMode:s=me.Untrusted;break;case X.OnlySignedDevicesIsolationMode:s=me.CrossSignedOrLegacy;break}try{const i=await this.olmMachine.decryptRoomEvent(De(e),new R(e.getRoomId()),new ct(s));return this.removeEventFromPendingList(e),{clearEvent:JSON.parse(i.event),claimedEd25519Key:i.senderClaimedEd25519Key,senderCurve25519Key:i.senderCurve25519Key,forwardingCurve25519KeyChain:i.forwardingCurve25519KeyChain}}catch(i){if(i instanceof ut)this.onMegolmDecryptionError(e,i,await this.perSessionBackupDownloader.getServerBackupInfo());else throw new S(k.UNKNOWN_ERROR,"Unknown error")}}onMegolmDecryptionError(e,t,s){const i=e.getWireContent(),n={sender_key:i.sender_key,session_id:i.session_id};if(t.code===C.MissingRoomKey||t.code===C.UnknownMessageIndex){this.perSessionBackupDownloader.onDecryptionKeyMissingError(e.getRoomId(),i.session_id);const r=e.getMembershipAtEvent();if(r&&r!==Z.Join&&r!==Z.Invite)throw new S(k.HISTORICAL_MESSAGE_USER_NOT_JOINED,"This message was sent when we were not a member of the room.",n);if(e.getTs()<=this.olmMachine.deviceCreationTimeMs)throw s===null?new S(k.HISTORICAL_MESSAGE_NO_KEY_BACKUP,"This message was sent before this device logged in, and there is no key backup on the server.",n):this.perSessionBackupDownloader.isKeyBackupDownloadConfigured()?new S(k.HISTORICAL_MESSAGE_WORKING_BACKUP,"This message was sent before this device logged in. Key backup is working, but we still do not (yet) have the key.",n):new S(k.HISTORICAL_MESSAGE_BACKUP_UNCONFIGURED,"This message was sent before this device logged in, and key backup is not working.",n)}if(t.maybe_withheld){const r=t.maybe_withheld==="The sender has disabled encrypting to unverified devices."?k.MEGOLM_KEY_WITHHELD_FOR_UNVERIFIED_DEVICE:k.MEGOLM_KEY_WITHHELD;throw new S(r,t.maybe_withheld,n)}switch(t.code){case C.MissingRoomKey:throw new S(k.MEGOLM_UNKNOWN_INBOUND_SESSION_ID,"The sender's device has not sent us the keys for this message.",n);case C.UnknownMessageIndex:throw new S(k.OLM_UNKNOWN_MESSAGE_INDEX,"The sender's device has not sent us the keys for this message at this index.",n);case C.SenderIdentityVerificationViolation:throw this.removeEventFromPendingList(e),new S(k.SENDER_IDENTITY_PREVIOUSLY_VERIFIED,"The sender identity is unverified, but was previously verified.");case C.UnknownSenderDevice:throw this.removeEventFromPendingList(e),new S(k.UNKNOWN_SENDER_DEVICE,"The sender device is not known.");case C.UnsignedSenderDevice:throw this.removeEventFromPendingList(e),new S(k.UNSIGNED_SENDER_DEVICE,"The sender identity is not cross-signed.");default:throw new S(k.UNKNOWN_ERROR,t.description,n)}}async getEncryptionInfoForEvent(e){if(!e.getClearContent()||e.isDecryptionFailure())return null;if(e.status!==null)return{shieldColour:Q.NONE,shieldReason:null};const t=await this.olmMachine.getRoomEventEncryptionInfo(De(e),new R(e.getRoomId()));return $t(this.logger,t)}getEventsPendingRoomKey(e,t){const s=this.eventsPendingKey.get(e);if(!s)return[];const i=s.get(t);return i?[...i]:[]}addEventToPendingList(e){const t=e.getRoomId();if(!t)return;this.eventsPendingKey.getOrCreate(t).getOrCreate(e.getWireContent().session_id).add(e)}removeEventFromPendingList(e){const t=e.getRoomId();if(!t)return;const s=this.eventsPendingKey.getOrCreate(t);if(!s)return;const i=s.get(e.getWireContent().session_id);i&&(i.delete(e),i.size===0&&(s.delete(e.getWireContent().session_id),s.size===0&&this.eventsPendingKey.delete(t)))}}function De(a){return JSON.stringify({event_id:a.getId(),type:a.getWireType(),sender:a.getSender(),state_key:a.getStateKey(),content:a.getWireContent(),origin_server_ts:a.getTs()})}function $t(a,e){if(e===void 0)return null;const t=e.shieldState(!1);let s;switch(t.color){case we.Grey:s=Q.GREY;break;case we.None:s=Q.NONE;break;default:s=Q.RED}let i;switch(t.code){case void 0:case null:i=null;break;case O.AuthenticityNotGuaranteed:i=q.AUTHENTICITY_NOT_GUARANTEED;break;case O.UnknownDevice:i=q.UNKNOWN_DEVICE;break;case O.UnsignedDevice:i=q.UNSIGNED_DEVICE;break;case O.UnverifiedIdentity:i=q.UNVERIFIED_IDENTITY;break;case O.SentInClear:i=q.SENT_IN_CLEAR;break;case O.VerificationViolation:i=q.VERIFICATION_VIOLATION;break}return{shieldColour:s,shieldReason:i}}async function xt(a){var l;const{logger:e,legacyStore:t}=a;if(await Oe(),new qe(Te.Debug).turnOn(),!await t.containsData())return;await t.startup();let s=null;if(await t.doTxn("readonly",[$.STORE_ACCOUNT],p=>{t.getAccount(p,w=>{s=w})}),!s){e.debug("Legacy crypto store is not set up (no account found). Not migrating.");return}let i=await t.getMigrationState();if(i>=b.MEGOLM_SESSIONS_MIGRATED)return;const n=await Gt(e,t),r=await Wt(e,t),o=1+n+r;e.info(`Migrating data from legacy crypto store. ${n} olm sessions and ${r} megolm sessions to migrate.`);let c=0;function u(p){var w;c+=p,(w=a.legacyMigrationProgressListener)==null||w.call(a,c,o)}u(0);const g=new TextEncoder().encode(a.legacyPickleKey);i===b.NOT_STARTED&&(e.info("Migrating data from legacy crypto store. Step 1: base data"),await Ft(a.http,a.userId,a.deviceId,t,g,a.storeHandle,e),i=b.INITIAL_DATA_MIGRATED,await t.setMigrationState(i)),u(1),i===b.INITIAL_DATA_MIGRATED&&(e.info(`Migrating data from legacy crypto store. Step 2: olm sessions (${n} sessions to migrate).`),await Jt(e,t,g,a.storeHandle,u),i=b.OLM_SESSIONS_MIGRATED,await t.setMigrationState(i)),i===b.OLM_SESSIONS_MIGRATED&&(e.info(`Migrating data from legacy crypto store. Step 3: megolm sessions (${r} sessions to migrate).`),await jt(e,t,g,a.storeHandle,u),i=b.MEGOLM_SESSIONS_MIGRATED,await t.setMigrationState(i)),(l=a.legacyMigrationProgressListener)==null||l.call(a,-1,-1),e.info("Migration from legacy crypto store complete")}async function Ft(a,e,t,s,i,n,r){var u;const o=new ht;o.userId=new d(e),o.deviceId=new M(t),await s.doTxn("readonly",[$.STORE_ACCOUNT],g=>s.getAccount(g,l=>{o.pickledAccount=l??""}));const c=await j(s,i,"m.megolm_backup.v1");if(c){let g=!1,l=null;for(;!g;)try{l=await We(a),g=!0}catch(p){r.info("Failed to get backup version during migration, retrying in 2 seconds",p),await _(2e3)}if(l&&l.algorithm=="m.megolm_backup.v1.curve25519-aes-sha2")try{const p=P.fromBase64(c),w=(u=l.auth_data)==null?void 0:u.public_key;p.megolmV1PublicKey.publicKeyBase64==w?(o.backupVersion=l.version,o.backupRecoveryKey=c):r.debug("The backup key to migrate does not match the active backup version",`Cached pub key: ${p.megolmV1PublicKey.publicKeyBase64}`,`Active pub key: ${w}`)}catch(p){r.warn("Failed to check if the backup key to migrate matches the active backup version",p)}}o.privateCrossSigningMasterKey=await j(s,i,"master"),o.privateCrossSigningSelfSigningKey=await j(s,i,"self_signing"),o.privateCrossSigningUserSigningKey=await j(s,i,"user_signing"),await ue.migrateBaseData(o,i,n)}async function Gt(a,e){a.debug("Counting olm sessions to be migrated");let t;return await e.doTxn("readonly",[$.STORE_SESSIONS],s=>e.countEndToEndSessions(s,i=>t=i)),t}async function Wt(a,e){return a.debug("Counting megolm sessions to be migrated"),await e.countEndToEndInboundGroupSessions()}async function Jt(a,e,t,s,i){for(;;){const n=await e.getEndToEndSessionsBatch();if(n===null)return;a.debug(`Migrating batch of ${n.length} olm sessions`);const r=[];for(const o of n){const c=new gt;c.senderKey=o.deviceKey,c.pickle=o.session,c.lastUseTime=c.creationTime=new Date(o.lastReceivedMessageTs),r.push(c)}await ue.migrateOlmSessions(r,t,s),await e.deleteEndToEndSessionsBatch(n),i(n.length)}}async function jt(a,e,t,s,i){var n;for(;;){const r=await e.getEndToEndInboundGroupSessionsBatch();if(r===null)return;a.debug(`Migrating batch of ${r.length} megolm sessions`);const o=[];for(const c of r){const u=c.sessionData,g=new dt;g.pickle=u.session,g.roomId=new R(u.room_id),g.senderKey=c.senderKey,g.senderSigningKey=(n=u.keysClaimed)==null?void 0:n.ed25519,g.backedUp=!c.needsBackup,g.imported=u.untrusted===!0,o.push(g)}await ue.migrateMegolmSessions(o,t,s),await e.deleteEndToEndInboundGroupSessionsBatch(r),i(r.length)}}async function Ht({logger:a,legacyStore:e,olmMachine:t}){if(!await e.containsData()||await e.getMigrationState()>=b.ROOM_SETTINGS_MIGRATED)return;let i={};await e.doTxn("readwrite",[$.STORE_ROOMS],n=>{e.getEndToEndRooms(n,r=>{i=r})}),a.debug(`Migrating ${Object.keys(i).length} sets of room settings`);for(const[n,r]of Object.entries(i))try{const o=new Be;if(r.algorithm!=="m.megolm.v1.aes-sha2"){a.warn(`Room ${n}: ignoring room with invalid algorithm ${r.algorithm}`);continue}o.algorithm=L.MegolmV1AesSha2,o.sessionRotationPeriodMs=r.rotation_period_ms,o.sessionRotationPeriodMessages=r.rotation_period_msgs,await t.setRoomSettings(new R(n),o)}catch(o){a.warn(`Room ${n}: ignoring settings ${JSON.stringify(r)} which caused error ${o}`)}a.debug("Completed room settings migration"),await e.setMigrationState(b.ROOM_SETTINGS_MIGRATED)}async function j(a,e,t){const s=await new Promise(i=>{a.doTxn("readonly",[$.STORE_ACCOUNT],n=>{a.getSecretStorePrivateKey(n,i,t)})});return s&&s.ciphertext&&s.iv&&s.mac?await bt(s,e,t):s instanceof Uint8Array?ce(s):void 0}async function Qt(a){const{legacyCryptoStore:e,rustCrypto:t,logger:s}=a,i=await t.getOwnIdentity();if(!i||i.isVerified())return;const n=await Yt(e);if(!n)return;const r=JSON.parse(i.masterKey);if(!r.keys||Object.keys(r.keys).length===0){s.error("Post Migration | Unexpected error: no master key in the rust session.");return}const o=Object.values(r.keys)[0];o&&o==n&&(s.info(`Post Migration: Migrating legacy trusted MSK: ${n} to locally verified.`),await i.verify())}async function Yt(a){let e=null;return await a.doTxn("readonly","account",t=>{a.getCrossSigningKeys(t,s=>{const i=s==null?void 0:s.master;i&&Object.keys(i.keys).length!=0&&(e=Object.values(i.keys)[0])})}),e}async function es(a){const{logger:e}=a;e.debug("Initialising Rust crypto-sdk WASM artifact"),await Oe(),new qe(Te.Debug).turnOn(),e.debug("Opening Rust CryptoStore");let t;a.storePrefix?a.storeKey?t=await se.openWithKey(a.storePrefix,a.storeKey):t=await se.open(a.storePrefix,a.storePassphrase):t=await se.open(),a.legacyCryptoStore&&await xt({legacyStore:a.legacyCryptoStore,storeHandle:t,...a});const s=await zt(e,a.http,a.userId,a.deviceId,a.secretStorage,a.cryptoCallbacks,t,a.legacyCryptoStore);return t.free(),e.debug("Completed rust crypto-sdk setup"),s}async function zt(a,e,t,s,i,n,r,o){a.debug("Init OlmMachine");const c=await lt.initFromStore(new d(t),new M(s),r);o&&await Ht({logger:a,legacyStore:o,olmMachine:c}),c.roomKeyRequestsEnabled=!1;const u=new At(a,c,e,t,s,i,n);if(await c.registerRoomKeyUpdatedCallback(g=>u.onRoomKeysUpdated(g)),await c.registerRoomKeysWithheldCallback(g=>u.onRoomKeysWithheld(g)),await c.registerUserIdentityUpdatedCallback(g=>u.onUserIdentityUpdated(g)),await c.registerDevicesUpdatedCallback(g=>u.onDevicesUpdated(g)),u.checkSecrets("m.megolm_backup.v1"),await c.registerReceiveSecretCallback((g,l)=>u.checkSecrets(g)),await c.outgoingRequests(),o&&await o.containsData()&&await o.getMigrationState()<b.INITIAL_OWN_KEY_QUERY_DONE){a.debug("Performing initial key query after migration");let l=!1;for(;!l;)try{await u.userHasCrossSigningKeys(t),l=!0}catch(p){a.error("Failed to check for cross-signing keys after migration, retrying",p)}await Qt({legacyCryptoStore:o,rustCrypto:u,logger:a}),await o.setMigrationState(b.INITIAL_OWN_KEY_QUERY_DONE)}return u}export{es as initRustCrypto};
//# sourceMappingURL=index-B7E9g7G3.js.map
